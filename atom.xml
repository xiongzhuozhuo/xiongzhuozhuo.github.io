<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XiongZhuo</title>
  
  
  <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/atom.xml" rel="self"/>
  
  <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/"/>
  <updated>2021-03-06T05:31:19.858Z</updated>
  <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/</id>
  
  <author>
    <name>软糖豆人</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>个人分享平台构建（博客搭建篇）——Hexo + Next + Github</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA%EF%BC%88%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AF%87%EF%BC%89%E2%80%94%E2%80%94Hexo%20+%20Next%20+%20Github/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA%EF%BC%88%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AF%87%EF%BC%89%E2%80%94%E2%80%94Hexo%20+%20Next%20+%20Github/</id>
    <published>2021-09-16T17:27:15.061Z</published>
    <updated>2021-03-06T05:31:19.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><h4 id="1-1-1-安装前提"><a href="#1-1-1-安装前提" class="headerlink" title="1.1.1 安装前提"></a>1.1.1 安装前提</h4><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h4 id="1-1-2-安装-Node-js"><a href="#1-1-2-安装-Node-js" class="headerlink" title="1.1.2 安装 Node.js"></a>1.1.2 安装 Node.js</h4><p>简单的说 <strong>Node.js</strong> 就是运行在服务端的 JavaScript。**Node.js **是一个基于Chrome JavaScript 运行时建立的一个平台。</p><p><strong>Node.js</strong>是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p><p><strong>Node.js</strong> 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。也可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p><p>其它的安装方法：</p><ul><li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li><li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li><li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li><li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a></li></ul><p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p><blockquote><p><strong>Windows 用户</strong></p><p>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p></blockquote><blockquote><p><strong>For Mac / Linux 用户</strong></p><p>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</p></blockquote><blockquote><p><strong>Linux</strong></p><p>‎如果您使用Snap安装了<strong>Node.js</strong>，在‎<a href="https://hexo.io/docs/commands#init">‎初始化‎</a>‎博客时，您可能需要手动运行在目标文件夹中。‎<code>npm install</code></p></blockquote><h4 id="1-1-3-安装-Git"><a href="#1-1-3-安装-Git" class="headerlink" title="1.1.3 安装 Git"></a>1.1.3 安装 Git</h4><ul><li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li><li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li><li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li></ul><blockquote><p><strong>Mac 用户</strong></p><p>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p></blockquote><blockquote><p><strong>Windows 用户</strong></p><p>前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p></blockquote><h4 id="1-1-4-安装-Hexo"><a href="#1-1-4-安装-Hexo" class="headerlink" title="1.1.4 安装 Hexo"></a>1.1.4 安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="1-1-5-进阶安装和使用"><a href="#1-1-5-进阶安装和使用" class="headerlink" title="1.1.5 进阶安装和使用"></a>1.1.5 进阶安装和使用</h4><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><p><code>npx hexo &lt;command&gt;</code></p></li><li><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;PATH&#x3D;&quot;$PATH:.&#x2F;node_modules&#x2F;.bin&quot;&#39; &gt;&gt; ~&#x2F;.profile</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-1-6-Node-js-版本限制"><a href="#1-1-6-Node-js-版本限制" class="headerlink" title="1.1.6 Node.js 版本限制"></a>1.1.6 Node.js 版本限制</h4><p>我们强烈建议永远安装最新版本的 Hexo，以及 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p><table><thead><tr><th align="left">Hexo 版本</th><th align="center">最低兼容 Node.js 版本</th></tr></thead><tbody><tr><td align="left">5.0+</td><td align="center">10.13.0</td></tr><tr><td align="left">4.1 - 4.2</td><td align="center">8.10</td></tr><tr><td align="left">4.0</td><td align="center">8.6</td></tr><tr><td align="left">3.3 - 3.9</td><td align="center">6.9</td></tr><tr><td align="left">3.2 - 3.3</td><td align="center">0.12</td></tr><tr><td align="left">3.0 - 3.1</td><td align="center">0.10 or iojs</td></tr><tr><td align="left">0.0.1 - 2.8</td><td align="center">0.10</td></tr></tbody></table><h3 id="2-建站"><a href="#2-建站" class="headerlink" title="2 建站"></a>2 建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h4 id="2-1-config-yml"><a href="#2-1-config-yml" class="headerlink" title="2.1 _config.yml"></a>2.1 _config.yml</h4><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><h4 id="2-2-package-json"><a href="#2-2-package-json" class="headerlink" title="2.2 package.json"></a>2.2 package.json</h4><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-scaffolds"><a href="#2-3-scaffolds" class="headerlink" title="2.3 scaffolds"></a>2.3 scaffolds</h4><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h4 id="2-4-source"><a href="#2-4-source" class="headerlink" title="2.4 source"></a>2.4 source</h4><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p><h4 id="2-5-themes"><a href="#2-5-themes" class="headerlink" title="2.5 themes"></a>2.5 themes</h4><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h3><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p><h4 id="3-1-网站"><a href="#3-1-网站" class="headerlink" title="3.1 网站"></a>3.1 网站</h4><hr><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>title</code></td><td align="left">网站标题</td></tr><tr><td align="left"><code>subtitle</code></td><td align="left">网站副标题</td></tr><tr><td align="left"><code>description</code></td><td align="left">网站描述</td></tr><tr><td align="left"><code>keywords</code></td><td align="left">网站的关键词。支持多个关键词。</td></tr><tr><td align="left"><code>author</code></td><td align="left">您的名字</td></tr><tr><td align="left"><code>language</code></td><td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td align="left"><code>timezone</code></td><td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h4 id="3-2-网址"><a href="#3-2-网址" class="headerlink" title="3.2 网址"></a>3.2 网址</h4><hr><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>url</code></td><td align="left">网址, must starts with <code>http://</code> or <code>https://</code></td><td align="left"></td></tr><tr><td align="left"><code>root</code></td><td align="left">网站根目录</td><td align="left"><code>url&#39;s pathname</code></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td><td align="left"><code>:year/:month/:day/:title/</code></td></tr><tr><td align="left"><code>permalink_defaults</code></td><td align="left">永久链接中各部分的默认值</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls</code></td><td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td><td align="left"></td></tr><tr><td align="left"><code>pretty_urls.trailing_index</code></td><td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>pretty_urls.trailing_html</code></td><td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td><td align="left"><code>true</code></td></tr></tbody></table><blockquote><p>网站存放在子目录</p><p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p></blockquote><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 比如，一个页面的永久链接是 http:&#x2F;&#x2F;example.com&#x2F;foo&#x2F;bar&#x2F;index.html</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: false</span><br><span class="line"># 此时页面的永久链接会变为 http:&#x2F;&#x2F;example.com&#x2F;foo&#x2F;bar&#x2F;</span><br></pre></td></tr></table></figure><h4 id="3-3-目录"><a href="#3-3-目录" class="headerlink" title="3.3 目录"></a>3.3 目录</h4><hr><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>source_dir</code></td><td align="left">资源文件夹，这个文件夹用来存放内容。</td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>public_dir</code></td><td align="left">公共文件夹，这个文件夹用于存放生成的站点文件。</td><td align="left"><code>public</code></td></tr><tr><td align="left"><code>tag_dir</code></td><td align="left">标签文件夹</td><td align="left"><code>tags</code></td></tr><tr><td align="left"><code>archive_dir</code></td><td align="left">归档文件夹</td><td align="left"><code>archives</code></td></tr><tr><td align="left"><code>category_dir</code></td><td align="left">分类文件夹</td><td align="left"><code>categories</code></td></tr><tr><td align="left"><code>code_dir</code></td><td align="left">Include code 文件夹，<code>source_dir</code> 下的子目录</td><td align="left"><code>downloads/code</code></td></tr><tr><td align="left"><code>i18n_dir</code></td><td align="left">国际化（i18n）文件夹</td><td align="left"><code>:lang</code></td></tr><tr><td align="left"><code>skip_render</code></td><td align="left">跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td><td align="left"></td></tr></tbody></table><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">skip_render: &quot;mypage&#x2F;**&#x2F;*&quot;</span><br><span class="line"># 将会直接将 &#96;source&#x2F;mypage&#x2F;index.html&#96; 和 &#96;source&#x2F;mypage&#x2F;code.js&#96; 不做改动地输出到 &#39;public&#39; 目录</span><br><span class="line"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><br><span class="line">skip_render: &quot;_posts&#x2F;test-post.md&quot;</span><br><span class="line"># 这将会忽略对 &#39;test-post.md&#39; 的渲染</span><br></pre></td></tr></table></figure><blockquote><p>提示</p><p>如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</p></blockquote><h4 id="3-4-文章"><a href="#3-4-文章" class="headerlink" title="3.4 文章"></a>3.4 文章</h4><hr><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>new_post_name</code></td><td align="left">新文章的文件名称</td><td align="left">:title.md</td></tr><tr><td align="left"><code>default_layout</code></td><td align="left">预设布局</td><td align="left">post</td></tr><tr><td align="left"><code>auto_spacing</code></td><td align="left">在中文和英文之间加入空格</td><td align="left">false</td></tr><tr><td align="left"><code>titlecase</code></td><td align="left">把标题转换为 title case</td><td align="left">false</td></tr><tr><td align="left"><code>external_link</code></td><td align="left">在新标签中打开链接</td><td align="left">true</td></tr><tr><td align="left"><code>external_link.enable</code></td><td align="left">在新标签中打开链接</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>external_link.field</code></td><td align="left">对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td><td align="left"><code>site</code></td></tr><tr><td align="left"><code>external_link.exclude</code></td><td align="left">需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td><td align="left"><code>[]</code></td></tr><tr><td align="left"><code>filename_case</code></td><td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td><td align="left">0</td></tr><tr><td align="left"><code>render_drafts</code></td><td align="left">显示草稿</td><td align="left">false</td></tr><tr><td align="left"><code>post_asset_folder</code></td><td align="left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td><td align="left">false</td></tr><tr><td align="left"><code>relative_link</code></td><td align="left">把链接改为与根目录的相对位址</td><td align="left">false</td></tr><tr><td align="left"><code>future</code></td><td align="left">显示未来的文章</td><td align="left">true</td></tr><tr><td align="left"><code>highlight</code></td><td align="left">代码块的设置, see <a href="https://hexo.io/docs/syntax-highlight#Highlight-js">Highlight.js</a> section for usage guide</td><td align="left"></td></tr><tr><td align="left"><code>prismjs</code></td><td align="left">代码块的设置, see <a href="https://hexo.io/docs/syntax-highlight#PrismJS">PrismJS</a> section for usage guide</td><td align="left"></td></tr></tbody></table><blockquote><p>相对地址</p><p>默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <code>example.com</code>,您有一篇文章名为 <code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p></blockquote><h4 id="3-5-分类-amp-标签"><a href="#3-5-分类-amp-标签" class="headerlink" title="3.5 分类 &amp; 标签"></a>3.5 分类 &amp; 标签</h4><hr><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>default_category</code></td><td align="left">默认分类</td><td align="left"><code>uncategorized</code></td></tr><tr><td align="left"><code>category_map</code></td><td align="left">分类别名</td><td align="left"></td></tr><tr><td align="left"><code>tag_map</code></td><td align="left">标签别名</td><td align="left"></td></tr></tbody></table><h4 id="3-6-日期-时间格式"><a href="#3-6-日期-时间格式" class="headerlink" title="3.6 日期 / 时间格式"></a>3.6 日期 / 时间格式</h4><hr><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>date_format</code></td><td align="left">日期格式</td><td align="left"><code>YYYY-MM-DD</code></td></tr><tr><td align="left"><code>time_format</code></td><td align="left">时间格式</td><td align="left"><code>HH:mm:ss</code></td></tr><tr><td align="left"><code>updated_option</code></td><td align="left">当 Front Matter 中没有指定 <a href="https://hexo.io/zh-cn/docs/variables#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F"><code>updated</code></a> 时 <code>updated</code> 的取值</td><td align="left"><code>mtime</code></td></tr></tbody></table><blockquote><p>updated_option</p><p><code>updated_option</code> 控制了当 Front Matter 中没有指定 <code>updated</code> 时，<code>updated</code> 如何取值：</p><ul><li><code>mtime</code>: 使用文件的最后修改时间。这是从 Hexo 3.0.0 开始的默认行为。</li><li><code>date</code>: 使用 <code>date</code> 作为 <code>updated</code> 的值。可被用于 Git 工作流之中，因为使用 Git 管理站点时，文件的最后修改日期常常会发生改变</li><li><code>empty</code>: 直接删除 <code>updated</code>。使用这一选项可能会导致大部分主题和插件无法正常工作。</li></ul><p><code>use_date_for_updated</code> 选项已经被废弃，将会在下个重大版本发布时去除。请改为使用 <code>updated_option: &#39;date&#39;</code>。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use_date_for_updated&#96; | 启用以后，如果 Front Matter 中没有指定 &#96;updated&#96;， [&#96;post.updated&#96;](https:&#x2F;&#x2F;hexo.io&#x2F;zh-cn&#x2F;docs&#x2F;configuration) 将会使用 &#96;date&#96; 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用 | &#96;true</span><br></pre></td></tr></table></figure><h4 id="3-7-分页"><a href="#3-7-分页" class="headerlink" title="3.7 分页"></a>3.7 分页</h4><hr><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>per_page</code></td><td align="left">每页显示的文章量 (0 = 关闭分页功能)</td><td align="left"><code>10</code></td></tr><tr><td align="left"><code>pagination_dir</code></td><td align="left">分页目录</td><td align="left"><code>page</code></td></tr></tbody></table><h4 id="3-8-扩展"><a href="#3-8-扩展" class="headerlink" title="3.8 扩展"></a>3.8 扩展</h4><hr><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>theme</code></td><td align="left">当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td align="left"><code>theme_config</code></td><td align="left">主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td></tr><tr><td align="left"><code>deploy</code></td><td align="left">部署部分的设置</td></tr><tr><td align="left"><code>meta_generator</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td></tr></tbody></table><h4 id="3-9-包括或不包括目录和文件"><a href="#3-9-包括或不包括目录和文件" class="headerlink" title="3.9 包括或不包括目录和文件"></a>3.9 包括或不包括目录和文件</h4><hr><p>在 Hexo 配置文件中，通过设置 include/exclude 可以让 Hexo 进行处理或忽略某些目录和文件夹。你可以使用 <a href="https://github.com/isaacs/minimatch">glob 表达式</a> 对目录和文件进行匹配。</p><p><code>include</code> and <code>exclude</code> options only apply to the <code>source/</code> folder, whereas <code>ignore</code> option applies to all folders.</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>include</code></td><td align="left">Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 <code>.</code> 开头的文件和文件夹，Hexo 的 <code>_posts</code> 和 <code>_data</code> 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 <code>source</code> 目录下。</td></tr><tr><td align="left"><code>exclude</code></td><td align="left">Hexo 会忽略这些文件和目录</td></tr><tr><td align="left"><code>ignore</code></td><td align="left">Ignore files/folders</td></tr></tbody></table><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># Include&#x2F;Exclude Files&#x2F;Folders</span><br><span class="line">include:</span><br><span class="line">  - &quot;.nojekyll&quot;</span><br><span class="line">  # 包括 &#39;source&#x2F;css&#x2F;_typing.css&#39;</span><br><span class="line">  - &quot;css&#x2F;_typing.css&quot;</span><br><span class="line">  # 包括 &#39;source&#x2F;_css&#x2F;&#39; 中的任何文件，但不包括子目录及其其中的文件。</span><br><span class="line">  - &quot;_css&#x2F;*&quot;</span><br><span class="line">  # 包含 &#39;source&#x2F;_css&#x2F;&#39; 中的任何文件和子目录下的任何文件</span><br><span class="line">  - &quot;_css&#x2F;**&#x2F;*&quot;</span><br><span class="line"></span><br><span class="line">exclude:</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;test.js&#39;</span><br><span class="line">  - &quot;js&#x2F;test.js&quot;</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;&#39; 中的文件、但包括子目录下的所有目录和文件</span><br><span class="line">  - &quot;js&#x2F;*&quot;</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;&#39; 中的文件和子目录下的任何文件</span><br><span class="line">  - &quot;js&#x2F;**&#x2F;*&quot;</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;&#39; 目录下的所有文件名以 &#39;test&#39; 开头的文件，但包括其它文件和子目录下的单文件</span><br><span class="line">  - &quot;js&#x2F;test*&quot;</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;&#39; 及其子目录中任何以 &#39;test&#39; 开头的文件</span><br><span class="line">  - &quot;js&#x2F;**&#x2F;test*&quot;</span><br><span class="line">  # 不要用 exclude 来忽略 &#39;source&#x2F;_posts&#x2F;&#39; 中的文件。你应该使用 &#39;skip_render&#39;，或者在要忽略的文件的文件名之前加一个下划线 &#39;_&#39;</span><br><span class="line">  # 在这里配置一个 - &quot;_posts&#x2F;hello-world.md&quot; 是没有用的。</span><br><span class="line"></span><br><span class="line">ignore:</span><br><span class="line">  # Ignore any folder named &#39;foo&#39;.</span><br><span class="line">  - &quot;**&#x2F;foo&quot;</span><br><span class="line">  # Ignore &#39;foo&#39; folder in &#39;themes&#x2F;&#39; only.</span><br><span class="line">  - &quot;**&#x2F;themes&#x2F;*&#x2F;foo&quot;</span><br><span class="line">  # Same as above, but applies to every subfolders of &#39;themes&#x2F;&#39;.</span><br><span class="line">  - &quot;**&#x2F;themes&#x2F;**&#x2F;foo&quot;</span><br></pre></td></tr></table></figure><p>列表中的每一项都必须用单引号或双引号包裹起来。</p><p><code>include</code> 和 <code>exclude</code> 并不适用于 <code>themes/</code> 目录下的文件。如果需要忽略 <code>themes/</code> 目录下的部分文件或文件夹，可以使用 <code>ignore</code> 或在文件名之前添加下划线 <code>_</code>。</p><h4 id="3-10-使用代替配置文件"><a href="#3-10-使用代替配置文件" class="headerlink" title="3.10 使用代替配置文件"></a>3.10 使用代替配置文件</h4><hr><p>可以在 hexo-cli 中使用 <code>--config</code> 参数来指定自定义配置文件的路径。你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># use &#39;custom.yml&#39; in place of &#39;_config.yml&#39;</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># use &#39;custom.yml&#39; &amp; &#39;custom2.json&#39;, prioritizing &#39;custom3.yml&#39;, then &#39;custom2.json&#39;</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p><p>例如，使用 <code>--options</code> 指定了两个自定义配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --config custom.yml,custom2.json</span><br></pre></td></tr></table></figure><p>如果 <code>custom.yml</code> 中指定了 <code>foo: bar</code>，在 custom2.json 中指定了 <code>&quot;foo&quot;: &quot;dinosaur&quot;</code>，那么在 <code>_multiconfig.yml</code> 中你会得到 <code>foo: dinosaur</code>。</p><h4 id="3-11-使用代替主题配置文件"><a href="#3-11-使用代替主题配置文件" class="headerlink" title="3.11 使用代替主题配置文件"></a>3.11 使用代替主题配置文件</h4><hr><p>通常情况下，Hexo 主题是一个独立的项目，并拥有一个独立的 <code>_config.yml</code> 配置文件。</p><p>除了自行维护独立的主题配置文件，你也可以在其它地方对主题进行配置。</p><p><strong>配置文件中的 <code>theme_config</code></strong></p><blockquote><p>该特性自 Hexo 2.8.2 起提供</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line">theme_config:</span><br><span class="line">  bio: &quot;My awesome bio&quot;</span><br><span class="line">  foo:</span><br><span class="line">    bar: &#39;a&#39;</span><br><span class="line"># themes&#x2F;my-theme&#x2F;_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#39;b&#39;</span><br></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>独立的 <code>_config.[theme].yml</code> 文件</strong></p><blockquote><p>该特性自 Hexo 5.0.0 起提供</p></blockquote><p>独立的主题配置文件应放置于站点根目录下，支持 <code>yml</code> 或 <code>json</code> 格式。需要配置站点 <code>_config.yml</code> 文件中的 <code>theme</code> 以供 Hexo 寻找 <code>_config.[theme].yml</code> 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line"># _config.my-theme.yml</span><br><span class="line">bio: &quot;My awesome bio&quot;</span><br><span class="line">foo:</span><br><span class="line">  bar: &#39;a&#39;</span><br><span class="line"># themes&#x2F;my-theme&#x2F;_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#39;b&#39;</span><br></pre></td></tr></table></figure><p>最终主题配置的输出是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>建议将所有的主题配置集中在一处。如果不得不在多处配置你的主题，注意以下信息：Hexo 在合并主题配置时，Hexo 配置文件中的 <code>theme_config</code> 的优先级最高，其次是 <code>_config.[theme].yml</code> 文件，最后是位于主题目录下的 <code>_config.yml</code> 文件。</p></blockquote><h3 id="4-指令"><a href="#4-指令" class="headerlink" title="4 指令"></a>4 指令</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。 如果没有设置 ，Hexo 默认在目前的文件夹建立网站。<code>folder</code></p><p>此命令是运行以下步骤的快捷方式：</p><ol><li>Git 克隆<a href="https://github.com/hexojs/hexo-starter">hexo 启动器</a>，包括<a href="https://github.com/hexojs/hexo-theme-landscape">hexo 主题</a>到当前目录或目标文件夹（如果指定）。</li><li>使用包管理器安装依赖项：<a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、pnpm 或<a href="https://docs.npmjs.com/cli/install">npm，</a>以安装者为准： 如果安装了多个，则优先级将列出。默认情况下npm与Node.js捆绑。</li></ol><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><h4 id="4-1-新增功能"><a href="#4-1-新增功能" class="headerlink" title="4.1 新增功能"></a>4.1 新增功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。 如果没有设置 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 参数代替。 如果标题包含空格的话，请使用引号括起来。<code>layout``default_layout</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>,<code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>,<code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>,<code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。 对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 文件。 你可以使用 参数来覆盖上述行为、自行决定文件的目录：<code>index.md``--path</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 文件，同时 Front Matter 中的 title 为 <code>source/about/me.md``&quot;About me&quot;</code></p><p>注意！ title 是必须指定的！ 如果你这么做并不能达到你的目的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 ，同时 的 Front Matter 中的 title 为 。 这是因为在上述命令中，hexo-cli 将 视为指定文章的标题、并采用默认的 。<code>source/_posts/about/me.md``me.md``&quot;page&quot;``page``layout</code></p><h4 id="4-2-生成"><a href="#4-2-生成" class="headerlink" title="4.2 生成"></a>4.2 生成</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>,<code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>,<code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>,<code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>,<code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 目录存在，那么 只会重新生成改动的文件。 使用该参数的效果接近 <code>public``hexo g``hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>,<code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h4 id="4-3-发布"><a href="#4-3-发布" class="headerlink" title="4.3 发布"></a>4.3 发布</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h4 id="4-4-服务器"><a href="#4-4-服务器" class="headerlink" title="4.4 服务器"></a>4.4 服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。 默认情况下，访问网址为： 。<code>http://localhost:4000/</code></p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>,<code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>,<code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>,<code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h4 id="4-5-部署"><a href="#4-5-部署" class="headerlink" title="4.5 部署"></a>4.5 部署</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-g</code>,<code>--generate</code></td><td align="left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h4 id="4-6-呈现"><a href="#4-6-呈现" class="headerlink" title="4.6 呈现"></a>4.6 呈现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><p>渲染文件。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-o</code>,<code>--output</code></td><td align="left">设置输出路径</td></tr></tbody></table><h4 id="4-7-迁移"><a href="#4-7-迁移" class="headerlink" title="4.7 迁移"></a>4.7 迁移</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p><h4 id="4-8-清理"><a href="#4-8-清理" class="headerlink" title="4.8 清理"></a>4.8 清理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 () 和已生成的静态文件 ()。<code>db.json``public</code></p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><h4 id="4-9-选项"><a href="#4-9-选项" class="headerlink" title="4.9 选项"></a>4.9 选项</h4><h5 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><h5 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure><p>在终端中显示调试信息并记录到 。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。<code>debug.log</code></p><h5 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure><p>隐藏终端信息。</p><h5 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>自定义配置文件的路径，指定这个参数后将不再使用默认的 。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。 例如：<code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure><p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 。 如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。 这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。<code>_multiconfig.yml</code></p><h5 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure><p>显示 文件夹中的草稿文章。<code>source/_drafts</code></p><h5 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure><p>自定义当前工作目录（Current working directory）的路径。</p><h3 id="5-迁移"><a href="#5-迁移" class="headerlink" title="5 迁移"></a>5 迁移</h3><h4 id="5-1-RSS"><a href="#5-1-RSS" class="headerlink" title="5.1 RSS"></a>5.1 RSS</h4><p>首先，安装 <code>hexo-migrator-rss</code> 插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-rss --save</span><br></pre></td></tr></table></figure><p>插件安装完成后，执行下列命令，从 RSS 迁移所有文章。<code>source</code> 可以是文件路径或网址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate rss &lt;source&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-Jekyll"><a href="#5-2-Jekyll" class="headerlink" title="5.2 Jekyll"></a>5.2 Jekyll</h4><p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在 <code>_config.yml</code> 中修改 <code>new_post_name</code> 参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h4 id="5-3-Octopress"><a href="#5-3-Octopress" class="headerlink" title="5.3 Octopress"></a>5.3 Octopress</h4><p>把 Octopress <code>source/_posts</code> 文件夹内的所有文件转移到 Hexo 的 <code>source/_posts</code> 文件夹，并修改 <code>_config.yml</code> 中的 <code>new_post_name</code> 参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure><h4 id="5-4-WordPress"><a href="#5-4-WordPress" class="headerlink" title="5.4 WordPress"></a>5.4 WordPress</h4><p>首先，安装 <code>hexo-migrator-wordpress</code> 插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure><p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="http://en.support.wordpress.com/export/">WP支持页面</a>）。</p><p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 WordPress 导出的文件路径或网址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate wordpress &lt;source&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意</p><p>这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter中的分类与标签</a>）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。</p></blockquote><h4 id="5-5-Joomla"><a href="#5-5-Joomla" class="headerlink" title="5.5 Joomla"></a>5.5 Joomla</h4><p>首先，安装 <code>hexo-migrator-joomla</code> 插件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-joomla --save</span><br></pre></td></tr></table></figure><p>使用 <a href="http://extensions.joomla.org/extensions/migration-a-conversion/data-import-a-export/12816?qh=YToxOntpOjA7czo1OiJqMnhtbCI7fQ==">J2XML</a> 组件导出 Joomla 文章。<br>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 Joomla 导出的文件路径或网址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate joomla &lt;source&gt;</span><br></pre></td></tr></table></figure><h3 id="6-写作"><a href="#6-写作" class="headerlink" title="6 写作"></a>6 写作</h3><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p><h4 id="6-1-布局（Layout）"><a href="#6-1-布局（Layout）" class="headerlink" title="6.1 布局（Layout）"></a>6.1 布局（Layout）</h4><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th align="left">布局</th><th align="left">路径</th></tr></thead><tbody><tr><td align="left"><code>post</code></td><td align="left"><code>source/_posts</code></td></tr><tr><td align="left"><code>page</code></td><td align="left"><code>source</code></td></tr><tr><td align="left"><code>draft</code></td><td align="left"><code>source/_drafts</code></td></tr></tbody></table><blockquote><p>Disabling layout</p><p>If you don’t want an article (post/page) to be processed with a theme, set <code>layout: false</code> in its front-matter. Refer to <a href="https://hexo.io/zh-cn/docs/front-matter#%E5%B8%83%E5%B1%80">this section</a> for more details.</p></blockquote><h4 id="6-2-文件名称"><a href="#6-2-文件名称" class="headerlink" title="6.2 文件名称"></a>6.2 文件名称</h4><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:title</code></td><td align="left">标题（小写，空格将会被替换为短杠）</td></tr><tr><td align="left"><code>:year</code></td><td align="left">建立的年份，比如， <code>2015</code></td></tr><tr><td align="left"><code>:month</code></td><td align="left">建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td align="left"><code>:i_month</code></td><td align="left">建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td align="left"><code>:day</code></td><td align="left">建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td align="left"><code>:i_day</code></td><td align="left">建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h4 id="6-3-草稿"><a href="#6-3-草稿" class="headerlink" title="6.3 草稿"></a>6.3 草稿</h4><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h4 id="6-4-模版（Scaffold）"><a href="#6-4-模版（Scaffold）" class="headerlink" title="6.4 模版（Scaffold）"></a>6.4 模版（Scaffold）</h4><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td></tr><tr><td align="left"><code>date</code></td><td align="left">文件建立日期</td></tr></tbody></table><h4 id="6-5-支持的格式"><a href="#6-5-支持的格式" class="headerlink" title="6.5 支持的格式"></a>6.5 支持的格式</h4><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p><p>例如，Hexo 默认安装了 <code>hexo-renderer-marked</code> 和 <code>hexo-renderer-ejs</code>，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 <code>hexo-renderer-pug</code>，你甚至可以用 Pug 模板语言书写文章。</p><p>只需要将文章的扩展名从 <code>md</code> 改成 <code>ejs</code>，Hexo 就会使用 <code>hexo-renderer-ejs</code> 渲染这个文件，其他格式同理。</p><h3 id="7-Front-matter"><a href="#7-Front-matter" class="headerlink" title="7 Front-matter"></a>7 Front-matter</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013&#x2F;7&#x2F;13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>layout</code></td><td align="left">布局</td><td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td></tr><tr><td align="left"><code>title</code></td><td align="left">标题</td><td align="left">文章的文件名</td></tr><tr><td align="left"><code>date</code></td><td align="left">建立日期</td><td align="left">文件建立日期</td></tr><tr><td align="left"><code>updated</code></td><td align="left">更新日期</td><td align="left">文件更新日期</td></tr><tr><td align="left"><code>comments</code></td><td align="left">开启文章的评论功能</td><td align="left">true</td></tr><tr><td align="left"><code>tags</code></td><td align="left">标签（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>categories</code></td><td align="left">分类（不适用于分页）</td><td align="left"></td></tr><tr><td align="left"><code>permalink</code></td><td align="left">覆盖文章网址</td><td align="left"></td></tr><tr><td align="left"><code>excerpt</code></td><td align="left">Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td><td align="left"></td></tr><tr><td align="left"><code>disableNunjucks</code></td><td align="left">Disable rendering of Nunjucks tag <code>&#123;&#123; &#125;&#125;</code>/<code>&#123;% %&#125;</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td><td align="left"></td></tr></tbody></table><h4 id="7-1-布局"><a href="#7-1-布局" class="headerlink" title="7.1 布局"></a>7.1 布局</h4><p>‎默认布局是 <code>post</code>, 根据设置在<code>_config.yml</code>里的 <a href="https://hexo.io/zh-cn/docs/(/docs/configuration#Writing)"><code>default_layout</code></a> 的值。当文章中的布局被禁用时 (<code>layout: false</code>),它将不会以主题进行处理。但是，它仍将由任何可用的渲染器呈现：如果一篇文章写在标记和标记渲染器（如默认‎<a href="https://github.com/hexojs/hexo-renderer-marked">‎的 hexo 渲染器标记‎</a>‎）中，它将呈现给 HTML。‎<code>post``_config.yml``layout: false</code></p><p>‎无论布局如何，‎<a href="https://hexo.io/docs/tag-plugins">‎标记插件‎</a>‎始终被处理，除非设置或‎<a href="https://hexo.io/api/renderer#Disable-Nunjucks-tags">‎渲染器‎</a>‎禁用。‎<code>disableNunjucks</code></p><h4 id="7-2-分类和标签"><a href="#7-2-分类和标签" class="headerlink" title="7.2 分类和标签"></a>7.2 分类和标签</h4><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><blockquote><p>分类方法的分歧</p><p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Diary</span><br><span class="line">  - Life</span><br></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p></blockquote><h4 id="7-3-JSON-Front-matter"><a href="#7-3-JSON-Front-matter" class="headerlink" title="7.3 JSON Front-matter"></a>7.3 JSON Front-matter</h4><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;title&quot;: &quot;Hello World&quot;,</span><br><span class="line">&quot;date&quot;: &quot;2013&#x2F;7&#x2F;13 20:46:25&quot;</span><br><span class="line">;;;</span><br></pre></td></tr></table></figure><h3 id="8-标签插件（Tag-Plugins）"><a href="#8-标签插件（Tag-Plugins）" class="headerlink" title="8 标签插件（Tag Plugins）"></a>8 标签插件（Tag Plugins）</h3><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p><p>虽然你可以使用任何格式书写你的文章，但是标签插件永远可用，且语法也都是一致的。</p><p><em>‎标记插件不应包裹在标记语法中，‎</em>, e.g. <code>[](&#123;% post_path lorem-ipsum %&#125;)</code> 是不被支持的</p><h4 id="8-1-引用块"><a href="#8-1-引用块" class="headerlink" title="8.1 引用块"></a>8.1 引用块</h4><p>在文章中插入引言，可包含作者、来源和标题。</p><p><strong>别号：</strong> quote</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h4 id="8-2-样例"><a href="#8-2-样例" class="headerlink" title="8.2 样例"></a>8.2 样例</h4><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p><strong>引用书上的句子</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><p><strong>David Levithan</strong>Wide Awake</p></blockquote><p><strong>引用 Twitter</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https:&#x2F;&#x2F;twitter.com&#x2F;devdocs&#x2F;status&#x2F;356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http:&#x2F;&#x2F;devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p><p><strong>@DevDocs</strong><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></p></blockquote><p><strong>引用网络上的文章</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;seths_blog&#x2F;2009&#x2F;07&#x2F;welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><p><strong>Seth Godin</strong><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></p></blockquote><h4 id="8-3-代码块"><a href="#8-3-代码块" class="headerlink" title="8.3 代码块"></a>8.3 代码块</h4><p>在文章中插入代码。</p><p><strong>别名：</strong> code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>Specify additional options in <code>option:value</code> format, e.g. <code>line_number:false first_line:5</code>.</p><table><thead><tr><th align="left">Extra Options</th><th align="left">Description</th><th align="left">Default</th></tr></thead><tbody><tr><td align="left"><code>line_number</code></td><td align="left">Show line number</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>highlight</code></td><td align="left">Enable code highlighting</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>first_line</code></td><td align="left">Specify the first line number</td><td align="left"><code>1</code></td></tr><tr><td align="left"><code>mark</code></td><td align="left">Line highlight specific line(s), each value separated by a comma. Specify number range using a dash Example: <code>mark:1,4-7,10</code> will mark line 1, 4 to 7 and 10.</td><td align="left"></td></tr><tr><td align="left"><code>wrap</code></td><td align="left">Wrap the code block in <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">``</a></td><td align="left"><code>true</code></td></tr></tbody></table><h4 id="8-5-样例"><a href="#8-5-样例" class="headerlink" title="8.5 样例"></a>8.5 样例</h4><p><strong>普通的代码块</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#39;Hello World!&#39;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">alert(&#39;Hello World!&#39;);</span><br></pre></td></tr></table></figure><p><strong>指定语言</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br></pre></td></tr></table></figure><p><strong>附加说明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">Array.maparray.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><p><strong>附加说明和网址</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http:&#x2F;&#x2F;underscorejs.org&#x2F;#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">_.compactUnderscore.js_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><h4 id="8-6-反引号代码块"><a href="#8-6-反引号代码块" class="headerlink" title="8.6 反引号代码块"></a>8.6 反引号代码块</h4><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p><p>``` [language] [title] [url] [link text] code snippet ```</p><h4 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h4><p>在文章中插入 Pull quote。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><h4 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h4><p>在文章中嵌入 jsFiddle。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h4 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h4><p>在文章中嵌入 Gist。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><p>在文章中插入 iframe。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p>在文章中插入指定大小的图片。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] &#x2F;path&#x2F;to&#x2F;image [width] [height] &#39;&quot;title text&quot; &quot;alt text&quot;&#39; %&#125;</span><br></pre></td></tr></table></figure><h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><h4 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h4><p>插入 <code>source/downloads/code</code> 文件夹内的代码文件。<code>source/downloads/code</code> 不是固定的，取决于你在配置文件中 <code>code_dir</code> 的配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path&#x2F;to&#x2F;file %&#125;</span><br></pre></td></tr></table></figure><h4 id="8-7-样例"><a href="#8-7-样例" class="headerlink" title="8.7 样例"></a>8.7 样例</h4><p><strong>嵌入 test.js 文件全文</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>只嵌入第 3 行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:3 to:3 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第 5 行至第 8 行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第 5 行至文件结束</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 test.js %&#125;</span><br></pre></td></tr></table></figure><p><strong>嵌入第 1 行至第 8 行</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><h4 id="8-8-引用文章"><a href="#8-8-引用文章" class="headerlink" title="8.8 引用文章"></a>8.8 引用文章</h4><p>引用其他文章的链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。</p><p>例如，在文章中使用 <code>&#123;% post_link how-to-bake-a-cake %&#125;</code> 时，只需有一个名为 <code>how-to-bake-a-cake.md</code> 的文章文件即可。即使这个文件位于站点文件夹的 <code>source/posts/2015-02-my-family-holiday</code> 目录下、或者文章的永久链接是 <code>2018/en/how-to-bake-a-cake</code>，都没有影响。</p><p>默认链接文字是文章的标题，你也可以自定义要显示的文本。</p><p>默认对文章的标题和自定义标题里的特殊字符进行转义。可以使用<code>escape</code>选项，禁止对特殊字符进行转义。</p><p><strong>链接使用文章的标题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-3-8-released %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/news/2018/10/19/hexo-3-8-released/">Hexo 3.8.0 Released</a></p><p><strong>链接使用自定义文字</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-3-8-released &#39;通往文章的链接&#39; %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/news/2018/10/19/hexo-3-8-released/">通往文章的链接</a></p><p><strong>对标题的特殊字符进行转义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-4-released &#39;How to use &lt;b&gt; tag in title&#39; %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/news/2019/10/14/hexo-4-released/">How to use  tag in title</a></p><p><strong>禁止对标题的特殊字符进行转义</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link hexo-4-released &#39;&lt;b&gt;bold&lt;&#x2F;b&gt; custom title&#39; false %&#125;</span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/news/2019/10/14/hexo-4-released/"><strong>bold</strong> custom title</a></p><h4 id="8-9-引用资源"><a href="#8-9-引用资源" class="headerlink" title="8.9 引用资源"></a>8.9 引用资源</h4><p>引用文章的资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path filename %&#125;</span><br><span class="line">&#123;% asset_img [class names] slug [width] [height] [title text [alt text]] %&#125;</span><br><span class="line">&#123;% asset_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><h3 id="Embed-image"><a href="#Embed-image" class="headerlink" title="Embed image"></a>Embed image</h3><p><em>‎hexo-渲染器标记的 3.1.0+ 可以（可选地）自动解析帖子的图像路径，请参阅‎<a href="https://hexo.io/docs/asset-folders#Embedding-an-image-using-markdown">‎此部分‎</a>‎，了解如何启用该图像。‎</em></p><p>“foo.jpg” is located at <code>http://example.com/2020/01/02/hello/foo.jpg</code>.</p><p><strong>Default (no option)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img foo.jpg %&#125;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;2020&#x2F;01&#x2F;02&#x2F;hello&#x2F;foo.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>Custom class</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img post-image foo.jpg %&#125;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;2020&#x2F;01&#x2F;02&#x2F;hello&#x2F;foo.jpg&quot; class&#x3D;&quot;post-image&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>Display size</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img foo.jpg 500 400 %&#125;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;2020&#x2F;01&#x2F;02&#x2F;hello&#x2F;foo.jpg&quot; width&#x3D;&quot;500&quot; height&#x3D;&quot;400&quot;&gt;</span><br></pre></td></tr></table></figure><p><strong>Title &amp; Alt</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img logo.svg &quot;lorem ipsum&#39;dolor&#39;&quot; %&#125;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;2020&#x2F;01&#x2F;02&#x2F;hello&#x2F;foo.jpg&quot; title&#x3D;&quot;lorem ipsum&quot; alt&#x3D;&quot;dolor&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h4><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h4 id="8-10-文章摘要和截断"><a href="#8-10-文章摘要和截断" class="headerlink" title="8.10 文章摘要和截断"></a>8.10 文章摘要和截断</h4><p>在文章中使用 <code>&lt;!-- more --&gt;</code>，那么 <code>&lt;!-- more --&gt;</code> 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure><p>首页中将只会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br></pre></td></tr></table></figure><p>正文中则会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line"></span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure><p>注意，摘要可能会被 Front Matter 中的 <code>excerpt</code> 覆盖。</p><h3 id="9-资源文件夹"><a href="#9-资源文件夹" class="headerlink" title="9 资源文件夹"></a>9 资源文件夹</h3><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p><h4 id="9-1-文章资源文件夹"><a href="#9-1-文章资源文件夹" class="headerlink" title="9.1 文章资源文件夹"></a>9.1 文章资源文件夹</h4><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_config.ymlpost_asset_folder: true</span><br></pre></td></tr></table></figure><p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p><h4 id="9-2-相对路径引用的标签插件"><a href="#9-2-相对路径引用的标签插件" class="headerlink" title="9.2 相对路径引用的标签插件"></a>9.2 相对路径引用的标签插件</h4><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的<a href="https://hexo.io/docs/tag-plugins#Include-Assets">标签插件</a>被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><h4 id="9-3-‎使用‎-markdown嵌入图像"><a href="#9-3-‎使用‎-markdown嵌入图像" class="headerlink" title="9.3 ‎使用‎ markdown嵌入图像"></a>9.3 ‎使用‎ markdown嵌入图像</h4><p><a href="https://github.com/hexojs/hexo-renderer-marked">‎hexo-渲染器标记的‎</a>‎3.1.0引入了一个新的选项，允许您在不使用标签插件的情况下在标记中嵌入图像。‎</p><p>To enable:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_config.ymlpost_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure><p>‎一旦启用，资产图像将自动解决到其相应的帖子路径。例如，”图像.jpg”位于”/2020/01/02/foo/图像.jpg”，这意味着它是”/2020/01/02/foo/“帖子的资产图像，将呈现为。‎ <code>![](image.jpg)</code> will be rendered as <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code>.</p><h3 id="10-数据文件"><a href="#10-数据文件" class="headerlink" title="10 数据文件"></a>10 数据文件</h3><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 <code>source/_data</code> 内的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。</p><p>举例来说，在 <code>source/_data</code> 文件夹中新建 <code>menu.yml</code> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Home: &#x2F;</span><br><span class="line">Gallery: &#x2F;gallery&#x2F;</span><br><span class="line">Archives: &#x2F;archives&#x2F;</span><br></pre></td></tr></table></figure><p>您就能在模板中使用这些资料：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% for (var link in site.data.menu) &#123; %&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;&lt;%&#x3D; site.data.menu[link] %&gt;&quot;&gt; &lt;%&#x3D; link %&gt; &lt;&#x2F;a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>渲染结果如下 :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#x2F;&quot;&gt; Home &lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;gallery&#x2F;&quot;&gt; Gallery &lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;archives&#x2F;&quot;&gt; Archives &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h3 id="11-服务器"><a href="#11-服务器" class="headerlink" title="11 服务器"></a>11 服务器</h3><h4 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo-server"></a><a href="https://github.com/hexojs/hexo-server">hexo-server</a></h4><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server">hexo-server</a> 才能使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure><h4 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h4><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -s</span><br></pre></td></tr></table></figure><h4 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h4><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure><p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p><h4 id="Pow"><a href="#Pow" class="headerlink" title="Pow"></a>Pow</h4><p><a href="http://pow.cx/">Pow</a> 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl get.pow.cx | sh</span><br></pre></td></tr></table></figure><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>在 <code>~/.pow</code> 文件夹建立链接（symlink）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~&#x2F;.pow</span><br><span class="line">$ ln -s &#x2F;path&#x2F;to&#x2F;myapp</span><br></pre></td></tr></table></figure><p>您的网站将会在 <code>http://myapp.dev</code> 下运行，网址根据链接名称而定。</p><h3 id="11-生成文件"><a href="#11-生成文件" class="headerlink" title="11 生成文件"></a>11 生成文件</h3><p>使用 Hexo 生成静态文件快速而且简单。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><h4 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h4><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --watch</span><br></pre></td></tr></table></figure><h4 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h4><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure><blockquote><p>简写</p><p>上面两个命令可以简写为<br>$ hexo g -d<br>$ hexo d -g</p></blockquote><h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><p>访问Hexo官网，下载喜欢的主题，此处下载主题为NexT，Next主题有非常多的自定义选项，网络上的美化教程也十分丰富，建议下载。</p><h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h4><p>如果您使用的是 Hexo 5.0 或更晚，安装最简单的方法是通过 npm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure><p>或者您可以克隆整个存储库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>如果您需要任何其他变体，请参阅<a href="https://theme-next.js.org/docs/getting-started/installation.html">详细的安装说明</a>。</p><p>安装后，打开 Hexo 配置文件并设置变量。<code>theme``next</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h4><p>目前，NexT 鼓励用户使用<a href="https://theme-next.js.org/docs/getting-started/configuration.html">备用主题配置</a>来配置 NexT。使用<a href="https://theme-next.js.org/docs/advanced-settings/custom-files.html">自定义文件</a>可以轻松地自定义 NexT 的布局或样式。</p><p>不建议直接修改 NexT 主题中的任何文件。因为这可能导致错误（例如合并冲突），修改后的文件在升级主题时可能会被丢弃。</p><p>但是，您可以绕过合并冲突（错误消息（如**”提交更改或在合并之前将其存放”），**使用本地更改的命令。请参阅<a href="https://stackoverflow.com/a/15745424/5861495">此处</a>如何做到这一点。<code>Commit``Stash``Reset</code></p><h4 id="3-插件"><a href="#3-插件" class="headerlink" title="3 插件"></a>3 插件</h4><p>插件扩展和扩展了 NexT 的功能。插件有两种类型：核心插件和第三方插件。核心插件由 NexT 的基本功能要求。第三方插件提供大量可选功能。</p><p>配置这些插件非常容易。例如，如果您想在您的网站上启用，只需设置为在NexT配置文件中：<code>pjax``pjax``true</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># For more information: https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure><h4 id="4-配置-CDN"><a href="#4-配置-CDN" class="headerlink" title="4 配置 CDN"></a>4 配置 CDN</h4><p>默认情况下，第三方插件将从<a href="https://www.jsdelivr.com/">jsDelivr</a> CDN 加载。我们还提供其他可选的清洁发展机制，包括著名的<a href="https://unpkg.com/">联合国驻科特派团</a>和<a href="https://cdnjs.com/">CDNJS。</a></p><p>例如，如果您想使用而不是作为默认的 CDN 提供商，则需要编辑 NexT 配置文件中的以下设置：<code>unpkg``jsdelivr</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  # ...</span><br><span class="line">  # Some contents...</span><br><span class="line">  # ...</span><br><span class="line">  plugins: unpkg</span><br></pre></td></tr></table></figure><h4 id="5-更新"><a href="#5-更新" class="headerlink" title="5 更新"></a>5 更新</h4><p>NexT 的新版本将每月发布一次。请在更新主题之前阅读<a href="https://github.com/next-theme/hexo-theme-next/releases">发布说明</a>。您可以通过以下命令更新NexT。</p><p>安装最新版本的npm：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure><p>或更新到最新的主分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd themes&#x2F;next</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure><p><strong>如果您想从v5.x/v7.x更新到最新版本，请阅读<a href="https://theme-next.js.org/docs/getting-started/upgrade.html">本文</a>。</strong></p><p>创建 Hexo 主题非常容易，您只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── languages</span><br><span class="line">├── layout</span><br><span class="line">├── scripts</span><br><span class="line">└── source</span><br></pre></td></tr></table></figure><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>在本教程中，我们将会使用 <a href="https://travis-ci.com/">Travis CI</a> 将 Hexo 博客部署到 GitHub Pages 上。Travis CI 对于开源 repository 是免费的，但是这意味着你的站点文件将会是公开的。如果你希望你的站点文件不被公开，请直接前往本文 [私有 Repository](#私有 Repository) 部分。</p><ol><li>新建一个 repository。如果你希望你的站点能通过 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 域名访问，你的 repository 应该直接命名为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>。</li><li>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下不应该 <code>public</code> 目录将不会被推送到 repository 中，你应该检查 <code>.gitignore</code> 文件中是否包含 <code>public</code> 一行，如果没有请加上。</li><li>将 <a href="https://github.com/marketplace/travis-ci">Travis CI</a> 添加到你的 GitHub 账户中。</li><li>前往 GitHub 的 <a href="https://github.com/settings/installations">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li><li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/">手动前往</a>。</li><li>在浏览器新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li><li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</li><li>在你的 Hexo 站点文件夹中新建一个 <code>.travis.yml</code> 文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master # build master branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br><span class="line">  local-dir: public</span><br></pre></td></tr></table></figure><ol><li>将 <code>.travis.yml</code> 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>gh-pages</code> 分支下</li><li>在 GitHub 中前往你的 repository 的设置页面，修改 <code>GitHub Pages</code> 的部署分支为 <code>gh-pages</code>。</li><li>前往 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code> 查看你的站点是否可以访问。这可能需要一些时间。</li></ol><h4 id="Project-page"><a href="#Project-page" class="headerlink" title="Project page"></a>Project page</h4><p>如果你更希望你的站点部署在 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code> 访问。你需要检查你的 Hexo 配置文件，将 <code>url</code> 修改为 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code>、将 <code>root</code> 的值修改为 <code>/&lt;repository 的名字&gt;/</code></p><h4 id="私有-Repository"><a href="#私有-Repository" class="headerlink" title="私有 Repository"></a>私有 Repository</h4><p>下面的指示基于 <a href="https://hexo.io/docs/one-command-deployment">一键部署</a> 编写。</p><ol><li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>.</p></li><li><p>在 <strong>_config.yml</strong>（如果有已存在的请删除）添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt;</span><br><span class="line">  # example, https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure></li><li><p>运行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</p></li><li><p>查看 <em>username</em>.github.io 上的网页是否部署成功。</p></li></ol><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://help.github.com/categories/github-pages-basics/">GitHub Pages 使用文档</a></li><li><a href="https://docs.travis-ci.com/user/tutorial/">Travis CI 使用文档</a></li><li><a href="https://github.com/hexojs/awesome-hexo">Awesome Hexo</a></li><li>[在百度上搜索 “Hexo GitHub”](<a href="https://www.baidu.com/s?wd=Hexo">https://www.baidu.com/s?wd=Hexo</a> GitHub)</li></ul>]]></content>
    
    
    <summary type="html">博客搭建及部署</summary>
    
    
    
    <category term="办公技能" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E5%8A%9E%E5%85%AC%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Hexo + Next + Github" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/Hexo-Next-Github/"/>
    
  </entry>
  
  <entry>
    <title>个人分享平台构建(工具篇)——Typora + PicGo + Gitee</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA(%E5%B7%A5%E5%85%B7%E7%AF%87)%E2%80%94%E2%80%94Typora+PicGo+Gitee/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA(%E5%B7%A5%E5%85%B7%E7%AF%87)%E2%80%94%E2%80%94Typora+PicGo+Gitee/</id>
    <published>2021-09-16T17:27:15.055Z</published>
    <updated>2021-03-06T05:23:33.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305161628.png" alt="个人分享平台构建"></p><span id="more"></span><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="https://www.typora.io/">Typora</a></h4><p>​    <strong>Typora</strong>是一个所见即所得的Markdown格式文本编辑器，支持Windows、macOS和GNU/Linux操作系统，包括对GitHub Flavored Markdown扩展格式的支持、拼写检查、自定义CSS样式、数学公式渲染（通过MathJax）等特性，<a href="https://www.typora.io/">点击跳转下载</a>，软件截图如下：</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305140341.png" alt="image-20210305140336396" style="zoom: 50%;" /><h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.4">PicGo</a></h4><p>​    我们在写作、写 Markdown、博客时，经常都要插入图片。然而要贴图 (上传图片) 时还得登录图床网站/服务器去手工上传和复制链接，操作比较繁琐。</p><p>​    <strong>PicGo</strong> 是一款开源跨平台的免费图片上传工具以及图床相册管理软件，它能帮你快速地将图片上传到微博、又拍云、阿里云 OSS、腾讯云 COS、七牛、GitHub、sm.ms、Imgur 等常见的免费图床网站或云存储服务上，并自动复制图片的链接到剪贴板里，使用上非常高效便捷。<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.4">点击跳转下载</a>，软件截图如下：</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305140622.png" alt="image-20210305140621282" style="zoom: 50%;" /><h4 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a><a href="https://gitee.com/">Gitee</a></h4><p>​    <strong>Gitee</strong>是深圳市奥思网络科技有限公司推出的代码托管平台，支持Git和SVN，提供免费的私有仓库托管。目前开发者超过500万，托管项目超过1000万，汇聚几乎所有本土原创开源项目，并于2016年推出企业版，提供企业级代码托管服务。<a href="https://gitee.com/">点击跳转官网</a>进行Gitee账户注册。</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305141040.png" alt="image-20210305141038648" style="zoom: 25%;" /><h3 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h3><p>​    Typora作为一款Markdown编辑器，搭配图床工具PicGo以及托管平台Gitee，能够简洁高效的编写图文并茂的博客。按照链接==<strong>下载好Typora、PicGo并注册Gitee账号后</strong>==，下面进入配置环节。</p><h4 id="1-配置Gitee"><a href="#1-配置Gitee" class="headerlink" title="1.配置Gitee"></a>1.配置Gitee</h4><p>【创建仓库】</p><p>​    点击头像右侧“+”，【新建仓库】——填写【仓库名称】——是否开源选择【公开】（如果不公开，PicGo上传之后的图片无法在Typora中通过网络地址进行显示）——【创建】</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305144104.png" alt="image-20210305144102602" style="zoom: 67%;" /><p>【生成私人令牌】</p><p>​    点击头像，【设置】——【私人令牌】——【生成新令牌】——填写令牌描述【提交】，复制令牌</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305145414.png" alt="image-20210305145412307"></p><h4 id="2-配置PicGo"><a href="#2-配置PicGo" class="headerlink" title="2.配置PicGo"></a>2.配置PicGo</h4><p><a href="https://nodejs.org/zh-cn/">点击下载node.js</a>，为安装插件做准备</p><p>【插件设置】——下载gitee插件</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305145931.png" alt="image-20210305145929348" style="zoom: 50%;" /><p>【PicGo设置】——开启Gitee图床——开启【时间戳重命名】</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305150117.png" alt="image-20210305150114651" style="zoom:50%;" /><p>【图床设置】——Gitee图床设置</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305150333.png" alt="image-20210305150331034" style="zoom:50%;" /><h4 id="3-配置Typora"><a href="#3-配置Typora" class="headerlink" title="3.配置Typora"></a>3.配置Typora</h4><p>【文件】——【偏好设置】——【图像】，PicGo路径为当前电脑安装路径</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305151539.png" alt="image-20210305151537874" style="zoom:50%;" /><p>【验证图片上传选项】</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305151955.png" alt="image-20210305151953065" style="zoom: 67%;" /><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>​    运行PicGo，运行Typora，插入图片进行测试。右键插入的图片，点击【上传图片】，上传成功，并能正确显示，完成测试</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305152932.png" style="zoom:25%;" />]]></content>
    
    
    <summary type="html">图床上传</summary>
    
    
    
    <category term="办公技能" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E5%8A%9E%E5%85%AC%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Typora + PicGo + Gitee" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/Typora-PicGo-Gitee/"/>
    
  </entry>
  
  <entry>
    <title>个人分享平台构建（前导篇）——Markdown基础语法</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA(%E5%89%8D%E5%AF%BC%E7%AF%87)%E2%80%94%E2%80%94Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA(%E5%89%8D%E5%AF%BC%E7%AF%87)%E2%80%94%E2%80%94Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2021-09-16T17:27:15.043Z</published>
    <updated>2021-03-06T05:23:29.475Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305161628.png" alt="个人分享平台构建"></p><h1 id="MarkDown常用语法"><a href="#MarkDown常用语法" class="headerlink" title="MarkDown常用语法"></a>MarkDown常用语法</h1><p><a href="https://www.bilibili.com/video/av87982836#reply2366896129">基础视频讲解链接</a><br><a href="https://www.bilibili.com/video/av88551739/">画图视频讲解链接</a></p><span id="more"></span><p>本篇为前导教程，帮助大家了解Markdown的基础语法 ，Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。如GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、简书等，甚至还能被使用来撰写电子书。了解Markdown语法规则有利于大家后期个人博客的撰写。</p><h2 id="语块及标识"><a href="#语块及标识" class="headerlink" title="语块及标识"></a>语块及标识</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```语言名称</span></span><br><span class="line"><span class="code">```(英文输入法下输入)</span></span><br></pre></td></tr></table></figure><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`行内代码`</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;一级引用</span><br><span class="line">&gt;&gt;二级引用</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***  或  ---  或  ___</span><br></pre></td></tr></table></figure><h2 id="文字效果"><a href="#文字效果" class="headerlink" title="文字效果"></a>文字效果</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># 标题名字 （#个数代表标题级数）</span><br></pre></td></tr></table></figure><h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**文本**  或  __文本__</span><br><span class="line">__(英文输入法下 Shift + -)</span><br></pre></td></tr></table></figure><h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*文本*  或  _文本_</span><br></pre></td></tr></table></figure><h3 id="加粗斜体"><a href="#加粗斜体" class="headerlink" title="加粗斜体"></a>加粗斜体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***文本***  或  ___文本___</span><br></pre></td></tr></table></figure><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~文字~~</span><br></pre></td></tr></table></figure><h3 id="在Typora下需勾选扩展语法的效果"><a href="#在Typora下需勾选扩展语法的效果" class="headerlink" title="在Typora下需勾选扩展语法的效果"></a>在Typora下需勾选扩展语法的效果</h3><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">==文本== （Typora下需勾选扩展语法)</span><br></pre></td></tr></table></figure><h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">水 H~<span class="number">2</span>~O</span><br><span class="line">双氧水 H~<span class="number">2</span>~O~<span class="number">2</span>~</span><br></pre></td></tr></table></figure><h4 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">面积 m^<span class="number">2</span>^</span><br><span class="line">体积 m^<span class="number">3</span>^</span><br></pre></td></tr></table></figure><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p>😁😀 （win标 + ;)</p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转"><a href="#外部跳转" class="headerlink" title="外部跳转"></a>外部跳转</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[描述](网址)</span><br></pre></td></tr></table></figure><h3 id="内部跳转"><a href="#内部跳转" class="headerlink" title="内部跳转"></a>内部跳转</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[描述]（#标题）</span><br></pre></td></tr></table></figure><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;网址&gt;</span><br></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片本地地址)</span><br></pre></td></tr></table></figure><h3 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](图片网络地址)</span><br></pre></td></tr></table></figure><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序表"><a href="#无序表" class="headerlink" title="无序表"></a>无序表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 可以使用“*”作为标记</span><br><span class="line">+ 也可以使用“+”</span><br><span class="line">- 或者“-”</span><br></pre></td></tr></table></figure><h4 id="有序表"><a href="#有序表" class="headerlink" title="有序表"></a>有序表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数字.空格</span><br><span class="line"><span class="number">1.</span> 有序表以数字和<span class="string">&#x27;.&#x27;</span>开始</span><br><span class="line"><span class="number">4.</span> 数字序列不会影响生成序列</span><br><span class="line"><span class="number">5</span>\. 数字\. 取消显示为列表</span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用|来分隔不同单元格，使用-来分隔表头和其他行,使用:来设置对齐</span><br><span class="line">姓名 | 年龄</span><br><span class="line">-- | --</span><br><span class="line">张三 | <span class="number">12</span></span><br><span class="line">李四 | <span class="number">23</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">MarkDown常用语法</summary>
    
    
    
    <category term="办公技能" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E5%8A%9E%E5%85%AC%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="MarkDown" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(12)—流程控制结构</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(12)%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(12)%E2%80%94%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</id>
    <published>2021-09-16T17:27:15.035Z</published>
    <updated>2021-08-20T09:36:19.621Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="流程控制结构"><a href="#流程控制结构" class="headerlink" title="流程控制结构"></a>流程控制结构</h3><h4 id="1-case结构——作为表达式"><a href="#1-case结构——作为表达式" class="headerlink" title="1. case结构——作为表达式"></a>1. case结构——作为表达式</h4><table><thead><tr><th></th><th>语法</th><th>位置</th></tr></thead><tbody><tr><td>情况一</td><td>case 表达式<br />when 值1 then 值1<br />when 值2 then 值2<br />…<br />else 值n<br />end;</td><td>Begin end中<br /> Begin end外面</td></tr><tr><td>情况二</td><td>case <br />when 条件1 then 值1<br />when 条件2 then 值2<br />…<br />else 值n<br />end;</td><td>Begin end中 <br />Begin end外面</td></tr></tbody></table><h4 id="2-case结构——作为独立的语句"><a href="#2-case结构——作为独立的语句" class="headerlink" title="2. case结构——作为独立的语句"></a>2. case结构——作为独立的语句</h4><table><thead><tr><th></th><th>语法</th><th>位置</th></tr></thead><tbody><tr><td>情况一</td><td>case <br />when 值1 then 语句1<br />when 值2 then 语句2<br />…<br />else 值n<br />end case;</td><td>Begin end中</td></tr><tr><td>情况二</td><td>case <br />when 值1 then 语句1<br />when 值2 then 语句2<br />…<br />else 值n<br />end case;</td><td>Begin end中</td></tr></tbody></table><h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3. 循环结构"></a>3. 循环结构</h4><table><thead><tr><th>名称</th><th>语法</th><th>特点</th><th>位置</th></tr></thead><tbody><tr><td>while</td><td>Label: while loop_condition<br />do<br />      loop_list<br />End while label;</td><td>先判断后执行</td><td>Begin end中</td></tr><tr><td>repeat</td><td>Label: repeat<br />              loop_list<br />Until end_condition<br />end repeat label;</td><td>先执行后判断</td><td>Begin end中</td></tr><tr><td>loop</td><td>Label: loop<br />              loop_list<br />End loop label;</td><td>没有条件的死循环</td><td>Begin end中</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">流程控制结构</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(11)—存储过程和函数</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(11)%E2%80%94%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(11)%E2%80%94%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</id>
    <published>2021-09-16T17:27:15.033Z</published>
    <updated>2021-08-20T09:22:05.496Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="存储过程和函数"><a href="#存储过程和函数" class="headerlink" title="存储过程和函数"></a>存储过程和函数</h3><h4 id="1-什么是存储过程和函数"><a href="#1-什么是存储过程和函数" class="headerlink" title="1. 什么是存储过程和函数"></a>1. 什么是存储过程和函数</h4><p>存储过程和函数： 事先经过编译并存储在数据库中的一段sql语句的集合。 </p><h4 id="2-使用存储过程和函数的好处"><a href="#2-使用存储过程和函数的好处" class="headerlink" title="2. 使用存储过程和函数的好处"></a>2. 使用存储过程和函数的好处</h4><p>使用好处：<br> 1、简化应用开发人员的很多工作<br>2、减少数据在数据库和应用服务器之间的传输<br>3、提高了数据处理的效率</p><h4 id="3-创建存储过程和函数"><a href="#3-创建存储过程和函数" class="headerlink" title="3. 创建存储过程和函数"></a>3. 创建存储过程和函数</h4><ul><li><p>创建存储过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create procedure 存储过程名 ([proc_parameter[,…]])</span><br><span class="line">[characteristic…]routine_body</span><br></pre></td></tr></table></figure></li><li><p>创建函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create function 函数名([func_parameter[,…]])</span><br><span class="line">returns type</span><br><span class="line">[characteristic…]routine_body</span><br></pre></td></tr></table></figure></li><li><p>proc_parameter: [in|out|inout] param_name type</p></li><li><p>Func_paramter: param_name type</p></li><li><p>Type: 任何有效的mysql数据类型</p></li><li><p>Characteristic: </p><p>language sql(默认，且推荐) </p><p>|[not] deterministic </p><p>|{contains sql|no sql</p><p>​                       |reads sql data</p><p>​                       |modifies sql data} </p><p>|sql security{definer|invoker} </p><p>|comment ‘string’</p></li><li><p>Rountine_body: 有效的sql 过程语句</p></li></ul><h4 id="4-修改存储过程和函数"><a href="#4-修改存储过程和函数" class="headerlink" title="4. 修改存储过程和函数"></a>4. 修改存储过程和函数</h4><ul><li><p>修改存储过程： <code>alter procedure 存储过程名 [charactristic…]</code></p></li><li><p>修改函数： <code>alter function 函数名 [charactristic…]</code></p><p> characteristic: </p><p>​             {contains sql|no sql|reads sql data|modifies sql data}<br>​             |sql security{definer|invoker}<br>​             |comment ‘string’</p></li></ul><h4 id="5-调用存储过程和函数"><a href="#5-调用存储过程和函数" class="headerlink" title="5. 调用存储过程和函数"></a>5. 调用存储过程和函数</h4><p>• 调用存储过程： call 存储过程名(参数列表) </p><p>• 调用函数： Select 函数名(参数列表)</p><p><strong>案例</strong></p><ul><li>查询员工名为king的所有记录 </li><li>根据输入的员工名，查询部门名 </li><li>根据指定的员工编号，返回工资 </li><li>根据指定的员工编号，返回工资和部门号 </li><li>将输入的a和b都翻倍并返回</li></ul><h4 id="6-修改存储过程或函数"><a href="#6-修改存储过程或函数" class="headerlink" title="6. 修改存储过程或函数"></a>6. 修改存储过程或函数</h4><p>说明：一次只能删除一个存储过程或者函数，并且要求有该 过程或函数的alter routine 权限 删除存储过程： <code>drop procedure [if exists] 存储过程名</code><br>删除函数： <code>drop function [if exists] 函数名</code></p><h4 id="7-查看存储过程和函数"><a href="#7-查看存储过程和函数" class="headerlink" title="7. 查看存储过程和函数"></a>7. 查看存储过程和函数</h4><ol><li><p>查看存储过程或函数的状态： </p><p><code>show &#123;procedure|function&#125; status like 存储过程或函数名</code></p></li><li><p>查看存储过程或函数的定义：</p><p><code> show create &#123;procedure|function&#125; 存储过程或函数名</code></p></li><li><p>通过查看information_schema.routines了解存储过程和函数的 信息（了解） </p><p><code>select * from rountines where rounine_name =存储过程名|函数名</code></p></li></ol>]]></content>
    
    
    <summary type="html">存储过程和函数</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(10)—视图</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(10)%E2%80%94%E8%A7%86%E5%9B%BE/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(10)%E2%80%94%E8%A7%86%E5%9B%BE/</id>
    <published>2021-09-16T17:27:15.031Z</published>
    <updated>2021-08-20T09:24:40.528Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="1-什么是视图"><a href="#1-什么是视图" class="headerlink" title="1. 什么是视图"></a>1. 什么是视图</h4><ul><li><p>视图：MySQL从5.0.1版本开始提供视图功能。一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表 ，并且是在使用视图时动态生成的，只保存了sql逻辑，不保存查询结果 </p></li><li><p>应用场景： </p><ul><li>– 多个地方用到同样的查询结果 </li><li>– 该查询结果使用的sql语句较复杂</li></ul></li><li><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create view my_v1</span><br><span class="line">as</span><br><span class="line">select studentname,majorname</span><br><span class="line">from student s</span><br><span class="line">inner join major m</span><br><span class="line">on s.majorid &#x3D; m.majorid</span><br><span class="line">where s.majorid &#x3D; 1;</span><br></pre></td></tr></table></figure></li></ul><h5 id="1-1-常见题目"><a href="#1-1-常见题目" class="headerlink" title="1.1 常见题目"></a>1.1 常见题目</h5><ol><li>查询邮箱中包含a字符的员工名、部门名和工种信息</li><li>查询各部门的平均工资级别</li><li>查询平均工资最低的部门信息</li><li>查询平均工资最低的部门名和工资</li></ol><h5 id="1-2-视图的好处"><a href="#1-2-视图的好处" class="headerlink" title="1.2 视图的好处"></a>1.2 视图的好处</h5><p>• 重用sql语句 </p><p>• 简化复杂的sql操作，不必知道它的查询细节 </p><p>• 保护数据，提高安全性</p><h4 id="2-创建或修改视图"><a href="#2-创建或修改视图" class="headerlink" title="2 创建或修改视图"></a>2 创建或修改视图</h4><ul><li><p>创建视图的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create [or replace] view view_name</span><br><span class="line">as select_statement</span><br><span class="line">[with | cascaded | local | check option]</span><br></pre></td></tr></table></figure></li><li><p>修改视图的语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter view view_name</span><br><span class="line">as select_statement</span><br><span class="line">[with | cascaded | local | check option]</span><br></pre></td></tr></table></figure></li></ul><p>视图的可更新性和视图中查询的定义有关系，以下类型的视图是不能更新的。</p><ul><li>包含以下关键字的sql语句：分组函数、distinct、group by 、having、union或者union all</li><li>常量视图</li><li>Select中包含子查询 </li><li>join </li><li>from一个不能更新的视图 </li><li>where子句的子查询引用了from子句中的表</li></ul><h4 id="3-删除视图"><a href="#3-删除视图" class="headerlink" title="3. 删除视图"></a>3. 删除视图</h4><ul><li><p>删除视图的语法</p><p>用户可以一次删除一个或者多个视图，前提是必须有该视 图的drop权限。 </p><p><code>drop view [if exists] view_name,view_name …[restrict|cascade]</code></p></li></ul><h4 id="4-查看视图"><a href="#4-查看视图" class="headerlink" title="4. 查看视图"></a>4. 查看视图</h4><ul><li><p>查看视图的语法： </p><p>show tables; 如果需要查询某个视图的定义，可以使用show create view 命令进行查看： <code>show create view view_name \G</code></p></li></ul>]]></content>
    
    
    <summary type="html">视图</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(09)—事务</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(09)%E2%80%94%E4%BA%8B%E5%8A%A1/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(09)%E2%80%94%E4%BA%8B%E5%8A%A1/</id>
    <published>2021-09-16T17:27:15.030Z</published>
    <updated>2021-08-20T08:11:37.828Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="1-事务的概念和特性"><a href="#1-事务的概念和特性" class="headerlink" title="1. 事务的概念和特性"></a>1. 事务的概念和特性</h4><h5 id="1-1-事务的概念"><a href="#1-1-事务的概念" class="headerlink" title="1.1 事务的概念"></a>1.1 事务的概念</h5><ul><li>事务：事务由单独单元的一个或多个SQL语句组成，在这个单元中，每个MySQL语句是相互依赖的。而整个单独单元作为一个不可分割的整体，如果单元中某条SQL语句一旦执行失败或产生错误，整个单元将会回滚。所有受到影响的数据将返回到事物开始以前的状态；如果单元中的所 有SQL语句均执行成功，则事物被顺利执行。</li></ul><h5 id="1-2-MySQL中的存储引擎"><a href="#1-2-MySQL中的存储引擎" class="headerlink" title="1.2 MySQL中的存储引擎"></a>1.2 MySQL中的存储引擎</h5><ol><li>概念：在mysql中的数据用各种不同的技术存储 在文件（或内存）中。</li><li>通过show engines；来查看mysql支持的存储引 擎。</li><li>在mysql中用的最多的存储引擎有：innodb， myisam ,memory 等。其中innodb支持事务，而 myisam、memory等不支持事务</li></ol><h5 id="1-3-事务的特点"><a href="#1-3-事务的特点" class="headerlink" title="1.3 事务的特点"></a>1.3 事务的特点</h5><ul><li><p>事务的ACID(acid)属性</p><ul><li><p>原子性(Atomicity)</p><p>原子性是指事务是一个不可分割的工作单位，事务中的操作要么 都发生，要么都不发生。</p></li><li><p>一致性(Consistency)</p><p>事务必须使数据库从一个一致性状态变换到另外一个一致性状态 。</p></li><li><p>隔离性(Isolation)</p><p>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p>持久性(Durability)</p><p>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响</p></li></ul></li></ul><h5 id="1-4-事务的使用"><a href="#1-4-事务的使用" class="headerlink" title="1.4 事务的使用"></a>1.4 事务的使用</h5><ul><li>以第一个DML语句的执行作为开始</li><li>以下面的其中之一作为结束<ul><li>commit或rollback语句</li><li>DDL或DCL语句（自动提交）</li><li>用户会话正常结束</li><li>系统异常终了</li></ul></li></ul><h4 id="2-事物的隔离级别"><a href="#2-事物的隔离级别" class="headerlink" title="2. 事物的隔离级别"></a>2. 事物的隔离级别</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li>脏读: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还没有被提交的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li>不可重复读: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 更新了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li>幻读: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中插 入了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p>数据库事务的隔离性: 数据库系统必须具有隔离并发运行各个事务的能力,  使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。 数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, 隔离级别越高, 数据一致性就越好, 但并发性越弱。</p></li><li><p>数据库提供的4种事务隔离级别</p><table><thead><tr><th>隔离级别</th><th>描述</th></tr></thead><tbody><tr><td>READ UNCOMMITTED(读未提交数据)</td><td>允许事务读取未被其他事务提交的变更，脏读，不可重复读和幻读的问题都会出现</td></tr><tr><td>READ COMMITED(读已提交数据)</td><td>只允许事务读取已被其他事务提交的变更，可以避免脏读，但是不可重复读和幻读问题仍可能出现</td></tr><tr><td>REPEATABLE READ(可重复读)</td><td>确保事务可以多次从一个字段中读取相同的值。在这个事务持续期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复读，但幻读的问题仍然存在</td></tr><tr><td>SERIALIZABLE(串行化)</td><td>确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入，更新和删除操作，所有并发都能避免，但性能十分低下</td></tr></tbody></table><p>Oracle 支持的 2 种事务隔离级别：READ COMMITED,  SERIALIZABLE。 Oracle 默认的事务隔离级别为: READ  COMMITED；Mysql 支持 4 种事务隔离级别. Mysql 默认的事务隔离级别 为: REPEATABLE READ</p></li></ul><h4 id="3-事务的案例演示"><a href="#3-事务的案例演示" class="headerlink" title="3. 事务的案例演示"></a>3. 事务的案例演示</h4><h5 id="3-1-在-MySql-中设置隔离级别"><a href="#3-1-在-MySql-中设置隔离级别" class="headerlink" title="3.1 在 MySql 中设置隔离级别"></a>3.1 在 MySql 中设置隔离级别</h5><ul><li>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别</li><li>查看当前的隔离级别: SELECT @@tx_isolation;</li><li>设置当前 mySQL 连接的隔离级别:<ul><li>set transaction isolation level read committed;</li></ul></li><li>设置数据库系统的全局的隔离级别: <ul><li>set global transaction isolation level read committed；</li></ul></li></ul>]]></content>
    
    
    <summary type="html">事务</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(08)—约束和分页</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(08)%E2%80%94%E7%BA%A6%E6%9D%9F%E5%92%8C%E5%88%86%E9%A1%B5/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(08)%E2%80%94%E7%BA%A6%E6%9D%9F%E5%92%8C%E5%88%86%E9%A1%B5/</id>
    <published>2021-09-16T17:27:15.028Z</published>
    <updated>2021-08-20T08:12:15.858Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="约束和分页"><a href="#约束和分页" class="headerlink" title="约束和分页"></a>约束和分页</h3><h4 id="1-描述约束"><a href="#1-描述约束" class="headerlink" title="1. 描述约束"></a>1. 描述约束</h4><h5 id="1-1-什么是约束"><a href="#1-1-什么是约束" class="headerlink" title="1.1 什么是约束"></a>1.1 什么是约束</h5><p>为了保证数据的一致性和完整性，SQL规范以约束的方式对表数据进行额外的条件限制。 约束是表级的强制规定 。可以在创建表时规定约束（通过 CREATE  TABLE 语句），或者在表创建之后也可以（通过 ALTER TABLE 语句）</p><ul><li>有以下六种约束<ul><li>NOT NULL 非空约束，规定某个字段不能为空</li><li>UNIQUE 唯一约束，规定某个字符在整个表中是唯一的</li><li>PRIMARY KEY 主键（非空且唯一）</li><li>FOREIGN KEY 外键</li><li>CHECK 检查约束</li><li>DEFAULT 默认值</li></ul></li></ul><p>MySQL不支持check约束，但可以使用check约束，而没有任何效果；具体细节可以参阅W3Cschool手册</p><ul><li>根据约束数据列的限制，约束可以分为：<ul><li>单列约束：每个约束只约束一列</li><li>多列约束：每个约束可以约束多列</li></ul></li><li>根据约束的作用范围，约束可以分为：<ul><li>列级约束只能作用在一列上，跟在列的定义后面</li><li>表级约束可以作用在多个列上，不与列一起，而是单独定义</li></ul></li></ul><h4 id="2-创建和维护约束"><a href="#2-创建和维护约束" class="headerlink" title="2. 创建和维护约束"></a>2. 创建和维护约束</h4><h5 id="2-1-NOT-NULL约束"><a href="#2-1-NOT-NULL约束" class="headerlink" title="2.1 NOT NULL约束"></a>2.1 NOT NULL约束</h5><ul><li>非空约束用于确保当权列的值不为空值，非空约束只能出现在表对象的列上</li><li>NULL类型特征：<ul><li>所有的类型的值都可以是null，包括int,float等数据类型</li><li>空字符串””不等于null，0也不等于null</li></ul></li></ul><ol><li><p>创建not null约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table emp(</span><br><span class="line">id int(10) not null,</span><br><span class="line">name varchar(20) not null default &#39;abc&#39;,</span><br><span class="line">sex char null</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>增加not null约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp</span><br><span class="line">modify sex varchar(30) not null;</span><br></pre></td></tr></table></figure></li><li><p>取消not null约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp</span><br><span class="line">modify sex varchar(30) null;</span><br></pre></td></tr></table></figure></li><li><p>取消not null约束，增加默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp</span><br><span class="line">modify name varchar(15) default &#39;abc&#39; null;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-2-UNIQUE约束"><a href="#2-2-UNIQUE约束" class="headerlink" title="2.2 UNIQUE约束"></a>2.2 UNIQUE约束</h5><ul><li><p>同一个表可以有多个唯一约束，多个列组合的约束。在创建唯一约束的时候，如果不给唯一约束名称，就默认和列名相同。</p></li><li><p>MySQL回给唯一约束的列默认创建一个唯一的索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table user(</span><br><span class="line">id int not null,</span><br><span class="line">    name varchar(25),</span><br><span class="line">    password varchar(16),</span><br><span class="line">    #使用表级约束语法</span><br><span class="line">    constraint uk_name_pwd unique(name,password)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>表示用户名和密码组合不能重复</p></li></ul><ol><li><p>添加唯一约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table user</span><br><span class="line">add unique(name,password);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table user</span><br><span class="line">add constraint uk_name_pwd unique(name,password);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table user</span><br><span class="line">modify name varchar(20) unique;</span><br></pre></td></tr></table></figure></li><li><p>删除约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table user</span><br><span class="line">drop index uk_name_pwd;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-3-PRIMARY-KEY约束"><a href="#2-3-PRIMARY-KEY约束" class="headerlink" title="2.3 PRIMARY KEY约束"></a>2.3 PRIMARY KEY约束</h5><p>​         主键约束相当于唯一约束+非空约束的组合，主键约束列不允许重复，也不允许出现空值；如果是多列组合的主键约束，那么这些列都不允许重复；每个表最多只允许一个主键，建立主键约束可以在列级别创建，也可以在表级别创建；MySQL的主键名总是PRIMARY，当创建主键约束时，系统默认会在所在的列和列组合上<u><strong>建立唯一索引</strong></u></p><p><strong>列级模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table emp4(</span><br><span class="line">id int auto_increment primary key;</span><br><span class="line">    name varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>表级模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table emp5(</span><br><span class="line">id int not null auto_increment,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    pwd varchar(15),</span><br><span class="line">    constraint emp5_id_pk primary key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>组合模式</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table emp6(</span><br><span class="line">id int not null,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    pwd varchar(15),</span><br><span class="line">    constraint emp6_pk primary key(name,pwd)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li><p>删除主键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp5</span><br><span class="line">drop primary key;</span><br></pre></td></tr></table></figure></li><li><p>添加主键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp5</span><br><span class="line">add primary key(name,pwd);</span><br></pre></td></tr></table></figure></li><li><p>修改主键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp5</span><br><span class="line">modify id int primary key;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-4-FOREIGN-KEY约束"><a href="#2-4-FOREIGN-KEY约束" class="headerlink" title="2.4 FOREIGN KEY约束"></a>2.4 FOREIGN KEY约束</h5><p>​          外键约束是保证一个或两个表之间的参照完整性，外键是构建于一个表的两个字段或是两个表的两个字段之间的参照关系。从表的外键值必须在主表中能找到或者为空。当主表的记录被从表参照时，主表的记录将不允许删除， 如果要删除数据，需要先删除从表中依赖该记录的数据，然后才可以删除主表的数据。还有一种就是级联删除子表数据。注意：外键约束的参照列，在主表中引用的只能是主键或唯一键约束的列，同一个表可以有多个外键约束</p><ol><li><p>创建外键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#主表</span><br><span class="line">create table dept(</span><br><span class="line">dept_id int auto_increment primary key,</span><br><span class="line">    dept_name varchar(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#从表</span><br><span class="line">create table emp(</span><br><span class="line">emp_id into auto_increment primary key,</span><br><span class="line">    last_name varchar(15),</span><br><span class="line">    dept_id int,</span><br><span class="line">    constraint emp_dept_id_fk foreign key(dept_id) </span><br><span class="line">    references dept(dept_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>创建多列外键组合，必须使用表级约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#主表</span><br><span class="line">create table calsses(</span><br><span class="line">id int,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    number int,</span><br><span class="line">    primary key(name,number)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#从表</span><br><span class="line">create table student(</span><br><span class="line">id int auto_increment primary key,</span><br><span class="line">    classes_name varchar(20),</span><br><span class="line">    classes_number int,</span><br><span class="line">    foreign key(classes_name,classes_number)</span><br><span class="line">    references classes(name,number)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除外键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table emp</span><br><span class="line">drop foreign key emp_dept_id_fk;</span><br></pre></td></tr></table></figure></li><li><p>增加外键约束</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table emp</span><br><span class="line">add [constraint emp_dept_id_fk] foreign key(dept_id)</span><br><span class="line">references dept(dept_id);</span><br></pre></td></tr></table></figure></li><li><p>FOREIGN KEY约束的关键字</p><p>FOREIGN KEY：在表级指定子表中的列</p><p>REFERENCES：标示在父表中的列</p><p>ON DELETE CASCADE(级联删除)：当父表中的列被删除时，子表中相对应的列也被删除</p><p>ON DELETE SET NULL(级联置空)：子表中相应的列置空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table student(</span><br><span class="line">id int auto_increment primary key,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    classes_name varchar(20),</span><br><span class="line">    classes_number int,</span><br><span class="line">    #表级别联合外键</span><br><span class="line">    foreign key(classes_name,classes_number)</span><br><span class="line">    references classes(name,number)</span><br><span class="line">    on delete cascade</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-5-CHECK约束"><a href="#2-5-CHECK约束" class="headerlink" title="2.5 CHECK约束"></a>2.5 CHECK约束</h5><p>MySQL可以使用check约束，但check约束对数据验证没有任何作用，添加数据时，没有任何错误或警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table temp(</span><br><span class="line">id int auto_increment,</span><br><span class="line">    name varchar(20),</span><br><span class="line">    age int check(age &gt; 20),</span><br><span class="line">    primary key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="3-数据库分页"><a href="#3-数据库分页" class="headerlink" title="3. 数据库分页"></a>3. 数据库分页</h4><ul><li>背景<ul><li>查询返回的记录太多，查看起来不方便</li></ul></li><li>分页原理<ul><li>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件</li></ul></li></ul><h5 id="3-1-使用limit实现分页"><a href="#3-1-使用limit实现分页" class="headerlink" title="3.1 使用limit实现分页"></a>3.1 使用limit实现分页</h5><ul><li><p>怎么分段，当前在第几段（每页有几条，当前在第几页）</p><ul><li>前10条记录：SELECT * FROM table LIMIT 0,10; </li><li>第11至20条记录：SELECT * FROM table LIMIT 10,10; </li><li>第21至30条记录： SELECT * FROM table LIMIT 20,10;</li></ul></li><li><p>公式：（当前页数-1）*每页条数，每页条数</p><p>SELECT * FROM table LIMIT(PageNo - 1)*PageSize,PageSize;</p></li><li><p>注意：</p><ul><li>limit子句必须放在整个查询语句的最后</li></ul></li></ul>]]></content>
    
    
    <summary type="html">约束和分页</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(07)—常见的数据类型</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(07)%E2%80%94%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(07)%E2%80%94%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2021-09-16T17:27:15.007Z</published>
    <updated>2021-08-20T05:58:49.501Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="常见的数据类型"><a href="#常见的数据类型" class="headerlink" title="常见的数据类型"></a>常见的数据类型</h3><h4 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1. 数值类型"></a>1. 数值类型</h4><h5 id="1-1-整型"><a href="#1-1-整型" class="headerlink" title="1.1 整型"></a>1.1 整型</h5><table><thead><tr><th>整数类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>Tinyint</td><td>1</td><td>有符号：-128<del>127 无符号：0</del>255</td></tr><tr><td>Smallint</td><td>2</td><td>有符号：-32768<del>32767 无符号：0</del>65535</td></tr><tr><td>Mediumint</td><td>3</td><td>有符号：-8388608<del>8388607 无符号：0</del>1677215</td></tr><tr><td>Int、integer</td><td>4</td><td>有符号：- 2147483648<del>2147483647 无符号：0</del>4294967295</td></tr><tr><td>Bigint</td><td>8</td><td>有符号： -9223372036854775808 <del>9223372036854775807 <br />无符号：0</del> 9223372036854775807*2+1</td></tr></tbody></table><h5 id="1-2-小数"><a href="#1-2-小数" class="headerlink" title="1.2 小数"></a>1.2 小数</h5><table><thead><tr><th>浮点数类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>float</td><td>4</td><td>±1.75494351E-38~±3.402823466E+38</td></tr><tr><td>double</td><td>8</td><td>±2.2250738585072014E-308~ ±1.7976931348623157E+308</td></tr></tbody></table><table><thead><tr><th>定点数类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>DEC(M,D) DECIMAL(M,D)</td><td>M+2</td><td>最大取值范围与double相同，给定decimal的有效取值范围由M和D 决定</td></tr></tbody></table><h5 id="1-3-位类型"><a href="#1-3-位类型" class="headerlink" title="1.3 位类型"></a>1.3 位类型</h5><table><thead><tr><th>位类型</th><th>字节</th><th>范围</th></tr></thead><tbody><tr><td>Bit(M)</td><td>1~8</td><td>Bit(1)~bit(8)</td></tr></tbody></table><h4 id="2-字符类型"><a href="#2-字符类型" class="headerlink" title="2. 字符类型"></a>2. 字符类型</h4><h5 id="2-1-char和varchar类型"><a href="#2-1-char和varchar类型" class="headerlink" title="2.1 char和varchar类型"></a>2.1 char和varchar类型</h5><p>说明：用来保存MySQL中比较短的字符串</p><table><thead><tr><th>字符串类型</th><th>最多字符数</th><th>描述以及存储需求</th></tr></thead><tbody><tr><td>char(M)</td><td>M</td><td>M为0-255之间的整数</td></tr><tr><td>varchar(M)</td><td>M</td><td>M为0-65535之间的整数</td></tr></tbody></table><h5 id="2-2-binary和varbinary类型"><a href="#2-2-binary和varbinary类型" class="headerlink" title="2.2 binary和varbinary类型"></a>2.2 binary和varbinary类型</h5><p>说明：类似于char和varvchar，不同的是他们包含二进制字符串而不包括非二进制字符串</p><h5 id="2-3-Enum类型"><a href="#2-3-Enum类型" class="headerlink" title="2.3 Enum类型"></a>2.3 Enum类型</h5><p>说明：又称为枚举类型，要求插入的值必须属于列表中指定的值之一</p><p>如果列表成员为1-255，则需要1字节存储</p><p>如果列表成员为25-65535，则需要2字节存储，最多需要65535个成员！</p><h5 id="2-4-Set类型"><a href="#2-4-Set类型" class="headerlink" title="2.4 Set类型"></a>2.4 Set类型</h5><p>说明：和Enum类型相似，里面可以保存0-64个成员。和Enum类型最大的区别是：SET类型一次可以选取多个成员，而Enum只能选一个，根据成员个数不同，存储所占字节也不相同</p><table><thead><tr><th>成员数</th><th>字节数</th></tr></thead><tbody><tr><td>1-8</td><td>1</td></tr><tr><td>9-16</td><td>2</td></tr><tr><td>17-24</td><td>3</td></tr><tr><td>25-32</td><td>4</td></tr><tr><td>33-64</td><td>8</td></tr></tbody></table><h4 id="3-日期类型"><a href="#3-日期类型" class="headerlink" title="3. 日期类型"></a>3. 日期类型</h4><table><thead><tr><th>日期和时间类型</th><th>字节</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>date</td><td>4</td><td>1000-01-01</td><td>9999-12-31</td></tr><tr><td>datetime</td><td>8</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>timestamp</td><td>4</td><td>19700101080001</td><td>2038年的某个时刻</td></tr><tr><td>time</td><td>3</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>year</td><td>1</td><td>1901</td><td>2155</td></tr></tbody></table><ol><li>Timestamp支持的时间范围较小，取值范围： 19700101080001——2038年的某个时间 Datetime的取值范围：1000-1-1 ——9999—12-31</li><li>timestamp和实际时区有关，更能反映实际的日期，而datetime则只能反映出插入时的当地时区</li><li>timestamp的属性受Mysql版本和SQLMode的影响很大</li></ol>]]></content>
    
    
    <summary type="html">常见的数据类型</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(06)—创建和管理表</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(06)%E2%80%94%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(06)%E2%80%94%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/</id>
    <published>2021-09-16T17:27:15.005Z</published>
    <updated>2021-08-20T03:40:11.509Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="创建和管理表"><a href="#创建和管理表" class="headerlink" title="创建和管理表"></a>创建和管理表</h3><h4 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1. 创建数据库"></a>1. 创建数据库</h4><ul><li><p>创建一个保存员工信息的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create database employee_date;</span><br><span class="line"></span><br><span class="line">[2021-08-20 10:57:37] 1 row affected in 16 ms</span><br></pre></td></tr></table></figure></li><li><p>相关其他命令</p><p><code>show database</code>：查看当前数据库</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201139802.png" alt="image-20210820105850350" style="zoom:50%;" /> <p><code>use employees</code>：“使用”一个数据库，使其作为当前数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myemployees&gt; use employee_date</span><br><span class="line">[2021-08-20 11:00:02] completed in 0 ms</span><br></pre></td></tr></table></figure></li></ul><h5 id="1-1-命名规则"><a href="#1-1-命名规则" class="headerlink" title="1.1 命名规则"></a>1.1 命名规则</h5><p>数据库名不得超过30个字符，变量名限制为29个，必须只能包含A-Z,a-z,0-9,_共63个字符。不能在对象名的字符间留空格，必须不能和用户定义的其他对象重名，必须保证你的字段没有和和保留字、数据库系统或常用 方法冲突 •。保持字段名和类型的一致性,在命名字段并为其指定数 据类型的时候一定要保证一致性。假如数据类型在一 个表里是整数,那在另一个表里可就别变成字符型了</p><h4 id="2-创建表"><a href="#2-创建表" class="headerlink" title="2. 创建表"></a>2. 创建表</h4><p>CREAT TABLE语句</p><p>必须具备：</p><ul><li><p>CREATE TABLE 权限</p></li><li><p>存储空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE [schema.]table (column datatype [DEFAULT expr][,...]);</span><br></pre></td></tr></table></figure><p>必须指定：</p><p>表名；列名，数据类型，尺寸</p></li></ul><h5 id="2-1-创建表"><a href="#2-1-创建表" class="headerlink" title="2.1. 创建表"></a>2.1. 创建表</h5><p>语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE dept(deptno INT(2),</span><br><span class="line">                 dname VARCHAR(14),</span><br><span class="line">                 loc VARCHAR(13));</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201138414.png" alt="image-20210820110459757" style="zoom:50%;" /> <img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201139294.png" alt="image-20210820110527288" style="zoom: 33%;" /></p><p>确认</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESCRIBE dept</span><br></pre></td></tr></table></figure><h4 id="3-描述各种数据类型"><a href="#3-描述各种数据类型" class="headerlink" title="3. 描述各种数据类型"></a>3. 描述各种数据类型</h4><h5 id="3-1-常用数据类型"><a href="#3-1-常用数据类型" class="headerlink" title="3.1 常用数据类型"></a>3.1 常用数据类型</h5><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>INT</td><td>使用4个字节保存整数数据</td></tr><tr><td>CHAR(size)</td><td>指定字符数据。若未指定，则默认一个字符，最大长度255</td></tr><tr><td>VARCHAR(size)</td><td>可变长字符数据，根据字符串实际长度保存，必须指定长度</td></tr><tr><td>FLOAT(M,D)</td><td>单精度，M=整数位+小数位，D=小数位。D&lt;=M&lt;=255，0&lt;=D&lt;=30,默认M+D&lt;=6</td></tr><tr><td>DOUBLE(M,D)</td><td>双精度。D&lt;=M&lt;=255,0&lt;=D&lt;=30,默认M+D&lt;=15</td></tr><tr><td>DATE</td><td>日期型数据，格式’YYYY-MM-DD’</td></tr><tr><td>BLOB</td><td>二进制形式的长文本数据，最大可达4G</td></tr><tr><td>TEXT</td><td>长文本数据，最大可达4G</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#创建表</span><br><span class="line">CREATE TABLE emp(</span><br><span class="line">#int类型，自增</span><br><span class="line">emp_id INT AUTO_INCREMENT,</span><br><span class="line">#最多保存2个中英文字符</span><br><span class="line">emp_name CHAR(20),</span><br><span class="line">#总位数不超过15位</span><br><span class="line">salaryDOUBLE,</span><br><span class="line">    #日期类型</span><br><span class="line">    birthdayDATE,</span><br><span class="line">    #主键</span><br><span class="line">    PRIMARY KEY(emp_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="4-2-使用子查询创建表"><a href="#4-2-使用子查询创建表" class="headerlink" title="4.2 使用子查询创建表"></a>4.2 使用子查询创建表</h5><p>使用AS subquery选项，将创建表和插入数据结合起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table [(column,column...)]</span><br><span class="line">AS subquery;</span><br></pre></td></tr></table></figure><p>指定的列和子查询中的列要一一对应，通过列名和默认值定义列</p><ol><li><p>复制现有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table emp1 as select* from employees;</span><br><span class="line">create table emp2 as select* from employees [where ...];</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE dept80</span><br><span class="line">AS </span><br><span class="line">SELECT employee_id, last_name, </span><br><span class="line">   salary*12 ANNSAL, </span><br><span class="line">               hire_date</span><br><span class="line">        FROM employees</span><br><span class="line">        WHERE department_id &#x3D; 80;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201138385.png" alt="image-20210820111043990" style="zoom:50%;" /> <img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201111597.png" alt="image-20210820111132924"></p></li></ol><h4 id="4-修改表的定义"><a href="#4-修改表的定义" class="headerlink" title="4. 修改表的定义"></a>4. 修改表的定义</h4><p>ALTER TABLE语句</p><ul><li>向已有表中添加列</li><li>修改现有表中的列</li><li>删除现有表中的列</li><li>重命名现有表中的列</li></ul><ol><li><p>追加一个新列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alter table dept80</span><br><span class="line">add job_id varchar(15);</span><br><span class="line"></span><br><span class="line">[2021-08-20 11:12:51] completed in 28 ms</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201113602.png" alt="image-20210820111326187"></p></li><li><p>修改一个列</p><p>可以修改列的数据类型，尺寸和默认值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table dept80</span><br><span class="line">modify last_name varchar(30) default &#39;null_name&#39;;</span><br></pre></td></tr></table></figure><p>对默认值的修改只影响今后对表的修改</p></li><li><p>删除一个列</p><p>使用DROP COLUMN子句删除不在需要的列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table dept80</span><br><span class="line">drop column job_id;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201138188.png" alt="image-20210820112733644" style="zoom:50%;" /> </li><li><p>重命名一个列</p><p>使用CHANGE old_column new_column dataType子句重命名列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table dept80</span><br><span class="line">change hiredate hire_date datetime;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201130946.png" alt="image-20210820113037400" style="zoom:50%;" /> </li></ol><h4 id="5-删除，重命名和清空表"><a href="#5-删除，重命名和清空表" class="headerlink" title="5. 删除，重命名和清空表"></a>5. 删除，重命名和清空表</h4><h5 id="5-1-删除表"><a href="#5-1-删除表" class="headerlink" title="5.1 删除表"></a>5.1 删除表</h5><p>数据和结构都被删除，所有正在运行的相关事务被提交，所有相关索引被删除，DROP TABLE语句不能回滚</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">drop table dept;</span><br><span class="line"></span><br><span class="line">[2021-08-20 11:32:43] completed in 46 ms</span><br></pre></td></tr></table></figure><h5 id="5-2-清空表"><a href="#5-2-清空表" class="headerlink" title="5.2 清空表"></a>5.2 清空表</h5><ul><li><p>TRUNCATE TABLE语句</p><p>删除表中所有的数据，释放表的存储空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table dept;</span><br></pre></td></tr></table></figure><ul><li><p>TRUNCATE语句不能回滚 </p></li><li><p>可以使用 DELETE 语句删除数据,可以回滚 </p></li><li><p>对比：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">delete from emp2;</span><br><span class="line">select * from emp2;</span><br><span class="line">rollback;</span><br><span class="line">select * from emp2;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="5-3-改变对象的名称"><a href="#5-3-改变对象的名称" class="headerlink" title="5.3 改变对象的名称"></a>5.3 改变对象的名称</h5><p>执行RENAME语句改变表，视图的名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table dept80</span><br><span class="line">rename to detail_dept;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201138292.png" alt="image-20210820113816843" style="zoom:50%;" /> ]]></content>
    
    
    <summary type="html">创建和管理表</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(05)—数据处理之增删改</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(05)%E2%80%94%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(05)%E2%80%94%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/</id>
    <published>2021-09-16T17:27:15.004Z</published>
    <updated>2021-08-20T02:16:08.368Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="数据处理之增删改"><a href="#数据处理之增删改" class="headerlink" title="数据处理之增删改"></a>数据处理之增删改</h3><h4 id="1-数据操纵语言"><a href="#1-数据操纵语言" class="headerlink" title="1. 数据操纵语言"></a>1. 数据操纵语言</h4><ul><li>DML(Data Manipulation Language — 数据操纵语言)可以在下列条件下执行<ul><li>向表中插入数据</li><li>修改现存数据</li><li>删除现存数据</li></ul></li><li>事务是由完成若干项工作的DML语言组成的</li></ul><h4 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h4><p>INSERT语句语法</p><p>一次向表中插入一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO table [(column [, column...])]</span><br><span class="line">VALUES (value [, value...]);</span><br></pre></td></tr></table></figure><ol><li><p>为每一列添加一个新值，按列的默认顺序列出各个列的值。在INSERT子句中随意列出列名和他们的值，字符和日期型数据应包含在单引号中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO</span><br><span class="line">employees(employee_id,last_name,email,hiredate,job_id)</span><br><span class="line">VALUES (300,&#39;Tom&#39;,&#39;tom@126.com&#39;,str_to_date(&#39;2021-3-21&#39;,&#39;%Y-%m-%d&#39;),&#39;SA_REP&#39;);</span><br><span class="line"></span><br><span class="line">[2021-08-19 17:56:28] 1 row affected in 14 ms</span><br></pre></td></tr></table></figure></li><li><p>向表中插入空值</p><p>隐式方式：在列名表中省略该值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into departments (department_id,department_name)</span><br><span class="line">values(280,&#39;Sel&#39;);</span><br><span class="line"></span><br><span class="line">[2021-08-19 18:03:01] 1 row affected in 11 ms</span><br></pre></td></tr></table></figure><p>显示方式：在VALUES子句集中指定空值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">insert into departments</span><br><span class="line">values(290,&#39;Fri&#39;,null,null);</span><br><span class="line"></span><br><span class="line">[2021-08-19 18:04:56] 1 row affected in 18 ms</span><br></pre></td></tr></table></figure></li><li><p>插入指定的值</p><p>NOW()函数：记录当前系统的日期和时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">insert into employees(employee_id,</span><br><span class="line">                      first_name,</span><br><span class="line">                      last_name,</span><br><span class="line">                      email,</span><br><span class="line">                      phone_number,</span><br><span class="line">                      hiredate,</span><br><span class="line">                      job_id,</span><br><span class="line">                      salary,</span><br><span class="line">                      commission_pct,</span><br><span class="line">                      manager_id,</span><br><span class="line">                      department_id)</span><br><span class="line">values(207, </span><br><span class="line">&#39;Louis&#39;, &#39;Popp&#39;, </span><br><span class="line">&#39;LPOPP&#39;, &#39;515.124.4567&#39;, </span><br><span class="line">NOW(), &#39;AC_ACCOUNT&#39;, 6900, </span><br><span class="line">NULL, 205, 100);</span><br><span class="line"></span><br><span class="line">[2021-08-19 20:25:18] 1 row affected in 18 ms</span><br></pre></td></tr></table></figure></li><li><p>从其他表中拷贝数据</p><p>在INSERT语句中加入子查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myemployees&gt; insert into employees_test</span><br><span class="line">             select *</span><br><span class="line">             from employees</span><br><span class="line">             where department_id &#x3D; 110</span><br><span class="line">[2021-08-20 10:04:48] 2 rows affected in 12 ms</span><br></pre></td></tr></table></figure><p>不必书写 VALUES 子句,子查询中的值列表应与 INSERT 子句中的列名对应</p></li></ol><h4 id="3-更新数据"><a href="#3-更新数据" class="headerlink" title="3. 更新数据"></a>3. 更新数据</h4><p>UPDATE语句语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE table</span><br><span class="line">SET column &#x3D; value [, column &#x3D; value, ...]</span><br><span class="line">[WHERE condition]</span><br></pre></td></tr></table></figure><p>可以一次更新多条数据。如果需要回滚数据，需要保证在DML前，进行设置：SET AUTOCOMMIT = FALSE;</p><ol><li><p>使用WHERE子句指定需要更新的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">update employees</span><br><span class="line">set department_id &#x3D; 70</span><br><span class="line">where employee_id &#x3D; 113;</span><br><span class="line"></span><br><span class="line">[2021-08-20 10:10:44] 1 row affected in 0 ms</span><br></pre></td></tr></table></figure><p>如果省略 WHERE 子句，则表中的所有数据都将被更新</p></li></ol><h4 id="4-删除数据"><a href="#4-删除数据" class="headerlink" title="4. 删除数据"></a>4. 删除数据</h4><p>DELETE语句语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM table</span><br><span class="line">[WHERE condition];</span><br></pre></td></tr></table></figure><ol><li><p>使用WHERE子句删除指定的记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM departments</span><br><span class="line">WHERE department_name &#x3D; &#39;Finance&#39;;</span><br><span class="line"></span><br><span class="line">[2021-08-20 10:15:32] completed in 5 ms</span><br></pre></td></tr></table></figure><p>如果省略 WHERE 子句，则表中的全部数据将被删除</p></li></ol>]]></content>
    
    
    <summary type="html">数据处理之增删改</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(04)—常见函数</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(04)%E2%80%94%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(04)%E2%80%94%E5%AD%90%E6%9F%A5%E8%AF%A2/</id>
    <published>2021-09-16T17:27:15.002Z</published>
    <updated>2021-08-19T05:01:06.093Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>概念：出现在其他语句内部的select语句，称为子 查询或内查询；内部嵌套其他select语句的查询，称为外查询或主 查询<br>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select first_name </span><br><span class="line">from employees </span><br><span class="line">where department_id in(</span><br><span class="line">select department_id </span><br><span class="line">    from departments</span><br><span class="line">where location_id&#x3D;1700</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意事项</strong></p><ul><li><p>子查询要包含在括号内</p></li><li><p>将子查询放在比较条件的右侧</p></li><li><p>单行操作符对象单行子查询，多行操作符对应多行子查询</p></li><li><p>单行子查询</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108190927328.png" alt="image-20210819092714187"></p></li><li><p>多行子查询</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108190928644.png" alt="image-20210819092801406"></p></li></ul><h4 id="1-单行子查询"><a href="#1-单行子查询" class="headerlink" title="1. 单行子查询"></a>1. 单行子查询</h4><p>只返回一行，使用单行比较操作符</p><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>Equal to</td></tr><tr><td>&gt;</td><td>Greater than</td></tr><tr><td>&gt;=</td><td>Greater than or equal to</td></tr><tr><td>&lt;</td><td>Less than</td></tr><tr><td>&lt;=</td><td>Less than or equal to</td></tr><tr><td>&lt;&gt;</td><td>Not equal to</td></tr></tbody></table><p>子查询语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT select_list</span><br><span class="line">FROM table</span><br><span class="line">WHERE expr operator</span><br><span class="line">(SELECT select_list</span><br><span class="line">  FROM table);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>子查询 (内查询) 在主查询之前一次执行完成。 子查询的结果被主查询(外查询)使用 。</p><p>使用子查询解决问题</p><p>谁的工资比Abel高？</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108190936564.png" alt="image-20210819093644144"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &gt;(SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name &#x3D; &#39;Abel&#39;);</span><br></pre></td></tr></table></figure><img src="../../../../Users/xiong/AppData/Roaming/Typora/typora-user-images/image-20210819094032607.png" alt="image-20210819094032607" style="zoom:50%;" /> <ol><li><p>执行单行子查询</p><p>返回job_id与141号员工相同，salary比143号员工多的员工的姓名，job_id和工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where job_id &#x3D; (select job_id </span><br><span class="line">                from employees </span><br><span class="line">                where employee_id &#x3D; 141)</span><br><span class="line">and salary &gt; (select salary</span><br><span class="line">             from employees</span><br><span class="line">             where employee_id &#x3D; 143);</span><br></pre></td></tr></table></figure><img src="../../../../Users/xiong/AppData/Roaming/Typora/typora-user-images/image-20210819095441015.png" alt="image-20210819095441015" style="zoom: 50%;" /> </li><li><p>在子查询中使用组函数</p><p>返回公司工资最少的员工的last_name，job_id和salary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary &#x3D; (select min(salary)</span><br><span class="line">    from employees</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191041825.png" alt="image-20210819101029244" style="zoom: 50%;" /> </li><li><p>子查询中的HAVING子句</p><p>首先执行子查询，向主查询中的HAVING子句返回结果</p><p>查询最低工资大于50号部门最低工资的部门id和其最低工资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select department_id,min(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having min(salary) &gt; (select min(salary) </span><br><span class="line">                      from employees </span><br><span class="line">                      where department_id &#x3D; 50);</span><br></pre></td></tr></table></figure><img src="../../../../Users/xiong/AppData/Roaming/Typora/typora-user-images/image-20210819105231528.png" alt="image-20210819105231528" style="zoom:50%;" /> </li></ol><h4 id="2-多行子查询"><a href="#2-多行子查询" class="headerlink" title="2. 多行子查询"></a>2. 多行子查询</h4><p>返回多行，使用多行比较操作符</p><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN/NOT IN</td><td>等于列表中的任意一个</td></tr><tr><td>ANY | SOME</td><td>和子查询返回的某一个值比较</td></tr><tr><td>ALL</td><td>和子查询返回的所有值比较</td></tr></tbody></table><p>体会any和all的区别</p><ol><li><p>使用IN操作符</p><p>返回location_id是1400或1700的部门中的所有员工姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name</span><br><span class="line">from employeesleft join locations</span><br><span class="line">on location_id in (1400,1700);</span><br></pre></td></tr></table></figure><img src="../../../../Users/xiong/AppData/Roaming/Typora/typora-user-images/image-20210819124909755.png" alt="image-20210819124909755" style="zoom:50%;" /> </li><li><p>在多行子查询中使用ANY操作符</p><p>返回其他部门中比job_id为’IT_PROG’部门<u>任意某一</u>工资低的员工的员工号、姓名、job_id以及salary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select employee_id,last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary &lt; any(select salary</span><br><span class="line">                  from employees</span><br><span class="line">                  where job_id &#x3D; &#39;IT_PROG&#39;)</span><br><span class="line">                  and job_id &lt;&gt; &#39;IT_PROG&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191257996.png" alt="image-20210819125713691"></p></li><li><p>在多行子查询中使用ALL操作符</p><p>返回其它部门中比job_id为‘IT_PROG’部门<u>所有</u>工资都低的员工 的员工号、姓名、job_id 以及salary</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select employee_id,last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary &lt; all(select salary</span><br><span class="line">                  from employees</span><br><span class="line">                  where job_id &#x3D; &#39;IT_PROG&#39;)</span><br><span class="line">                  and job_id &lt;&gt; &#39;IT_PROG&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191300990.png" alt="image-20210819130023721"></p></li></ol>]]></content>
    
    
    <summary type="html">子查询</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(03)—常见函数</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(03)%E2%80%94%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(03)%E2%80%94%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0/</id>
    <published>2021-09-16T17:27:15.000Z</published>
    <updated>2021-08-19T01:13:45.924Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h3><h4 id="1-字符函数"><a href="#1-字符函数" class="headerlink" title="1. 字符函数"></a>1. 字符函数</h4><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108182038721.png" alt="image-20210818203807288"></p><h5 id="1-1-大小写控制函数"><a href="#1-1-大小写控制函数" class="headerlink" title="1.1 大小写控制函数"></a>1.1 大小写控制函数</h5><p>这类函数改变字符的大小写</p><table><thead><tr><th>函数</th><th>结果</th></tr></thead><tbody><tr><td>LOWER(‘SQL Course’)</td><td>sql course</td></tr><tr><td>UPPER(‘SQL Course’)</td><td>SQL COURSE</td></tr></tbody></table><h5 id="1-2-字符控制函数"><a href="#1-2-字符控制函数" class="headerlink" title="1.2 字符控制函数"></a>1.2 字符控制函数</h5><table><thead><tr><th>函数</th><th>结果</th></tr></thead><tbody><tr><td>CONCAT(‘Hello’,’World’)</td><td>HelloWorld</td></tr><tr><td>SUBSTR(‘HelloWorld’,1,5)</td><td>Hello</td></tr><tr><td>LENGTH(‘HelloWorld’)</td><td>10</td></tr><tr><td>INSTR(‘HelloWorld’,’W’)</td><td>6</td></tr><tr><td>LPAD(salary,10,’*’)</td><td>*****24000</td></tr><tr><td>RPAD(salary,10,’*’)</td><td>24000*****</td></tr><tr><td>TRIM(‘H’FROM’HelloWorld’)</td><td>elloWorld</td></tr><tr><td>REPLACE(‘abcd’,’b’,’m’)</td><td>amcd</td></tr></tbody></table><h4 id="2-数字函数"><a href="#2-数字函数" class="headerlink" title="2 数字函数"></a>2 数字函数</h4><ul><li><p>ROUND：四舍五入</p><p>ROUND(45.926,2) ——&gt; 45.93</p></li><li><p>TRUNCATE：截断</p><p>TRUNC(45.926,2) ——&gt; 45.92</p></li><li><p>MOD：求余</p><p>MOD(1600,300) ——&gt; 100</p></li></ul><h4 id="3-日期函数"><a href="#3-日期函数" class="headerlink" title="3. 日期函数"></a>3. 日期函数</h4><ul><li><p>now：获取当前日期</p></li><li><p>str_to_date：将日期格式的字符转换成指定格式的日期</p><p>str_to_date(‘9-13-1999’,’%m-%d-%Y’)              1993-09-13</p></li><li><p>date_format：将日期转化成字符</p><p>date_format(‘2021/6/6’,’%Y年%m月%d日’)     2021年6月6日</p></li></ul><table><thead><tr><th>序号</th><th>格式</th><th>功能</th></tr></thead><tbody><tr><td>1</td><td>%Y</td><td>四位的年份</td></tr><tr><td>2</td><td>%y</td><td>2位的年份</td></tr><tr><td>3</td><td>%m</td><td>月份(01，02….11，12)</td></tr><tr><td>4</td><td>%c</td><td>月份(1,2…11,12)</td></tr><tr><td>5</td><td>%d</td><td>日(01，02)</td></tr><tr><td>6</td><td>%H</td><td>小时(24小时制)</td></tr><tr><td>7</td><td>%h</td><td>小时(12小时制)</td></tr><tr><td>8</td><td>%i</td><td>分钟(00,01….59)</td></tr><tr><td>9</td><td>%s</td><td>秒(00,01…..59)</td></tr></tbody></table><h4 id="4-其他函数"><a href="#4-其他函数" class="headerlink" title="4. 其他函数"></a>4. 其他函数</h4><h4 id="5-流程控制函数"><a href="#5-流程控制函数" class="headerlink" title="5. 流程控制函数"></a>5. 流程控制函数</h4><h5 id="5-1-条件表达式"><a href="#5-1-条件表达式" class="headerlink" title="5.1 条件表达式"></a>5.1 条件表达式</h5><ul><li><p>在SQL语句中使用IF-THEN-ELSE逻辑</p></li><li><p>使用方法</p><p>—CASE表达式</p><p>在本需要使用IF-THEN-ELSE逻辑时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CASE expr WHEN comparison_expr1 THEN return_expr1</span><br><span class="line">[WHEN comparison_expr2 THEN return_expr2</span><br><span class="line">WHEN comparison_exprn THEN return_exprn</span><br><span class="line">ELSE else_expr]</span><br><span class="line">END</span><br></pre></td></tr></table></figure></li><li><pre><code class="mysql">SELECT last_name, job_id, salary,    CASE job_id WHEN &#39;IT_PROG&#39; THEN 1.10*salary                WHEN &#39;ST_CLERK&#39; THEN 1.15*salary                WHEN &#39;SA_REP&#39; THEN 1.20*salary    ELSE salary END &quot;REVISED_SALARY&quot;FROM employees;</code></pre><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108190911003.png" alt="image-20210819091115579"></p></li></ul>]]></content>
    
    
    <summary type="html">常见函数</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(02)—数据处理之查询</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(02)%E2%80%94%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E6%9F%A5%E8%AF%A2/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(02)%E2%80%94%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E6%9F%A5%E8%AF%A2/</id>
    <published>2021-09-16T17:27:14.998Z</published>
    <updated>2021-08-20T09:49:12.102Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h3><p>使用前，对当前数据库写入测试用的数据库脚本，点击下载脚本</p><h4 id="1-基本的SELECT语句"><a href="#1-基本的SELECT语句" class="headerlink" title="1. 基本的SELECT语句"></a>1. 基本的SELECT语句</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * | &#123;[DISTINCT] cloumn | expression [alias],...&#125;</span><br><span class="line">FROM table;</span><br></pre></td></tr></table></figure><p>SELECT    标识选择哪些列<br>FROM        标识从哪个表中选择</p><ol><li><p>选择全部列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use myemployees;</span><br><span class="line">select *</span><br><span class="line">from departments;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172236487.png" alt="image-20210817223641403"></p></li><li><p>选择特定列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select department_id, location_id</span><br><span class="line">from departments;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172240127.png" alt="image-20210817224055778" style="zoom:50%;" /> </li><li><p>使用别名</p><p>重命名一个列。 便于计算。紧跟列名，也可以在列名和别名之间加入关键字 ‘AS’，别名使用双引号，以便在别名中包含空 格或特殊的字符并区分大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select last_name as name, commission_pct comm</span><br><span class="line">from employees;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181702327.png" alt="image-20210817224341768" style="zoom: 67%;" /> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name &quot;Name&quot;, salary*12 &quot;Annual Salary&quot;</span><br><span class="line">FROM employees;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181702009.png" alt="image-20210817224607348" style="zoom: 50%;" /> </li></ol><p><strong>字符串</strong> </p><p> 字符串可以是 SELECT 列表中的一个字符,数字,日期。 </p><p> 日期和字符只能在单引号中出现。</p><p>每当返回一行时，字符串被输出一次</p><p><strong>显示表结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESCRIBE employees;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172250194.png" alt="image-20210817225013421"></p><h4 id="2-过滤和排序数据"><a href="#2-过滤和排序数据" class="headerlink" title="2. 过滤和排序数据"></a>2. 过滤和排序数据</h4><h5 id="2-1-过滤"><a href="#2-1-过滤" class="headerlink" title="2.1 过滤"></a>2.1 过滤</h5><p>使用where子句，将不满足条件的行过滤掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT *|&#123;[DISTINCT] column|expression [alias],...&#125;</span><br><span class="line">FROM table</span><br><span class="line">[WHERE condition(s)];</span><br></pre></td></tr></table></figure><p>WHERE 子句紧随 FROM 子句</p><p>返回在90号部门工作的所有员工的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select employee_id,last_name,job_id,department_id</span><br><span class="line">from employees</span><br><span class="line">where department_id &#x3D; 90;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172254393.png" alt="image-20210817225405029"></p><h6 id="2-1-1-比较运算符"><a href="#2-1-1-比较运算符" class="headerlink" title="2.1.1 比较运算符"></a>2.1.1 比较运算符</h6><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>=</td><td>等于 (不是 ==)</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于、等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&lt;&gt;</td><td>不等于（也可以是!=)</td></tr></tbody></table><p>查询薪资在3000以下的员工的姓氏和薪资</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT last_name, salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary &lt;&#x3D; 3000;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181702407.png" alt="image-20210817225941018" style="zoom:50%;" /> <h6 id="2-1-2-1其他比较运算符"><a href="#2-1-2-1其他比较运算符" class="headerlink" title="2.1.2 1其他比较运算符"></a>2.1.2 1其他比较运算符</h6><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>BETWEEN …AND…</td><td>在两个值之间 (包含边界)</td></tr><tr><td>IN(set)</td><td>等于值列表中的一个</td></tr><tr><td>LIKE</td><td>模糊查询</td></tr><tr><td>IS NULL</td><td>空值</td></tr></tbody></table><ol><li><p>使用BETWEEN AND运算来显示在一个区间内的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name,salary</span><br><span class="line">from employees</span><br><span class="line">where salary between 2500 and 3500;</span><br></pre></td></tr></table></figure></li></ol><p>​          <img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181702778.png" alt="image-20210818101509030" style="zoom: 50%;" /></p><ol start="2"><li><p>使用IN运算显示列表中的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select employee_id,last_name,salary,manager_id</span><br><span class="line">from employees</span><br><span class="line">where manager_id in (100,101,201);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181021440.png" alt="image-20210818102130760"></p></li><li><p>使用LIKE运算选择类似的值</p><p>选择条件可以包含字符或数字：</p><ul><li>%代表零个或多个字符（任意个字符）</li><li>_代表一个字符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select first_name</span><br><span class="line">from employees</span><br><span class="line">where first_name like &#39;S%&#39;;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181702056.png" alt="image-20210818102756282" style="zoom:50%;" /> </li><li><p>使用IS(NOT)NULL判断空值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name,manager_id</span><br><span class="line">from employees</span><br><span class="line">where manager_id is null;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181702584.png" alt="image-20210818104508246" style="zoom: 50%;" /> </li></ol><h6 id="2-1-3-逻辑运算"><a href="#2-1-3-逻辑运算" class="headerlink" title="2.1.3 逻辑运算"></a>2.1.3 逻辑运算</h6><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>AND</td><td>逻辑与</td></tr><tr><td>OR</td><td>逻辑或</td></tr><tr><td>NOT</td><td>逻辑否</td></tr></tbody></table><ol><li><p>AND要求并的关系为真</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select employee_id,last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary &gt;&#x3D; 1000</span><br><span class="line">and job_id like &#39;%MAN%&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181052461.png" alt="image-20210818105203409"></p></li><li><p>OR要求或关系为真</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select employee_id,last_name,job_id,salary</span><br><span class="line">from employees</span><br><span class="line">where salary &gt;&#x3D; 10000</span><br><span class="line">or job_id like &#39;%MAN%&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181104628.png" alt="image-20210818110427489"></p></li><li><p>NOT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select last_name,job_id</span><br><span class="line">from employees</span><br><span class="line">where job_id</span><br><span class="line">not in (&#39;IT_PROG&#39;,&#39;ST_CLERK&#39;,&#39;SA_REP&#39;);</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181702141.png" alt="image-20210818110731163" style="zoom:50%;" /> </li></ol><h6 id="2-1-4-ORDER-BY子句"><a href="#2-1-4-ORDER-BY子句" class="headerlink" title="2.1.4 ORDER BY子句"></a>2.1.4 ORDER BY子句</h6><p>使用ORDER BY子句排序</p><ul><li>ASC(ascend)：升序</li><li>DESC(descend)：降序</li><li>ORDER BY子句在SELECT语句的结尾</li></ul><ol><li><p>默认使用升序排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name,job_id,department_id,heirdate</span><br><span class="line">from employees</span><br><span class="line">order by hiredate;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181114297.png" alt="image-20210818111440587"></p></li><li><p>使用降序排列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name,job_id,department_id,hiredate</span><br><span class="line">from employees</span><br><span class="line">order by hiredate desc;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181126715.png" alt="image-20210818112612280"></p></li><li><p>按别名排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select employee_id,last_name,salary*12 &#39;annual salary&#39;</span><br><span class="line">from employees</span><br><span class="line">order by &#39;annual salary&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181132667.png" alt="image-20210818113244031"></p></li><li><p>按照ORDER BY列表的顺序排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name,department_id,salary</span><br><span class="line">from employees</span><br><span class="line">order by department_id,salary desc;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181136217.png" alt="image-20210818113616110"></p><p>可以使用不在SELECT列表里中的列排序</p></li></ol><h4 id="3-分组函数"><a href="#3-分组函数" class="headerlink" title="3. 分组函数"></a>3. 分组函数</h4><h5 id="3-1-什么是分组函数"><a href="#3-1-什么是分组函数" class="headerlink" title="3.1 什么是分组函数"></a>3.1 什么是分组函数</h5><p>分组函数作用于一组数据，并对一组数据返回一个值</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181142674.png" alt="image-20210818114256311"></p><h5 id="3-2-组函数类型"><a href="#3-2-组函数类型" class="headerlink" title="3.2 组函数类型"></a>3.2 组函数类型</h5><ul><li>AVG()</li><li>COUNT()</li><li>MAX()</li><li>MIN()</li><li>SUM()</li></ul><h5 id="3-3-组函数语法"><a href="#3-3-组函数语法" class="headerlink" title="3.3 组函数语法"></a>3.3 组函数语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT [column,] group_function(column), ...</span><br><span class="line">FROM table</span><br><span class="line">[WHERE condition]</span><br><span class="line">[GROUP BY column]</span><br><span class="line">[ORDER BY column];</span><br></pre></td></tr></table></figure><ol><li><p>AVG(平均值)、MIN(最小值)、 MAX(最大值)、SUM(合计)函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select avg(salary),max(salary),min(salary),sum(salary)</span><br><span class="line">from employees</span><br><span class="line">where job_id like &#39;%REP%&#39;;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181701771.png" alt="image-20210818114856880"></p></li><li><p>COUNT(*)返回表中记录总数，适用于任意数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(*)</span><br><span class="line">from employees</span><br><span class="line">where department_id &#x3D; 50;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181701166.png" alt="image-20210818115408365" style="zoom:50%;" /> <p>COUNT(expr)返回expr不为空的记录总数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name,count(commission_pct)</span><br><span class="line">from employees</span><br><span class="line">where department_id &#x3D; 50;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181701531.png" alt="image-20210818115815622" style="zoom:50%;" /> </li></ol><h5 id="3-4-分组数据"><a href="#3-4-分组数据" class="headerlink" title="3.4 分组数据"></a>3.4 分组数据</h5><h6 id="3-4-1-单列分组"><a href="#3-4-1-单列分组" class="headerlink" title="3.4.1 单列分组"></a>3.4.1 单列分组</h6><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181159664.png" alt="image-20210818115909354"></p><p>GROUP BY子句语法，可以使用GROUP BY子句将表中的数据分成若干组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT column, group_function(column)</span><br><span class="line">FROM table</span><br><span class="line">[WHERE condition]</span><br><span class="line">[GROUP BY group_by_expression]</span><br><span class="line">[ORDER BY column];</span><br></pre></td></tr></table></figure><p>明确：WHERE一定放在FROM后面</p><ol><li><p>在SELECT 列表中所有未包含在组函数中的列都应该包含 在 GROUP BY 子句中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select department_id,AVG(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181701632.png" alt="image-20210818120451894" style="zoom:50%;" /> </li><li><p>包含在GROUP BY子句中的列不必包含在SELECT列表中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select avg(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181701071.png" alt="image-20210818121325998" style="zoom:50%;" /> </li></ol><h6 id="3-4-2-多列分组"><a href="#3-4-2-多列分组" class="headerlink" title="3.4.2 多列分组"></a>3.4.2 多列分组</h6><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181215576.png" alt="image-20210818121522543"></p><ol><li><p>在GROUP BY子句中包含多个列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select department_id,dept_id,job_id,sum(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id,job_id;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181223117.png" alt="image-20210818122333093" style="zoom:50%;" /> </li></ol><h6 id="3-4-3-过滤分组"><a href="#3-4-3-过滤分组" class="headerlink" title="3.4.3 过滤分组"></a>3.4.3 过滤分组</h6><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181545183.png" alt="image-20210818154507053"></p><p>使用HAVING过滤分组</p><ol><li><p>行已经被分组</p></li><li><p>使用了组函数</p></li><li><p>满足HAVING子句中条件的分组将被显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT column, group_function</span><br><span class="line">FROM table</span><br><span class="line">[WHERE condition]</span><br><span class="line">[GROUP BY group_by_expression]</span><br><span class="line">[HAVING group_condition]</span><br><span class="line">[ORDER BY column];</span><br></pre></td></tr></table></figure></li><li><p>HAVING子句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select department_id,MAX(salary)</span><br><span class="line">from employees</span><br><span class="line">group by department_id</span><br><span class="line">having max(salary)&gt;10000;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181701982.png" alt="image-20210818155219393" style="zoom:50%;" /> </li></ol><h6 id="3-4-4-SELECT语句执行顺序"><a href="#3-4-4-SELECT语句执行顺序" class="headerlink" title="3.4.4 SELECT语句执行顺序"></a>3.4.4 <a href="https://www.cnblogs.com/warehouse/p/9410599.html">SELECT语句执行顺序</a></h6><p>having子句与where都是设定条件筛选的语句，有相似之处也有区别。</p><p>having与where的区别:<br>having是在分组后对数据进行过滤<br>where是在分组前对数据进行过滤<br>having后面可以使用聚合函数<br>where后面不可以使用聚合</p><p>在查询过程中执行顺序：from&gt;where&gt;group（含聚合）&gt;having&gt;order&gt;select。</p><p>所以聚合语句(sum,min,max,avg,count)要比having子句优先执行，而where子句在查询过程中执行优先级别优先于聚合语句(sum,min,max,avg,count)。<br>where子句：<br>select sum(num) as rmb from order where id&gt;10<br>//只有先查询出id大于10的记录才能进行聚合语句</p><p>having子句:<br>select reports， count(<em>)  from employees group by reports having count(</em>) &gt; 4<br>上例having条件表达示为聚合语句，肯定的说having子句查询过程执行优先级别低于聚合语句。<br>再换句说话说把上面的having换成where则会出错，统计分组数据时用到聚合语句。<br>对分组数据再次判断时要用having。如果不用这些关系就不存在使用having。直接使用where就行了。<br>having就是来弥补where在分组数据判断时的不足。因为where执行优先级别要快于聚合语句。</p><p>聚合函数：<br>例如SUM, COUNT, MAX, AVG等。这些函数和其它函数的根本区别就是它们一般作用在多条记录上。</p><p>HAVING子句可以让我们直接筛选成组后的各组数据，也可以在聚合后对组记录进行筛选，而WHERE子句在聚合前先筛选记录，也就是说作用在GROUP BY 子句和HAVING子句前。</p><h6 id="3-4-5-非法使用组函数"><a href="#3-4-5-非法使用组函数" class="headerlink" title="3.4.5 非法使用组函数"></a>3.4.5 非法使用组函数</h6><p>不能在WHERE子句中使用组函数</p><p>可以在HAVING子句中使用组函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT department_id, AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE AVG(salary) &gt; 8000</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WHERE AVG(salary) &gt; 8000</span><br><span class="line">*</span><br><span class="line">ERROR at line 3:</span><br><span class="line">ORA-00934: group function is not allowed here</span><br></pre></td></tr></table></figure><h4 id="4-多表查询"><a href="#4-多表查询" class="headerlink" title="4. 多表查询"></a>4. 多表查询</h4><p>两表做笛卡尔积</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181700156.png" alt="image-20210818165345140" style="zoom:45.5%;" />  <img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201748927.png" alt="image-20210819115650359" style="zoom:50%;" /> <h5 id="4-1-多表连接"><a href="#4-1-多表连接" class="headerlink" title="4.1 多表连接"></a>4.1 多表连接</h5><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select name,boyName </span><br><span class="line">from beauty,boys;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181700756.png" alt="image-20210818161943007" style="zoom:50%;" /> <h5 id="4-2-笛卡尔集"><a href="#4-2-笛卡尔集" class="headerlink" title="4.2 笛卡尔集"></a>4.2 笛卡尔集</h5><p>笛卡尔集会在下面的条件下产生</p><p>①省略连接条件；②连接条件无效；③所有表中的所有行互相链接</p><p>为了避免笛卡尔集，可以在WHERE加入有效的连接条件</p><h5 id="4-3-MySQL连接"><a href="#4-3-MySQL连接" class="headerlink" title="4.3 MySQL连接"></a>4.3 MySQL连接</h5><p>使用连接在多个表中查询数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT table1.column, table2.column</span><br><span class="line">FROM table1, table2</span><br><span class="line">WHERE table1.column1 &#x3D; table2.column2;</span><br></pre></td></tr></table></figure><p>在 WHERE 子句中写入连接条件。 在表中有相同列时，在列名之前加上表名前缀</p><ol><li><p>等值连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select beauty.id,name,boyName</span><br><span class="line">from beauty,boys</span><br><span class="line">where beauty.boyfriend_id&#x3D;boys.id;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181700310.png" alt="image-20210818165426323" style="zoom:50%;" /> <p>区分重复的列名：使用表名前缀在多个表中区分相同的列，在不同表中具有相同列名的列可以用表的别名加以区分，如果使用了表别名，则在select语句中需要使用表别名代替表名，表别名最多支持32个字符长度，但建议越少越好</p></li><li><p>表的别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select bt.id,name,boyName</span><br><span class="line">from beauty bt, boys b</span><br><span class="line">where bt.boyfriend_id&#x3D;b.id;</span><br></pre></td></tr></table></figure><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181700310.png" alt="image-20210818165426323" style="zoom:50%;" /> </li></ol><h5 id="4-4-连接多个表"><a href="#4-4-连接多个表" class="headerlink" title="4.4 连接多个表"></a>4.4 连接多个表</h5><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181704125.png" alt="image-20210818170424732"></p><p>连接 n个表,至少需要 n-1个连接条件。 例如：连接 三个表，至少需要两个连接条件。</p><ol><li><p>查询出公司员工的 last_name, department_name, city</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select last_name,department_name,city</span><br><span class="line">from employees,departments,locations</span><br><span class="line">where employees.department_id &#x3D; departments.department_id </span><br><span class="line">and departments.location_id &#x3D; locations.location_id;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181710569.png" alt="image-20210818171002376"></p></li></ol><h5 id="4-5-使用ON子句创建连接"><a href="#4-5-使用ON子句创建连接" class="headerlink" title="4.5 使用ON子句创建连接"></a>4.5 使用ON子句创建连接</h5><p>自然连接中是以具有相同名字的列为连接条件的，可以使用ON子句指定额外的连接条件，这个连接条件是与其他条件分开的，ON子句使语句具有更高的易读性</p><h6 id="4-5-1-JOIN连接"><a href="#4-5-1-JOIN连接" class="headerlink" title="4.5.1 JOIN连接"></a>4.5.1 JOIN连接</h6><p><strong>分类：</strong></p><ul><li><p>内连接 [inner] join on</p><p>（典型的连接运算，使用像 = 或 &lt;&gt; 之类的比较运算符）。包括相等联接和自然联接。<u>内联接</u>使用比较运算符根据每个表<u>共有的列</u>的值匹配两个表中的行。例如，检索 students和courses表中学生标识号相同的所有行。</p></li><li><p>外连接</p><p>外联接可以是左向外连接、右向连接或完整外部连接。在 FROM子句中指定外联接时，可以由下列几组关键字中的一组指定： </p><ol><li><p>LEFT JOIN或LEFT OUTER JOIN   </p><p>左向外联接的结果集包括 LEFT OUTER子句中指定的左表的所有行，而不仅仅是联接列所匹配的行。如果左表的某行在右表中没有匹配行，则在相关联的结果集行中右表的所有选择列表列均为空值。</p></li><li><p>RIGHT JOIN 或 RIGHT OUTER JOIN   </p><p>右向外联接是左向外联接的反向联接。将返回右表的所有行。如果右表的某行在左表中没有匹配行，则将为左表返回空值。 </p></li><li><p>FULL JOIN 或 FULL OUTER JOIN</p><p>完整外部联接返回左表和右表中的所有行。当某行在另一个表中没有匹配行时，则另一个表的选择列表列包含空值。如果表之间有匹配行，则整个结果集行包含基表的数据值。</p></li></ol></li><li><p>交叉联接 </p><p>交叉联接返回左表中的所有行，左表中的每一行与右表中的所有行组合。交叉联接也称作笛卡尔积。 </p><p>FROM 子句中的表或视图可通过内联接或完整外部联接按任意顺序指定；但是，用左或右向外联接指定表或视图时，表或视图的顺序很重要。有关使用左或右向外联接排列表的更多信息，请参见使用外联接。</p></li></ul><p><strong>示例</strong></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191158985.png" alt="image-20210819115832571">  </p><ol><li><p>内连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select bt.*,boys.*</span><br><span class="line">from beauty bt inner join boys on bt.boyfriend_id &#x3D; boys.id;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191134586.png" alt="image-20210819113439230"></p></li><li><p>左连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select bt.*,boys.*</span><br><span class="line">from beauty bt left join boys on bt.boyfriend_id &#x3D; boys.id;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191137831.png" alt="image-20210819113745505"></p><p>左表独有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select bt.*,boys.*</span><br><span class="line">from beauty bt left join boys on bt.boyfriend_id &#x3D; boys.id</span><br><span class="line">where boys.id is null;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191205623.png" alt="image-20210819120507351"></p></li><li><p>右连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select bt.*,boys.*</span><br><span class="line">from beauty bt right join boys on bt.boyfriend_id &#x3D; boys.id;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191200995.png" alt="image-20210819120023490"></p><p>右表独有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select bt.*,boys.*</span><br><span class="line">from beauty bt right join boys on bt.boyfriend_id &#x3D; boys.id</span><br><span class="line">where bt.boyfriend_id is null;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191207304.png" alt="image-20210819120702172"></p></li><li><p>完全连接</p><p>oracle里面有full join,但是在mysql中没有full join。我们可以使用union来达到目的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select bt.* from beauty bt left join boys on bt.boyfriend_id &#x3D; boys.id</span><br><span class="line">union</span><br><span class="line">select bt.* from beauty bt right join boys on bt.boyfriend_id &#x3D; boys.id;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191201518.png" alt="image-20210819120133259"></p><p>并集去交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from beauty bt left join boys on bt.boyfriend_id &#x3D; boys.id</span><br><span class="line">where boys.id is null</span><br><span class="line">union</span><br><span class="line">select * from beauty bt right join boys on bt.boyfriend_id &#x3D; boys.id</span><br><span class="line">where bt.boyfriend_id is null;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108191212037.png" alt="image-20210819121248356"></p></li></ol><ul><li><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181731726.png" alt="image-20210818173141054"></li><li><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108181732947.png" alt="image-20210818173235317"></li></ul><h4 id="5-SELECT语句执行顺序"><a href="#5-SELECT语句执行顺序" class="headerlink" title="5. SELECT语句执行顺序"></a>5. <a href="https://www.cnblogs.com/warehouse/p/9410599.html">SELECT语句执行顺序</a></h4><p>查询操作是关系数据库中使用最为频繁的操作，也是构成其他SQL语句（如DELETE、UPDATE）的基础。我们知道，SQL 查询的大致语法结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(5)SELECT DISTINCT &lt;select_list&gt;                     </span><br><span class="line">(1)FROM &lt;left_table&gt; &lt;join_type&gt; JOIN &lt;right_table&gt; ON &lt;on_predicate&gt;</span><br><span class="line">(2)WHERE &lt;where_predicate&gt;</span><br><span class="line">(3)GROUP BY &lt;group_by_specification&gt;</span><br><span class="line">(4)HAVING &lt;having_predicate&gt;</span><br><span class="line">(6)ORDER BY &lt;order_by_list&gt;</span><br><span class="line">(7)LIMIT n, m</span><br></pre></td></tr></table></figure><p>这些步骤执行时，每个步骤都会产生一个虚拟表，该虚拟表被用作下一个步骤的输入。这些虚拟表对调用者（客户端应用程序或者外部查询）不可用。只是最后一步生成的表才会返回给调用者。如果没有在查询中指定某一子句，将跳过相应的步骤。</p><p>SELECT各个阶段分别干了什么：</p><h5 id="5-1-FROM阶段"><a href="#5-1-FROM阶段" class="headerlink" title="5.1 FROM阶段"></a>5.1 FROM阶段</h5><p>FROM阶段标识出查询的来源表，并处理表运算符。在涉及到联接运算的查询中（各种JOIN），主要有以下几个步骤：</p><ul><li><strong>求笛卡尔积</strong>。不论是什么类型的联接运算，首先都是执行交叉连接（CROSS JOIN），求笛卡儿积（Cartesian product），生成虚拟表VT1-J1。</li><li><strong>ON筛选器</strong>。 这个阶段对上个步骤生成的VT1-J1进行筛选，根据ON子句中出现的谓词进行筛选，让谓词取值为true的行通过了考验，插入到VT1-J2。</li><li><strong>添加外部行</strong>。如果指定了OUTER JOIN，如LEFT OUTERJOIN、RIGHT OUTER JOIN，还需要将VT1-J2中没有找到匹配的行，作为外部行添加到VT1-J2中，生成VT1-J3。如果FROM子句包含两个以上表，则对上一个连接生成的结果表VT1-J3和下一个表重复依次执行3个步骤，直到处理完所有的表为止。</li></ul><p>经过以上步骤，FROM阶段就完成了。</p><h5 id="5-2-WHERE阶段"><a href="#5-2-WHERE阶段" class="headerlink" title="5.2 WHERE阶段"></a>5.2 WHERE阶段</h5><p>WHERE阶段是根据<where_predicate>中条件对VT1中的行进行筛选，让条件成立的行才会插入到VT2中。<strong>此时数据还没有分组，所以不能在WHERE中出现对统计的过滤。</strong></p><h5 id="5-3-GROUP-BY阶段"><a href="#5-3-GROUP-BY阶段" class="headerlink" title="5.3 GROUP BY阶段"></a>5.3 GROUP BY阶段</h5><p>GROUP阶段按照指定的列名列表，将VT2中的行进行分组，生成VT3。最后每个分组只有一行。<strong>在GROUP BY阶段，数据库认为两个NULL值是相等的，因此会将NULL值分到同一个分组中。</strong></p><h5 id="5-4-HAVING阶段"><a href="#5-4-HAVING阶段" class="headerlink" title="5.4 HAVING阶段"></a>5.4 HAVING阶段</h5><p>该阶段根据HAVING子句中出现的谓词对VT3的分组进行筛选，并将符合条件的组插入到VT4中。<strong>COUNT(expr) 会返回expr不为NULL的行数，count(1)、count(*)会返回包括NULL值在内的所有数量。</strong></p><h5 id="5-5-SELECT阶段"><a href="#5-5-SELECT阶段" class="headerlink" title="5.5 SELECT阶段"></a>5.5 SELECT阶段</h5><p>这个阶段是投影的过程，处理SELECT子句提到的元素，产生VT5。这个步骤一般按下列顺序进行：</p><ul><li>计算SELECT列表中的表达式，生成VT5-1。</li><li>若有DISTINCT，则删除VT5-1中的重复行，生成VT5-2。</li></ul><h5 id="5-6-ORDER-BY阶段"><a href="#5-6-ORDER-BY阶段" class="headerlink" title="5.6 ORDER BY阶段"></a>5.6 ORDER BY阶段</h5><p>根据ORDER BY子句中指定的列明列表，对VT5-2中的行，进行排序，生成VT6。<strong>如果不指定排序，数据并非总是按照主键顺序进行排序的。NULL被视为最小值。</strong></p><h5 id="5-7-LIMIT阶段"><a href="#5-7-LIMIT阶段" class="headerlink" title="5.7 LIMIT阶段"></a>5.7 LIMIT阶段</h5><p>取出指定行的记录，产生虚拟表VT7，并返回给查询用户。<strong>LIMIT n, m的效率是十分低的，一般可以通过在WHERE条件中指定范围来优化 \</strong>WHERE** id &gt; ? limit 10。**</p>]]></content>
    
    
    <summary type="html">数据查询</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(01)—安装与使用</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(01)%E2%80%94%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(01)%E2%80%94%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2021-09-16T17:27:14.997Z</published>
    <updated>2021-08-20T09:47:23.620Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h3><p><strong>图解MySQL程序结构</strong></p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171027291.png" alt="image-20210817100754276" style="zoom:50%;" /><h4 id="1-MySQL数据库产品的介绍"><a href="#1-MySQL数据库产品的介绍" class="headerlink" title="1. MySQL数据库产品的介绍"></a>1. MySQL数据库产品的介绍</h4><h5 id="1-1-MySQL产品的特点"><a href="#1-1-MySQL产品的特点" class="headerlink" title="1.1 MySQL产品的特点"></a>1.1 MySQL产品的特点</h5><ul><li><p>MySQL数据库隶属于MySQL AB公司，总部位于瑞典，后被Oracle收购。</p></li><li><p>优点： </p><p>– 成本低：开放源代码，一般可以免费试用 </p><p>– 性能高：执行很快 </p><p>– 简单：很容易安装和使用</p></li></ul><h4 id="2-MySQL数据库的安装"><a href="#2-MySQL数据库的安装" class="headerlink" title="2. MySQL数据库的安装"></a>2. MySQL数据库的安装</h4><ul><li><p>DBMS分为两类： </p><p>– 基于共享文件系统的DBMS （Access ） </p><p>– 基于客户机——服务器的DBMS （MySQL、Oracle、SqlServer）</p></li><li><p>MySQL的版本</p><ul><li><p>社区版（免费）</p></li><li><p>企业版（收费）</p><p>Windows平台下下载：<a href="http://dev.mysql.com/downloads/mysql">http://dev.mysql.com/downloads/mysql</a></p></li></ul></li></ul><h5 id="2-1下载"><a href="#2-1下载" class="headerlink" title="2.1下载"></a>2.1下载</h5><p>Windows安装程序MySQL Installer MSI。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171030928.png" alt="image-20210817103058472"></p><p>下载离线安装版（文件大的那个）。需要注意的是，这里的32-bit是指安装程序Installer是32位，并非指下载的MySQL是32位，实际上MySQL会适应系统位数。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171029732.png" alt="image-20210817102936648"></p><p>点击**”No thanks, just start my download”**开始下载。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171028108.png" alt="image-20210817102826741"></p><h5 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h5><p>下载完成之后双击安装，可以选择自定义安装。</p><p> <img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171017712.png" alt="img"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171048497.png" alt="image-20210817104842064"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171050085.png" alt="image-20210817104958534"></p><p>我一般安装以下两个就够。具体情况请根据你的实际需求。</p><p>MySQL Server 8.0.26 - X64：服务器</p><p>MySQL Workench 8.0.26 - X64：数据可视化管理工具</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171104207.png" alt="image-20210817110434593"></p><p>一路执行或下一步。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171107298.png" alt="image-20210817110700697"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171108111.png" alt="image-20210817110839698"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171109803.png" alt="image-20210817110919637"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171110503.png" alt="image-20210817111049201"></p><p>这一步要注意，最好选择传统密码验证方式，否则使用第三方数据库管理软件在连接时会报错。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171111872.png" alt="image-20210817111151168"></p><p>密码很重要，本人设置密码与锁屏密码一致，便于记忆</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171137068.png" alt="image-20210817113736168"></p><p>Windows Service Name: Windows托管服务名，用于停止、启动</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171139109.png" alt="image-20210817113910167"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171141021.png" alt="image-20210817114145727"></p><p> <img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171142899.png" alt="image-20210817114218504"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171142563.png" alt="image-20210817114243171"></p><p> <img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171143976.png" alt="image-20210817114306719"></p><p>添加MySQL系统环境变量。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171145920.png" alt="image-20210817114532726"></p><p>到此，安装完成！ </p><h5 id="2-3-验证登陆"><a href="#2-3-验证登陆" class="headerlink" title="2.3 验证登陆"></a>2.3 验证登陆</h5><p>打开管理员CMD，输入密码。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171149249.png" alt="image-20210817114954715"></p><h5 id="2-4-使用workbench可视化工具"><a href="#2-4-使用workbench可视化工具" class="headerlink" title="2.4 使用workbench可视化工具"></a>2.4 使用workbench可视化工具</h5><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171151817.png" alt="image-20210817115112191"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171152038.png" alt="image-20210817115234402"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171153321.png" alt="image-20210817115345133"></p><h5 id="2-5-更改MySQL数据存储路径的方法"><a href="#2-5-更改MySQL数据存储路径的方法" class="headerlink" title="2.5 更改MySQL数据存储路径的方法"></a>2.5 更改MySQL数据存储路径的方法</h5><p><strong>先停止mysql服务</strong></p><p>(1)停止服务，管理员进入cmd &gt;net stop MySQL (mysql的服务名：查找方法：右键我的电脑–&gt;管理–&gt;服务，然后找到mysql的服务名即可)；</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171158804.png" alt="image-20210817115856877"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171201941.png" alt="image-20210817120106794"></p><p>(2)将mysql安装路径下的data目录下的文件（通常是C:\ProgramData\MySQL\MySQL Server\Data）拷贝到自己想要储存的路径如：datadir=C:\Files\MySQLData；</p><p>(3)修改”my.ini”配置文件，记事本打开找到Datadir的部分 </p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171203012.png" alt="image-20210817120357477"></p><p>修改为： </p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171225736.png" alt="image-20210817122546594"></p><p>datadir=C:/Files/MySQLData\Data【备注：这里是”/”而不是”\”，一般的配置文件都这样】</p><p>(4)重启mysql服务验证一下是否成功，管理员进入cmd &gt;net start MySQL80</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171226682.png" alt="image-20210817122630329"></p><p>接着进入mysql创建一个数据库看一下</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171234450.png" alt="image-20210817123421886"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171234290.png" alt="image-20210817123447043"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;mysql –u root –p</span><br><span class="line">&gt;输入密码</span><br><span class="line">&gt;create database xiong;</span><br></pre></td></tr></table></figure><p>可以看到原先的data目录没有生成”xiong”的database，而在我们新建的mysqlData路径目录下多了”xiong”的database。更改到此完毕。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171235349.png" alt="image-20210817123519140"></p><h5 id="2-6MySQL卸载"><a href="#2-6MySQL卸载" class="headerlink" title="2.6MySQL卸载"></a>2.6MySQL卸载</h5><h6 id="（1）先停止服务"><a href="#（1）先停止服务" class="headerlink" title="（1）先停止服务"></a>（1）先停止服务</h6><p>服务器名是你安装时写的Windows服务名。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171237110.png" alt="image-20210817123717794"></p><h6 id="（2）1-使用安装程序Installer卸载"><a href="#（2）1-使用安装程序Installer卸载" class="headerlink" title="（2）1.使用安装程序Installer卸载"></a>（2）1.使用安装程序Installer卸载</h6><p>安装程序不仅用来安装MySQL（可安装多个不同版本的MySQL服务），还可以用来修复及卸载MySQL。使用它卸载的好处就是能卸载干净，卸载不干净再重装很可能会出问题！</p><p>点击Remove</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171239379.png" alt="image-20210817123906965"></p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108171239001.png" alt="image-20210817123947729"></p><p> 完成卸载，重启计算机。</p><h6 id="（2）2-使用命令卸载"><a href="#（2）2-使用命令卸载" class="headerlink" title="（2）2.使用命令卸载"></a>（2）2.使用命令卸载</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql　　　　　　# 停服务</span><br><span class="line">mysqld remove mysql　　　# 卸载服务</span><br></pre></td></tr></table></figure><h5 id="2-7-启动和停止MySQL服务"><a href="#2-7-启动和停止MySQL服务" class="headerlink" title="2.7. 启动和停止MySQL服务"></a>2.7. 启动和停止MySQL服务</h5><ul><li><p>方式一：通过计算机管理方式</p><p>右击计算机—管理—服务—启动或停止MySQL服务</p></li><li><p>方式二：通过命令行方式</p><p>启动：net start mysql服务名</p><p>停止：net stop mysql服务名</p></li></ul><h5 id="2-8-MySQL服务端的登录和退出"><a href="#2-8-MySQL服务端的登录和退出" class="headerlink" title="2.8 MySQL服务端的登录和退出"></a>2.8 MySQL服务端的登录和退出</h5><ul><li><p>登录</p><p>mysql -h 主机名 -u 用户名 -p 密码</p></li><li><p>退出</p><p>exit</p></li></ul><h4 id="3-MySQL数据库的使用"><a href="#3-MySQL数据库的使用" class="headerlink" title="3. MySQL数据库的使用"></a>3. MySQL数据库的使用</h4><h5 id="3-1-MySQL语法规范"><a href="#3-1-MySQL语法规范" class="headerlink" title="3.1 MySQL语法规范"></a>3.1 MySQL语法规范</h5><ul><li>不区分大小写</li><li>每句话用;或\g结尾</li><li>各子句一般分行写</li><li>关键字不能缩写也不能分行</li><li>用缩进提高语句的可读性</li><li>注释<ul><li>单行注释 ：#注释文字</li><li>单行注释：– 注释文字</li><li>多行注释：/*注释文字*/</li></ul></li></ul><ol><li><p>进入mysql，在命令行中输入：mysql -uroot -p ####(其中：####表示密码)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">xiong@SURFACE-PRO6 C:\Users\xiong</span><br><span class="line"># net start MySQL80</span><br><span class="line">MySQL80 服务正在启动 .</span><br><span class="line">MySQL80 服务已经启动成功。</span><br><span class="line"></span><br><span class="line">xiong@SURFACE-PRO6 C:\Users\xiong</span><br><span class="line"># mysql -h localhost -P 3306 -u root -p</span><br><span class="line">Enter password: ******</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.26 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and&#x2F;or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>新建一个数据库：<code>create database 数据库名;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create xiong;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br></pre></td></tr></table></figure></li><li><p>查看mysql中有哪些个数据库：<code>show databases;</code></p><p>xiong为自己建立的数据库，其他几个数据库为mysql自带的样例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| xiong              |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用一个数据库：<code>use数据库名称;</code></p><p>使用“xiong”数据库，显示 Database changed</p><ol><li><p>使用<code>show tables;</code>，查看数据库表中的内容，显示为Empty set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use xiong                                                                  </span><br><span class="line">Database changed                                                                    </span><br><span class="line">mysql&gt; show tables                                                                  </span><br><span class="line">    -&gt; ;                                                                            </span><br><span class="line">Empty set (0.01 sec)                                                                </span><br></pre></td></tr></table></figure></li><li><p>查看当前所处的数据库：<code>select database();</code></p><p>显示处在“xiong”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select database();</span><br><span class="line">+------------+</span><br><span class="line">| database() |</span><br><span class="line">+------------+</span><br><span class="line">| xiong      |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>在“xiong”里查看“mysql”数据库</p><p><code>show tables from 数据库名;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables from mysql;</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">| Tables_in_mysql                                      |</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">| columns_priv                                         |</span><br><span class="line">| component                                            |</span><br><span class="line">| db                                                   |</span><br><span class="line">| default_roles                                        |</span><br><span class="line">| engine_cost                                          |</span><br><span class="line">| func                                                 |</span><br><span class="line">| general_log                                          |</span><br><span class="line">| global_grants                                        |</span><br><span class="line">| gtid_executed                                        |</span><br><span class="line">| help_category                                        |</span><br><span class="line">| help_keyword                                         |</span><br><span class="line">| help_relation                                        |</span><br><span class="line">| help_topic                                           |</span><br><span class="line">| innodb_index_stats                                   |</span><br><span class="line">| innodb_table_stats                                   |</span><br><span class="line">| password_history                                     |</span><br><span class="line">| plugin                                               |</span><br><span class="line">| procs_priv                                           |</span><br><span class="line">| proxies_priv                                         |</span><br><span class="line">| replication_asynchronous_connection_failover         |</span><br><span class="line">| replication_asynchronous_connection_failover_managed |</span><br><span class="line">| replication_group_configuration_version              |</span><br><span class="line">| replication_group_member_actions                     |</span><br><span class="line">| role_edges                                           |</span><br><span class="line">| server_cost                                          |</span><br><span class="line">| servers                                              |</span><br><span class="line">| slave_master_info                                    |</span><br><span class="line">| slave_relay_log_info                                 |</span><br><span class="line">| slave_worker_info                                    |</span><br><span class="line">| slow_log                                             |</span><br><span class="line">| tables_priv                                          |</span><br><span class="line">| time_zone                                            |</span><br><span class="line">| time_zone_leap_second                                |</span><br><span class="line">| time_zone_name                                       |</span><br><span class="line">| time_zone_transition                                 |</span><br><span class="line">| time_zone_transition_type                            |</span><br><span class="line">| user                                                 |</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">37 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在数据库中新建一个表：<code>create database 表名(列名 类型,...);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create table stuinfo(</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------+</span><br><span class="line">| Tables_in_xiong |</span><br><span class="line">+-----------------+</span><br><span class="line">| stuinfo         |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ol><li><p>查看表的结构 <code>desc 表名;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc stuinfo;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int         | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p>在表中添加数据<code>insert into 表名 values(属性1，属性2...) (属性1的值，属性2的值...);</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc stuinfo;</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field | Type        | Null | Key | Default | Extra |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int         | YES  |     | NULL    |       |</span><br><span class="line">| name  | varchar(20) | YES  |     | NULL    |       |</span><br><span class="line">+-------+-------------+------+-----+---------+-------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stuinfo (id, name) values(1001,&#39;小天才&#39;);</span><br><span class="line">Query OK, 1 row affected (0.11 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into stuinfo (id, name) values(1002,&quot;花江&quot;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stuinfo;</span><br><span class="line">+------+--------+</span><br><span class="line">| id   | name   |</span><br><span class="line">+------+--------+</span><br><span class="line">| 1001 | 小天才 |</span><br><span class="line">| 1002 | 花江   |</span><br><span class="line">+------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>修改表中数据 <code>update 表名 set 属性 = xxx where 限制条件;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update stuinfo</span><br><span class="line">    -&gt; set name &#x3D; &quot;天空龙&quot;</span><br><span class="line">    -&gt; where id &#x3D; 1002;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from stuinfo;</span><br><span class="line">+------+--------+</span><br><span class="line">| id   | name   |</span><br><span class="line">+------+--------+</span><br><span class="line">| 1001 | 小天才 |</span><br><span class="line">| 1002 | 天空龙 |</span><br><span class="line">+------+--------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>查看服务器版本：</p><ol><li><p>在mysql命令行下：<code>select version();</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select version();</span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 8.0.26    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p>在cmd下：<code>mysql --version</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xiong@SURFACE-PRO6 C:\Users\xiong</span><br><span class="line"># mysql --version</span><br><span class="line">mysql  Ver 8.0.26 for Win64 on x86_64 (MySQL Community Server - GPL)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h5 id="3-2-图形化数据库管理软件的使用"><a href="#3-2-图形化数据库管理软件的使用" class="headerlink" title="3.2 图形化数据库管理软件的使用"></a>3.2 图形化数据库管理软件的使用</h5><p>此处以DataGrip为例</p><p>1.新建项目</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172049413.png" alt="image-20210817204911546"></p><p>2.选择数据源</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172048910.png" alt="image-20210817204810167"></p><p>3.设置</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172046663.png" alt="image-20210817204608049"></p><p>4.连接成功</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172047820.png" alt="image-20210817204715308"></p><p>5.右键选中的数据库连接。选择Jump to Query Console，即可在控制台中书写sql语句了</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172109063.png" alt="image-20210817210942876"></p><p>6.添加多个数据库源：File –&gt; DataSource –&gt;选择数据源</p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108201746453.png" alt="image-20210817211336419" style="zoom:50%;" /> <p>点击 + 选择数据库类型，并新建连接</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108172114883.png" alt="image-20210817211437787"></p>]]></content>
    
    
    <summary type="html">安装与使用</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL(00)—数据库和SQL</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(00)%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CSQL/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/MySQL(00)%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8CSQL/</id>
    <published>2021-09-16T17:27:14.996Z</published>
    <updated>2021-08-17T02:06:56.607Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="数据库和SQL"><a href="#数据库和SQL" class="headerlink" title="数据库和SQL"></a>数据库和SQL</h3><h4 id="1-数据库的好处"><a href="#1-数据库的好处" class="headerlink" title="1. 数据库的好处"></a>1. 数据库的好处</h4><p>保存数据的容器：数组、集合、文件……</p><p>实现数据持久化，使用完整的管理系统统一管理，易于查询</p><h4 id="2-数据库概念"><a href="#2-数据库概念" class="headerlink" title="2. 数据库概念"></a>2. 数据库概念</h4><p><strong>DB：</strong></p><p>数据库(database)：存储数据的“仓库”。它保存了一系列有组织的数据</p><p><strong>DBMS：</strong></p><p>数据库管理系统(Database Management System)：数据库是通过DBMS创建和操作的容器</p><p><strong>SQL：</strong></p><p>结构化查询语言(Structure Query Language)：专门用来与数据库通信的语言</p><h4 id="3-数据库管理系统"><a href="#3-数据库管理系统" class="headerlink" title="3. 数据库管理系统"></a>3. 数据库管理系统</h4><p>常见的数据库管理系统：MySQL、Oracle、DB2、SqlServer等</p><h4 id="4-SQL语言概述"><a href="#4-SQL语言概述" class="headerlink" title="4. SQL语言概述"></a>4. SQL语言概述</h4><p>SQL的优点：</p><ol><li>不是某个特定数据库供应商专有的语言，几乎所有DBMS都支持SQL</li><li>简单易学</li><li>虽然简单，但实际上是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库操作。</li></ol><h4 id="5-SQL语言分类"><a href="#5-SQL语言分类" class="headerlink" title="5. SQL语言分类"></a>5. SQL语言分类</h4><ol><li>DML(Data Manipulation Languaage)：数据操纵语言，用于添加、删除、修改、查询数据库记录，并检查数据完整性</li><li>DDL(Data Definition Language)：数据定义语言，用于库和表的创建、修改、删除</li><li>DCL(Data Control Language)：数据控制语言，用于定义用户的访问权限和安全级别</li></ol><h5 id="5-1-DML"><a href="#5-1-DML" class="headerlink" title="5.1 DML"></a>5.1 DML</h5><p>DML用于查询与修改数据记录，包括如下SQL语句：</p><ul><li>INSERT：添加数据到数据库中</li><li>UPDATE：修改数据库中的数据</li><li>DELETE：删除数据库中的数据</li><li>SELECT：选择(查询)数据<ul><li>SELECT是SQL语言的基础，最为重要</li></ul></li></ul><h5 id="5-2-DDL"><a href="#5-2-DDL" class="headerlink" title="5.2 DDL"></a>5.2 DDL</h5><p>DDL用于定义数据库的结构，比如创建、修改或删除数据库对象，包括如下SQL语句：</p><ul><li>CREAT TABLE：创建数据库表</li><li>ALTER TABLE：更改表结构、添加、删除、修改列长度</li><li>DROP TABLE：删除表</li><li>CREATE INDEX：在表上建立索引</li><li>DROP INDEX：删除索引</li></ul><h5 id="5-3-DCL"><a href="#5-3-DCL" class="headerlink" title="5.3 DCL"></a>5.3 DCL</h5><p>DCL用来控制数据库的访问，包括如下SQL语句：</p><ul><li>GRANT：授予访问权限</li><li>REVOKE：撤销访问权限</li><li>COMMIT：提交事务处理</li><li>ROLLBACK：事务处理回退</li><li>SAVEPOINT：设置保存点</li><li>LOCK：对数据库的特定部分进行锁定</li></ul>]]></content>
    
    
    <summary type="html">数据库和SQL</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="MySQL" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>17-Java9-11新特性</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/17%E2%80%94Java9-11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/17%E2%80%94Java9-11%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-09-16T17:27:14.975Z</published>
    <updated>2021-08-16T14:18:22.661Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="17—Java9—11新特性"><a href="#17—Java9—11新特性" class="headerlink" title="17—Java9—11新特性"></a>17—Java9—11新特性</h3><h4 id="1-Java9的特性"><a href="#1-Java9的特性" class="headerlink" title="1. Java9的特性"></a>1. Java9的特性</h4><h5 id="1-1-JDK9的发布"><a href="#1-1-JDK9的发布" class="headerlink" title="1.1 JDK9的发布"></a>1.1 JDK9的发布</h5><p>经过4次跳票，历经曲折的Java 9 终于终于在2017年9月21日发布。从Java 9 这个版本开始，Java 的计划发布周期是 6 个月，下一个 Java 的主版 本将于 2018 年 3 月发布，命名为 Java 18.3，紧接着再过六个月将发布 Java  18.9。这意味着Java的更新从传统的以特性驱动的发布周期，转变为以时间驱动的 （6 个月为周期）发布模式，并逐步的将 Oracle JDK 原商业特性进行开源。针对企业客户的需求，Oracle 将以三年为周期发布长期支持版本（long term  support）。Java 9 提供了超过150项新功能特性，包括备受期待的模块化系统、可交互 的 REPL 工具：jshell，JDK 编译工具，Java 公共 API 和私有代码，以及安 全增强、扩展提升、性能管理改善等。可以说Java 9是一个庞大的系统工程， 完全做了一个整体改变。</p><h5 id="1-2-Java9中新特性"><a href="#1-2-Java9中新特性" class="headerlink" title="1.2 Java9中新特性"></a>1.2 Java9中新特性</h5><p>①模块化系统</p><p>②jShell命令</p><p>③多版本兼容jar包</p><p>④接口的私有方法</p><p>⑤钻石操作符的升级使用</p><p>⑥语法改进：try语句</p><p>⑦String存储结构变更</p><p>⑧便利的集合特性：of()</p><p>⑨增强的Stream API</p><p>⑩全新的HTTP客户端API</p><p>其他：javadoc的HTML 5支持、Javascript引擎升级：Nashorn、java的动态编译器</p><p><a href="https://docs.oracle.com/javase/9/whatsnew/toc.htm#JSNEW-GUID-C23AFD78-C777-460B-8ACE-58BE5EA681F6">官方提供的新特性列表</a></p><p><a href="http://openjdk.java.net/projects/jdk9/">JDK 9 (java.net)</a></p><p><a href="https://docs.oracle.com/javase/9/">Oracle JDK 9 Documentation</a></p><h5 id="1-3-JDK和JRE目录结构的改变"><a href="#1-3-JDK和JRE目录结构的改变" class="headerlink" title="1.3 JDK和JRE目录结构的改变"></a>1.3 JDK和JRE目录结构的改变</h5><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108080917519.png" alt="JDK_HOME(JDK8)" style="zoom: 33%;" /><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>bin目录</td><td>包括命令行开发和调试工具，如javac,jar和javadoc</td></tr><tr><td>include目录</td><td>包含在编译本地代码时使用的C/C++头文件</td></tr><tr><td>lib目录</td><td>包含JDK的几个JAR和其他类型的文件。他有一个tools.jar文件，其中包含javac编译器的Java类</td></tr><tr><td>jre/bin目录</td><td>包含基本命令，如java命令。在Windows平台上，他包含系统的运行时动态链接库(DLL)</td></tr><tr><td>jre/lib目录</td><td>包含用户可编辑的配置文件，如.properties和.policy文件。包含了几个JAR。rt.jar文件包含运行时的Java类和资源文件</td></tr></tbody></table><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108080941534.png" alt="JDK_HOME(JDK9)" style="zoom:33%;" /><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>bin目录</td><td>包含所有命令。 在Windows平台上，它继续包含系统的运行时动态链接库。</td></tr><tr><td>conf 目录</td><td>包含用户可编辑的配置文件，例如以前位于jre\lib目录中的.properties和.policy文件</td></tr><tr><td>include 目录</td><td>包含要在以前编译本地代码时使用的C/C++头文件。 它只存在于JDK中</td></tr><tr><td>jmods 目录</td><td>包含JMOD格式的平台模块。 创建自定义运行时映像时需要它。 它只存在于JDK中</td></tr><tr><td>legal 目录</td><td>包含法律声明</td></tr><tr><td>lib 目录</td><td>包含非Windows平台上的动态链接本地库。 其子目录和文件不应由开发人员直接编辑或使用</td></tr></tbody></table><h5 id="1-4-模块化系统：Jigsaw-gt-Modularity"><a href="#1-4-模块化系统：Jigsaw-gt-Modularity" class="headerlink" title="1.4 模块化系统：Jigsaw -&gt; Modularity"></a>1.4 模块化系统：Jigsaw -&gt; Modularity</h5><ul><li>谈到 Java 9 大家往往第一个想到的就是 Jigsaw 项目。众所周知，Java 已经发展超过 20 年（95 年最初发布），Java 和相关生态在不断丰富的同时也越 来越暴露出一些问题：<ul><li>Java 运行环境的膨胀和臃肿。每次JVM启动的时候，至少会有30～60MB的内存加载，主要原因是JVM需要加载rt.jar，不管其中的类是否被classloader加载，第 一步整个jar都会被JVM加载到内存当中去（而模块化可以根据模块的需要加载程 序运行需要的class）</li><li>当代码库越来越大，创建复杂，盘根错节的“意大利面条式代码”的几率呈指数级的 增长。不同版本的类库交叉依赖导致让人头疼的问题，这些都阻碍了 Java 开发和运行效率的提升。</li><li>很难真正地对代码进行封装, 而系统并没有对不同部分（也就是 JAR 文件）之间的依赖关系有个明确的概念。每一个公共类都可以被类路径之下任何其它的公共 类所访问到，这样就会导致无意中使用了并不想被公开访问的 API。</li></ul></li><li>本质上讲也就是说，用模块来管理各个package，通过声明某个package 暴露，，模块(module)的概念，其实就是package外再裹一层，不声明默 认就是隐藏。因此，模块化使得代码组织上更安全，因为它可以指定哪 些部分可以暴露，哪些部分隐藏。</li><li>实现目标<ul><li>模块化的主要目的在于减少内存的开销</li><li>只须必要模块，而非全部jdk模块，可简化各种类库和大型应用的开 发和维护</li><li>改进 Java SE 平台，使其可以适应不同大小的计算设备</li><li>改进其安全性，可维护性，提高性能</li></ul></li></ul><p>模块将由通常的类和新的模块声明文件（module-info.java）组成。该文件是位于 java代码结构的顶层，该模块描述符明确地定义了我们的模块需要什么依赖关系， 以及哪些模块被外部使用。在exports子句中未提及的所有包默认情况下将封装在 模块中，不能在外部使用。</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108080957522.png" alt="image-20210808095732377"></p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108080957918.png" alt="image-20210808095749411"></p><p>要想在java9demo模块中调用java9test模块下包中的结构，需要在java9test 的module-info.java中声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> java9test &#123;</span><br><span class="line"><span class="comment">//package we export</span></span><br><span class="line"><span class="keyword">exports</span> com.atguigui.bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>exports：控制着哪些包可以被其它模块访问到。所有不被导出的包默认 都被封装在模块里面。对应在java 9demo 模块的src 下创建module-info.java文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> java9demo &#123;</span><br><span class="line"><span class="keyword">requires</span> java9test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>requires：指明对其它模块的依赖。</p><h5 id="1-5-Java的REPL工具：jShell命令"><a href="#1-5-Java的REPL工具：jShell命令" class="headerlink" title="1.5 Java的REPL工具：jShell命令"></a>1.5 Java的REPL工具：jShell命令</h5><ul><li><p>产生背景</p><p>像Python 和 Scala 之类的语言早就有交互式编程环境 REPL (read - evaluate - print - loop)了，以交互式的方式对语句和表达式进行求值。开发者只需要输入一些代码， 就可以在编译前获得对程序的反馈。而之前的Java版本要想执行代码，必须创建文 件、声明类、提供测试方法方可实现。</p></li><li><p>设计理念</p><p>即写即得、快速运行</p></li><li><p>实现目标</p><ul><li>Java 9 中终于拥有了 REPL工具：jShell。让Java可以像脚本语言一样运行，从 控制台启动jShell，利用jShell在没有创建类的情况下直接声明变量，计算表达式， 执行语句。即开发时可以在命令行里直接运行Java的代码，而无需创建Java文 件，无需跟人解释”public static void main(String[] args)”这句废话。</li><li>jShell也可以从文件中加载语句或者将语句保存到文件中。</li><li>jShell也可以是tab键进行自动补全和自动添加分号。</li></ul></li><li><p>调出jShell、获取帮助</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081013971.png" alt="image-20210808101348839"></p></li><li><p>基本使用</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081043772.png" alt="image-20210808104328412"></p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081043200.png" alt="image-20210808104353880"></p></li><li><p>列出当前session里所有有效的代码片段</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081036316.png" alt="image-20210808103614357"></p></li><li><p>查看当前session下所有创建过的变量和方法</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081048714.png" alt="image-20210808104838265"></p></li><li><p>使用外部代码编辑器来编写Java代码</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081053467.png" alt="image-20210808105331336"></p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081050436.png" alt="image-20210808105026135" style="zoom: 67%;" /><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081053129.png" alt="image-20210808105301293" style="zoom:67%;" /></li><li><p>使用/open命令调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloGUET</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Hello,GUET!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelloGUET.main(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081104251.png" alt="image-20210808110426385"></p></li><li><p>没有受检异常</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081107445.png" alt="image-20210808110710663"></p><p>说明：本来应该强迫我们捕获一个IOException，但却没有出现。因为jShell在 后台为我们隐藏了。</p></li><li><p>退出jShell</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081108538.png" alt="image-20210808110759934"></p></li></ul><h5 id="1-6-语法改进："><a href="#1-6-语法改进：" class="headerlink" title="1.6 语法改进："></a>1.6 语法改进：</h5><p><strong>接口的私有方法</strong></p><p>Java 8中规定接口中的方法除了抽象方法之外，还可以定义静态方法 和默认的方法。一定程度上，扩展了接口的功能，此时的接口更像是 一个抽象类。</p><p>在Java 9中，接口更加的灵活和强大，连方法的访问权限修饰符都可 以声明为private的了，此时方法将不会成为你对外暴露的API的一部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">normalInterfaceMethod</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefault1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">default</span> <span class="keyword">void</span> <span class="title">methodDefault2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This method is not part of the public API exposed by MyInterface</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;默认方法中的通用操作&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalInterfaceMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;实现接口的方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyInterfaceImpl impl = <span class="keyword">new</span> MyInterfaceImpl();</span><br><span class="line">impl.methodDefault1();</span><br><span class="line"><span class="comment">// impl.init();//不能调用</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>钻石操作符升级使用</strong></p><p>我们能够与匿名实现类共同使用钻石操作符（diamond operator）在Java 8中如下的操作是会报错的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Comparator&lt;Object&gt; com = <span class="keyword">new</span> Comparator&lt;&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译报错信息：Cannot use “&lt;&gt;” with anonymous inner classes.</p><p>Java 9中如下操作可以正常执行通过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// anonymous classes can now use type inference</span></span><br><span class="line">Comparator&lt;Object&gt; com = <span class="keyword">new</span> Comparator&lt;&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>try语法</strong></p><p>Java 8 中，可以实现资源的自动关闭，但是要求执行后必须关闭的所有资源必 须在try子句中初始化，否则编译不通过。如下例所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(System.in))&#123;</span><br><span class="line"><span class="comment">//读取数据细节省略</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 9 中，用资源语句编写try将更容易，我们可以在try子句中使用已经初始 化过的资源，此时的资源是final的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(System.out);</span><br><span class="line"><span class="keyword">try</span> (reader; writer) &#123;</span><br><span class="line"><span class="comment">//reader是final的，不可再被赋值</span></span><br><span class="line"><span class="comment">//reader = null;</span></span><br><span class="line"><span class="comment">//具体读写操作省略</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-7-String存储结构变更"><a href="#1-7-String存储结构变更" class="headerlink" title="1.7 String存储结构变更"></a>1.7 String存储结构变更</h5><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081122668.png" alt="image-20210808112226517"></p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081125124.png" alt="image-20210808112513884"></p><h5 id="1-8-集合工厂方法：快速创建只读集合"><a href="#1-8-集合工厂方法：快速创建只读集合" class="headerlink" title="1.8 集合工厂方法：快速创建只读集合"></a>1.8 集合工厂方法：快速创建只读集合</h5><p>要创建一个只读、不可改变的集合，必须构造和分配它，然后添加元素，最后 包装成一个不可修改的集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; namesList = <span class="keyword">new</span> ArrayList &lt;&gt;();</span><br><span class="line">namesList.add(<span class="string">&quot;Joe&quot;</span>);</span><br><span class="line">namesList.add(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">namesList.add(<span class="string">&quot;Bill&quot;</span>);</span><br><span class="line">namesList = Collections.unmodifiableList(namesList);</span><br><span class="line">System.out.println(namesList);</span><br></pre></td></tr></table></figure><p>缺点：我们一下写了五行。即：它不能表达为单个表达式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Collections.unmodifiableList(Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>));</span><br><span class="line">Set&lt;String&gt; set = Collections.unmodifiableSet(<span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">&quot;a&quot;</span>, </span><br><span class="line"><span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)));</span><br><span class="line"><span class="comment">// 如下操作不适用于jdk 8 及之前版本,适用于jdk 9</span></span><br><span class="line">Map&lt;String, Integer&gt; map = Collections.unmodifiableMap(<span class="keyword">new</span> HashMap&lt;&gt;() &#123;</span><br><span class="line">&#123;</span><br><span class="line">put(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">put(<span class="string">&quot;b&quot;</span>, <span class="number">2</span>);</span><br><span class="line">put(<span class="string">&quot;c&quot;</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">map.forEach((k, v) -&gt; System.out.println(k + <span class="string">&quot;:&quot;</span> + v));</span><br></pre></td></tr></table></figure><p>Java 9因此引入了方便的方法，这使得类似的事情更容易表达。</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081131794.png" alt="image-20210808113143689"></p><p>List firsnamesList = List.of(“Joe”,”Bob”,”Bill”); 调用集合中静态方法of()，可以将不同数量的参数传输到此工厂方法中。此功能 可用于Set和List，也可用于Map的类似形式。此时得到的集合，是不可变的：在 创建后，继续添加元素到这些集合会导致 “UnsupportedOperationException” 。 由于Java 8中接口方法的实现，可以直接在List，Set和Map的接口内定义这些方法， 便于调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = List.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">Set&lt;String&gt; set = Set.of(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">Map&lt;String, Integer&gt; map1 = Map.of(<span class="string">&quot;Tom&quot;</span>, <span class="number">12</span>, <span class="string">&quot;Jerry&quot;</span>, <span class="number">21</span>, <span class="string">&quot;Lilei&quot;</span>, <span class="number">33</span>, </span><br><span class="line"><span class="string">&quot;HanMeimei&quot;</span>, <span class="number">18</span>);</span><br><span class="line">Map&lt;String, Integer&gt; map2 = Map.ofEntries(Map.entry(<span class="string">&quot;Tom&quot;</span>, <span class="number">89</span>), </span><br><span class="line">Map.entry(<span class="string">&quot;Jim&quot;</span>, <span class="number">78</span>), Map.entry(<span class="string">&quot;Tim&quot;</span>, <span class="number">98</span>));</span><br></pre></td></tr></table></figure><h5 id="1-9-InputStream加强"><a href="#1-9-InputStream加强" class="headerlink" title="1.9 InputStream加强"></a>1.9 InputStream加强</h5><p>InputStream 终于有了一个非常有用的方法：transferTo，可以用来将数据直接 传输到 OutputStream，这是在处理原始数据流时非常常见的一种用法，如下 示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader cl = <span class="keyword">this</span>.getClass().getClassLoader();</span><br><span class="line"><span class="keyword">try</span> (InputStream is = cl.getResourceAsStream(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;src\\hello1.txt&quot;</span>)) &#123;</span><br><span class="line">is.transferTo(os); <span class="comment">// 把输入流中的所有数据直接自动地复制到输出流中</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-10-增强的-Stream-API"><a href="#1-10-增强的-Stream-API" class="headerlink" title="1.10 增强的 Stream API"></a>1.10 增强的 Stream API</h5><ul><li>Java 的 Steam API 是java标准库最好的改进之一，让开发者能够快速运算， 从而能够有效的利用数据并行计算。Java 8 提供的 Steam 能够利用多核架构 实现声明式的数据处理。</li><li>在 Java 9 中，Stream API 变得更好，Stream 接口中添加了 4 个新的方法： takeWhile, dropWhile, ofNullable，还有个 iterate 方法的新重载方法，可以 让你提供一个 Predicate (判断条件)来指定什么时候结束迭代。</li><li>除了对 Stream 本身的扩展，Optional 和 Stream 之间的结合也得到了改进。 现在可以通过 Optional 的新方法 stream() 将一个 Optional 对象转换为一个 (可能是空的) Stream 对象。</li></ul><h6 id="takeWhile-的使用"><a href="#takeWhile-的使用" class="headerlink" title="takeWhile()的使用"></a><strong>takeWhile()的使用</strong></h6><p>用于从 Stream 中获取一部分数据，接收一个 Predicate 来进行选择。在有序的 Stream 中，takeWhile 返回从开头开始的尽量多的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">45</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">73</span>, <span class="number">67</span>, <span class="number">88</span>);</span><br><span class="line">list.stream().takeWhile(x -&gt; x &lt; <span class="number">50</span>).forEach(System.out::println);</span><br><span class="line">System.out.println();</span><br><span class="line">list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">list.stream().takeWhile(x -&gt; x &lt; <span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>dropWhile()的使用</strong></p><p>dropWhile 的行为与 takeWhile 相反，返回剩余的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">45</span>, <span class="number">43</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">73</span>, <span class="number">67</span>, <span class="number">88</span>);</span><br><span class="line">list.stream().dropWhile(x -&gt; x &lt; <span class="number">50</span>).forEach(System.out::println);</span><br><span class="line">System.out.println();</span><br><span class="line">list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">list.stream().dropWhile(x -&gt; x &lt; <span class="number">5</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><p><strong>ofNullable()的使用</strong></p><p>Java 8 中 Stream 不能完全为null，否则会报空指针异常。而 Java 9 中的 ofNullable 方 法允许我们创建一个单元素 Stream，可以包含一个非空元素，也可以创建一个空 Stream。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报NullPointerException</span></span><br><span class="line"><span class="comment">// Stream&lt;Object&gt; stream1 = Stream.of(null);</span></span><br><span class="line"><span class="comment">// System.out.println(stream1.count());</span></span><br><span class="line"><span class="comment">// 不报异常，允许通过</span></span><br><span class="line">Stream&lt;String&gt; stringStream = Stream.of(<span class="string">&quot;AA&quot;</span>, <span class="string">&quot;BB&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(stringStream.count());<span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 不报异常，允许通过</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">list.add(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(list.stream().count());<span class="comment">// 2</span></span><br><span class="line"><span class="comment">// ofNullable()：允许值为null</span></span><br><span class="line">Stream&lt;Object&gt; stream1 = Stream.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(stream1.count());<span class="comment">// 0</span></span><br><span class="line">Stream&lt;String&gt; stream = Stream.ofNullable(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">System.out.println(stream.count());<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>iterator()重载使用</strong></p><p>这个 iterate 方法的新重载方法，可以让你提供一个 Predicate (判断条件)来指定什 么时候结束迭代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来的控制终止方式：</span></span><br><span class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i + <span class="number">1</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">// 现在的终止方式：</span></span><br><span class="line">Stream.iterate(<span class="number">1</span>, i -&gt; i &lt; <span class="number">100</span>, i -&gt; i + <span class="number">1</span>).forEach(System.out::println);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Optional类中stream()的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;Tim&quot;</span>);</span><br><span class="line">Optional&lt;List&lt;String&gt;&gt; optional = Optional.ofNullable(list);</span><br><span class="line">Stream&lt;List&lt;String&gt;&gt; stream = optional.stream();</span><br><span class="line">stream.flatMap(x -&gt; x.stream()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h5 id="1-11-Javascript引擎升级：Nashorn"><a href="#1-11-Javascript引擎升级：Nashorn" class="headerlink" title="1.11 Javascript引擎升级：Nashorn"></a>1.11 Javascript引擎升级：Nashorn</h5><ul><li>Nashorn 项目在 JDK 9 中得到改进，它为 Java 提供轻量级的 Javascript 运行时。 Nashorn 项目跟随 Netscape 的 Rhino 项目，目的是为了在 Java 中实现一个高 性能但轻量级的 Javascript 运行时。Nashorn 项目使得 Java 应用能够嵌入 Javascript。它在 JDK 8 中为 Java 提供一个 Javascript 引擎。</li><li>JDK 9 包含一个用来解析 Nashorn 的 ECMAScript 语法树的 API。这个 API 使得 IDE 和服务端框架不需要依赖 Nashorn 项目的内部实现类，就能够分析 ECMAScript 代码。</li><li><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081148488.png" alt="image-20210808114855330"></li></ul><h4 id="2-Java10的新特性"><a href="#2-Java10的新特性" class="headerlink" title="2. Java10的新特性"></a>2. Java10的新特性</h4><p>2018年3月21日，Oracle官方宣布Java10正式发布。需要注意的是 Java 9 和 Java 10 都不是 LTS (Long-Term-Support) 版本。和 过去的 Java 大版本升级不同，这两个只有半年左右的开发和维护期。而未 来的 Java 11，也就是 18.9 LTS，才是 Java 8 之后第一个 LTS 版本。JDK10一共定义了109个新特性，其中包含12个JEP（对于程序员来讲，真 正的新特性其实就一个），还有一些新API和JVM规范以及JAVA语言规范上 的改动。JDK10的12个JEP（JDK Enhancement Proposal特性加强提议）参阅官方 文档：<a href="http://openjdk.java.net/projects/jdk/10/">http://openjdk.java.net/projects/jdk/10/</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">286</span>: Local-Variable Type Inference 局部变量类型推断</span><br><span class="line"><span class="number">296</span>: Consolidate the JDK Forest into a Single Repository JDK库的合并</span><br><span class="line"><span class="number">304</span>: Garbage-Collector Interface 统一的垃圾回收接口</span><br><span class="line"><span class="number">307</span>: Parallel Full GC <span class="keyword">for</span> G1 为G1提供并行的Full GC</span><br><span class="line"><span class="number">310</span>: Application Class-Data Sharing 应用程序类数据（AppCDS）共享</span><br><span class="line"><span class="number">312</span>: Thread-Local Handshakes ThreadLocal握手交互</span><br><span class="line"><span class="number">313</span>: Remove the Native-<span class="function">Header Generation <span class="title">Tool</span> <span class="params">(javah)</span> 移除JDK中附带的javah工具</span></span><br><span class="line"><span class="function">314: Additional Unicode Language-Tag Extensions 使用附加的Unicode语言标记扩展</span></span><br><span class="line"><span class="function">316: Heap Allocation on Alternative Memory Devices 能将堆内存占用分配给用户指定</span></span><br><span class="line"><span class="function">的备用内存设备</span></span><br><span class="line"><span class="function">317: Experimental Java-Based JIT Compiler 使用基于Java的JIT编译器</span></span><br><span class="line"><span class="function">319: Root Certificates 根证书</span></span><br><span class="line"><span class="function">322: Time-Based Release Versioning 基于时间的发布版本</span></span><br></pre></td></tr></table></figure><h5 id="2-1-局部变量类型推断"><a href="#2-1-局部变量类型推断" class="headerlink" title="2.1 局部变量类型推断"></a>2.1 局部变量类型推断</h5><ul><li><p>产生背景</p><p>开发者经常抱怨Java中引用代码的程度。局部变量的显示类型声明，常常被认为 是不必须的，给一个好听的名字经常可以很清楚的表达出下面应该怎样继续。</p></li><li><p>好处</p><p>减少了啰嗦和形式的代码，避免了信息冗余，而且对齐了变量名，更容易阅读！</p></li><li><p>举例如下：</p><ul><li><p>场景一：类实例化时</p><p>作为 Java开发者，在声明一个变量时，我们总是习惯了敲打两次变量类型，第 一次用于声明变量类型，第二次用于构造器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LinkedHashSet&lt;Integer&gt; set = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br></pre></td></tr></table></figure></li><li><p>场景二：返回值类型含复杂泛型结构</p><p>变量的声明类型书写复杂且较长，尤其是加上泛型的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;Integer, Student&gt;&gt; iterator = set.iterator();</span><br></pre></td></tr></table></figure></li><li><p>场景三：</p><p>我们也经常声明一种变量，它只会被使用一次，而且是用在下一行代码中， 比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://www.atguigu.com&quot;</span>);</span><br><span class="line">URLConnection connection = url.openConnection();</span><br><span class="line">Reader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span></span><br><span class="line">InputStreamReader(connection.getInputStream()));</span><br></pre></td></tr></table></figure><p>尽管 IDE可以帮我们自动完成这些代码，但当变量总是跳来跳去的时候，可读 性还是会受到影响，因为变量类型的名称由各种不同长度的字符组成。而且， 有时候开发人员会尽力避免声明中间变量，因为太多的类型声明只会分散注意 力，不会带来额外的好处。</p></li></ul></li></ul><p><strong>适用于以下情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.局部变量的初始化</span></span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//2.增强for循环中的索引</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> v : list) &#123;</span><br><span class="line">System.out.println(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.传统for循环中</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i++) &#123;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在局部变量中使用时，如下情况不适用</strong></p><p>初始值为null</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081156419.png" alt="image-20210808115641177"></p><p>Lambda表达式</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081157689.png" alt="image-20210808115720405"></p><p>方法引用</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081157245.png" alt="image-20210808115752683"></p><p>为静态数组初始化</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081158219.png" alt="image-20210808115845045"></p><p><strong>不适用于以下的结构中</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 情况1：没有初始化的局部变量声明</span><br><span class="line"> 情况2：方法的返回类型</span><br><span class="line"> 情况3：方法的参数类型</span><br><span class="line"> 情况4：构造器的参数类型</span><br><span class="line"> 情况5：属性</span><br><span class="line"> 情况6：catch块</span><br></pre></td></tr></table></figure><p><strong>工作原理</strong></p><p>在处理 var时，编译器先是查看表达式右边部分，并根据右边变量值的类型进行 推断，作为左边变量的类型，然后将该类型写入字节码当中。</p><p><strong>注意</strong></p><ul><li><p>var不是一个关键字</p><p>你不需要担心变量名或方法名会与 var发生冲突，因为 var实际上并不是一个关键字， 而是一个类型名，只有在编译器需要知道类型的地方才需要用到它。除此之外，它 就是一个普通合法的标识符。也就是说，除了不能用它作为类名，其他的都可以， 但极少人会用它作为类名。</p></li><li><p>这不是JavaScript</p><p>首先我要说明的是，var并不会改变Java是一门静态类型语言的事实。编译器负责推 断出类型，并把结果写入字节码文件，就好像是开发人员自己敲入类型一样。 下面是使用 IntelliJ（实际上是 Fernflower的反编译器）反编译器反编译出的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="keyword">new</span> URL(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = url.openConnection();</span><br><span class="line"><span class="keyword">var</span> reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line"><span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br></pre></td></tr></table></figure><p>反编译后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line">URLConnection connection = url.openConnection();</span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(</span><br><span class="line"><span class="keyword">new</span> InputStreamReader(connection.getInputStream()));</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>从代码来看，就好像之前已经声明了这些类型一样。事实上，这一特性只发 生在编译阶段，与运行时无关，所以对运行时的性能不会产生任何影响。所 以请放心，这不是 JavaScript。</p></blockquote></li></ul><h5 id="2-2-集合新增创建不可变集合的方法"><a href="#2-2-集合新增创建不可变集合的方法" class="headerlink" title="2.2 集合新增创建不可变集合的方法"></a>2.2 集合新增创建不可变集合的方法</h5><p>自 Java 9 开始，Jdk 里面为集合（List / Set / Map）都添加了 of (jdk9新增)和 copyOf (jdk10新增)方法，它们两个都用来创建不可变的集合，来看下它们的 使用和区别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例1：</span></span><br><span class="line"><span class="keyword">var</span> list1 = List.of(<span class="string">&quot;Java&quot;</span>, <span class="string">&quot;Python&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> copy1 = List.copyOf(list1);</span><br><span class="line">System.out.println(list1 == copy1); <span class="comment">// true</span></span><br><span class="line"><span class="comment">//示例2：</span></span><br><span class="line"><span class="keyword">var</span> list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">var</span> copy2 = List.copyOf(list2);</span><br><span class="line">System.out.println(list2 == copy2); <span class="comment">// false</span></span><br><span class="line"><span class="comment">//示例1和2代码基本一致，为什么一个为true,一个为false?</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从源码分析 ,可以看出 copyOf 方法会判断来源集合是不是 AbstractImmutableList 类型的，如果是，就直接返回，如果不是，则调用 of 创 建一个新的集合。 示例2因为用的 new 创建的集合，不属于不可变 AbstractImmutableList 类的子类， 所以 copyOf 方法又创建了一个新的实例，所以为false。 注意：使用of和copyOf创建的集合为不可变集合，不能进行添加、删除、替换、 排序等操作，不然会报 java.lang.UnsupportedOperationException 异常。 上面演示了 List 的 of 和 copyOf 方法，Set 和 Map 接口都有。</p><h4 id="3-Java11的新特性"><a href="#3-Java11的新特性" class="headerlink" title="3. Java11的新特性"></a>3. Java11的新特性</h4><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081204031.png" alt="image-20210808120416252"></p><p>JDK 11 将是一个 企业不可忽视的版本。从时间节点来看，JDK 11 的发布正 好处在 JDK 8 免费更新到期的前夕，同时 JDK 9、10 也陆续成为“历史版 本” ，下面是 Oracle JDK 支持路线图：</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081204464.png" alt="image-20210808120443550"></p><p><strong>JDK 11 是一个长期支持版本（LTS, Long-Term-Support）</strong></p><ul><li><p>对于企业来说，选择 11 将意味着长期的、可靠的、可预测的技术路线图。 其中免费的OpenJDK11 确定将得到 OpenJDK 社区的长期支持， LTS 版本将 是可以放心选择的版本。</p></li><li><p>从 JVM GC 的角度，JDK11 引入了两种新的 GC，其中包括也许是划时代意义 的 ZGC，虽然其目前还是实验特性，但是从能力上来看，这是 JDK 的一个巨 大突破，为特定生产环境的苛刻需求提供了一个可能的选择。例如，对部 分企业核心存储等产品，如果能够保证不超过 10ms 的 GC 暂停，可靠性会 上一个大的台阶，这是过去我们进行 GC 调优几乎做不到的，是能与不能的问题</p><p>按照官方的说法，新的发布周 期会严格遵循时间点，将于每 年的3月份和9月份发布。所 以 Java 11 的版本号是 18.9(LTS)。</p><p>不过与 Java 9 和 Java 10 这 两个被称为“功能性的版本” 不同（两者均只提供半年的技 术支持），Java 11 不仅提供 了长期支持服务，还将作为 Java 平台的参考实现。 Oracle 直到2023年9月都会为 Java 11 提供技术支持，而补 丁和安全警告等扩展支持将持 续到2026年。</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081206960.png" alt="image-20210808120618484"></p></li></ul><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108081206006.png" alt="image-20210808120638010"></p><blockquote><p>新的长期支持版本每三年发布一次，根据后续的发布计划，下一 个长期支持版 Java 17 将于2021年发布。</p></blockquote><p><strong>官网公开的 17 个 JEP（JDK Enhancement Proposal 特性增强提议）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">181</span>: Nest-Based Access Control（基于嵌套的访问控制）</span><br><span class="line"><span class="number">309</span>: Dynamic Class-File Constants（动态的类文件常量）</span><br><span class="line"><span class="number">315</span>: Improve Aarch64 Intrinsics（改进 Aarch64 Intrinsics）</span><br><span class="line"><span class="number">318</span>: Epsilon: A No-Op Garbage Collector（Epsilon 垃圾回收器，又被称为<span class="string">&quot;No-Op（无操作）&quot;</span>回收器）</span><br><span class="line"><span class="number">320</span>: Remove the Java EE and CORBA Modules（移除 Java EE 和 CORBA 模块，JavaFX 也已被移除）</span><br><span class="line"><span class="number">321</span>: <span class="function">HTTP <span class="title">Client</span> <span class="params">(Standard)</span></span></span><br><span class="line"><span class="function">323: Local-Variable Syntax <span class="keyword">for</span> Lambda Parameters（用于 Lambda 参数的局部变量语法）</span></span><br><span class="line"><span class="function">324: Key Agreement with Curve25519 and Curve448（采用Curve25519和Curve448 算法实现的密钥协议）</span></span><br><span class="line"><span class="function">327: Unicode 10</span></span><br><span class="line"><span class="function">328: Flight Recorder（飞行记录仪）</span></span><br><span class="line"><span class="function">329: ChaCha20 and Poly1305 Cryptographic Algorithms（实现 ChaCha20 和 Poly1305 加密算法）</span></span><br><span class="line"><span class="function">330: Launch Single-File Source-Code Programs（启动单个 Java 源代码文件的程序）</span></span><br><span class="line"><span class="function">331: Low-Overhead Heap Profiling（低开销的堆分配采样方法）</span></span><br><span class="line"><span class="function">332: Transport Layer <span class="title">Security</span> <span class="params">(TLS)</span> 1.3（对 TLS 1.3 的支持）</span></span><br><span class="line"><span class="function">333: ZGC: A Scalable Low-Latency Garbage <span class="title">Collector</span> <span class="params">(Experimental)</span>（ZGC：可伸缩的低延迟垃圾回收器，处于实验性阶段）</span></span><br><span class="line"><span class="function">335: Deprecate the Nashorn JavaScript Engine（弃用 Nashorn JavaScript 引擎）</span></span><br><span class="line"><span class="function">336: Deprecate the Pack200 Tools and API（弃用 Pack200 工具及其 API）</span></span><br></pre></td></tr></table></figure><h5 id="3-1-新增了一系列字符串处理方法"><a href="#3-1-新增了一系列字符串处理方法" class="headerlink" title="3.1 新增了一系列字符串处理方法"></a>3.1 新增了一系列字符串处理方法</h5><table><thead><tr><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>判断字符串是否为空白</td><td>“ “.isBlank(); // true</td></tr><tr><td>去除首尾空白</td><td>“ Javastack “.strip(); // “Javastack”</td></tr><tr><td>去除尾部空格</td><td>“ Javastack “.stripTrailing(); // “ Javastack”</td></tr><tr><td>去除首部空格</td><td>“ Javastack “.stripLeading(); // “Javastack “</td></tr><tr><td>复制字符串</td><td>“Java”.repeat(3);// “JavaJavaJava”</td></tr><tr><td>行数统计</td><td>“A\nB\nC”.lines().count(); // 3</td></tr></tbody></table><h5 id="3-2-Optional加强"><a href="#3-2-Optional加强" class="headerlink" title="3.2 Optional加强"></a>3.2 Optional加强</h5><p>Optional 也增加了几个非常酷的方法，现在可以很方便的将一个 Optional 转换 成一个 Stream, 或者当一个空 Optional 时给它一个替代的。</p><table><thead><tr><th>新增方法</th><th>描述</th><th>新增的版本</th></tr></thead><tbody><tr><td>boolean isEmpty()</td><td>判断value是否为空</td><td>JDK 11</td></tr><tr><td>ifPresentOrElse(Consumer &lt;? super T&gt;action, Runnable emptyAction)</td><td>value非空，执行参数1功能；如果value 为空，执行参数2功能</td><td>JDK 9</td></tr><tr><td>Optional<T> or(Supplier&lt;? extends Optional&lt;? extends T&gt;&gt; supplier)</td><td>value非空，返回对应的Optional； value为空，返回形参封装的Optional</td><td>JDK 9</td></tr><tr><td>Stream<T> stream()</td><td>value非空，返回仅包含此value的 Stream；否则，返回一个空的Stream</td><td>JDK 9</td></tr><tr><td>T orElseThrow()</td><td>value非空，返回value；否则抛异常 NoSuchElementException</td><td>JDK 10</td></tr></tbody></table><h5 id="3-3-局部变量类型推断升级"><a href="#3-3-局部变量类型推断升级" class="headerlink" title="3.3 局部变量类型推断升级"></a>3.3 局部变量类型推断升级</h5><p>在var上添加注解的语法格式，在jdk10中是不能实现的。在JDK11中加入了这样 的语法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误的形式: 必须要有类型, 可以加上var</span></span><br><span class="line"><span class="comment">//Consumer&lt;String&gt; con1 = (@Deprecated t) -&gt; </span></span><br><span class="line">System.out.println(t.toUpperCase());</span><br><span class="line"><span class="comment">//正确的形式:</span></span><br><span class="line"><span class="comment">//使用var的好处是在使用lambda表达式时给参数加上注解。</span></span><br><span class="line">Consumer&lt;String&gt; con2 = (<span class="meta">@Deprecated</span> <span class="keyword">var</span> t) -&gt; System.out.println(t.toUpperCase());</span><br></pre></td></tr></table></figure><h5 id="3-4-全新的HTTP-客户端API"><a href="#3-4-全新的HTTP-客户端API" class="headerlink" title="3.4 全新的HTTP 客户端API"></a>3.4 全新的HTTP 客户端API</h5><ul><li><p>HTTP，用于传输网页的协议，早在1997年就被采用在目前的1.1版本中。直 到2015年，HTTP2才成为标准。</p></li><li><p>HTTP/1.1和HTTP/2的主要区别是如何在客户端和服务器之间构建和传输数据。 HTTP/1.1依赖于请求/响应周期。 HTTP/2允许服务器“push”数据：它可以发 送比客户端请求更多的数据。这使得它可以优先处理并发送对于首先加载 网页至关重要的数据。</p></li><li><p>这是 Java 9 开始引入的一个处理 HTTP 请求的的 HTTP Client API，该 API 支持同步和异步，而在 Java 11 中已经为正式可用状态，你可以在 java.net 包中找到这个 API。</p></li><li><p>它 将 替 代 仅 适 用 于 blocking 模式的 HttpURLConnection （HttpURLConnection是在HTTP 1.0的时代创建的，并使用了协议无关的 方法），并提供对WebSocket 和 HTTP/2的支持。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">HttpRequest request = </span><br><span class="line">HttpRequest.newBuilder(URI.create(<span class="string">&quot;http://127.0.0.1:8080/test/&quot;</span>)).build();</span><br><span class="line">BodyHandler&lt;String&gt; responseBodyHandler = BodyHandlers.ofString();</span><br><span class="line">HttpResponse&lt;String&gt; response = client.send(request, responseBodyHandler);</span><br><span class="line">String body = response.body();</span><br><span class="line">System.out.println(body);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">HttpRequest request = </span><br><span class="line">HttpRequest.newBuilder(URI.create(<span class="string">&quot;http://127.0.0.1:8080/test/&quot;</span>)).build();</span><br><span class="line">BodyHandler&lt;String&gt; responseBodyHandler = BodyHandlers.ofString();</span><br><span class="line">CompletableFuture&lt;HttpResponse&lt;String&gt;&gt; sendAsync = </span><br><span class="line">client.sendAsync(request, responseBodyHandler);</span><br><span class="line">sendAsync.thenApply(t -&gt; t.body()).thenAccept(System.out::println);</span><br><span class="line"><span class="comment">//HttpResponse&lt;String&gt; response = sendAsync.get();</span></span><br><span class="line"><span class="comment">//String body = response.body();</span></span><br><span class="line"><span class="comment">//System.out.println(body);</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3-5-更简化的编译运行程序"><a href="#3-5-更简化的编译运行程序" class="headerlink" title="3.5 更简化的编译运行程序"></a>3.5 更简化的编译运行程序</h5><p>看下面的代码。<br>// 编译<br>javac Javastack.java<br>// 运行<br>java Javastack<br>在我们的认知里面，要运行一个 Java 源代码必须先编译，再运行，两步执行动作。 而在未来的 Java 11 版本中，通过一个 java 命令就直接搞定了，如以下所示： java Javastack.java</p><p> 一个命令编译运行源代码的注意点：</p><ul><li>执行源文件中的第一个类, 第一个类必须包含主方法。</li><li>并且不可以使用其它源文件中的自定义类, 本文件中的自定义类是可以使用的。</li></ul><h5 id="3-6-废弃Nashorn引擎"><a href="#3-6-废弃Nashorn引擎" class="headerlink" title="3.6 废弃Nashorn引擎"></a>3.6 废弃Nashorn引擎</h5><p>废除Nashorn javascript引擎，在后续版本准备移除掉，有需要的 可以考虑使用GraalVM。</p><h5 id="3-7-ZGC"><a href="#3-7-ZGC" class="headerlink" title="3.7 ZGC"></a>3.7 ZGC</h5><ul><li>GC是java主要优势之一。 然而, 当GC停顿太长, 就会开始影响应用的响应时 间。消除或者减少GC停顿时长, java将对更广泛的应用场景是一个更有吸引力 的平台。此外, 现代系统中可用内存不断增长,用户和程序员希望JVM能够以高 效的方式充分利用这些内存, 并且无需长时间的GC暂停时间。</li><li>ZGC, A Scalable Low-Latency Garbage Collector(Experimental) ZGC, 这应该是JDK11最为瞩目的特性, 没有之一。 但是后面带了Experimental, 说明这还不建议用到生产环境。</li><li>ZGC是一个并发, 基于region, 压缩型的垃圾收集器, 只有root扫描阶段会 STW(stop the world), 因此GC停顿时间不会随着堆的增长和存活对象的增长 而变长。</li><li>优势：<ul><li>GC暂停时间不会超过10ms</li><li>既能处理几百兆的小堆, 也能处理几个T的大堆(OMG)</li><li>和G1相比, 应用吞吐能力不会下降超过15%</li><li>为未来的GC功能和利用colord指针以及Load barriers优化奠定基础</li><li>初始只支持64位系统</li></ul></li><li>ZGC的设计目标是：支持TB级内存容量，暂停时间低（&lt;10ms），对整个 程序吞吐量的影响小于15%。 将来还可以扩展实现机制，以支持不少令人 兴奋的功能，例如多层堆（即热对象置于DRAM和冷对象置于NVMe闪存）， 或压缩堆。</li></ul><h5 id="3-8-其他新特性"><a href="#3-8-其他新特性" class="headerlink" title="3.8 其他新特性"></a>3.8 其他新特性</h5><ul><li>Unicode 10</li><li>Deprecate the Pack200 Tools and API</li><li>新的Epsilon垃圾收集器</li><li>完全支持Linux容器（包括Docker）</li><li>支持G1上的并行完全垃圾收集</li><li>最新的HTTPS安全协议TLS 1.3</li><li>Java Flight Recorder</li></ul><p><strong>在当前JDK中看不到什么？</strong></p><p><strong>一个标准化和轻量级的JSON API</strong></p><p>一个标准化和轻量级的JSON API被许多Java开发人员所青睐。但是由于资金问 题无法在Java当前版本中见到，但并不会削减掉。Java平台首席架构师Mark Reinhold在JDK 9邮件列中说：“这个JEP将是平台上的一个有用的补充，但是在 计划中，它并不像Oracle资助的其他功能那么重要，可能会重新考虑JDK 10或 更高版本中实现。 ”</p><p><strong>新的货币 API</strong></p><ul><li><p>对许多应用而言货币价值都是一个关键的特性，但JDK对此却几乎没有任何支持。 严格来讲，现有的java.util.Currency类只是代表了当前ISO 4217货币的一个数据结构， 但并没有关联的值或者自定义货币。JDK对货币的运算及转换也没有内建的支持， 更别说有一个能够代表货币值的标准类型了。</p></li><li><p>此前，Oracle 公布的JSR 354定义了一套新的Java货币API：JavaMoney，计划会在Java 9中正式引入。但是目前没有出现在JDK 新特性 中。</p></li><li><p>不过，如果你用的是Maven的话，可以做如下的添加，即可使用相关的API处理货币：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.javamoney&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;moneta&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>展望</strong></p><ul><li>随着云计算和 AI 等技术浪潮，当前的计算模式和场景正在发生翻天覆地的变 化，不仅对 Java 的发展速度提出了更高要求，也深刻影响着 Java 技术的发展 方向。传统的大型企业或互联网应用，正在被云端、容器化应用、模块化的微 服务甚至是函数(FaaS， Function-as-a-Service)所替代。</li><li>Java虽然标榜面向对象编程，却毫不顾忌的加入面向接口编程思想，又扯出匿 名对象之概念，每增加一个新的东西，对Java的根本所在的面向对象思想的一 次冲击。反观Python，抓住面向对象的本质，又能在函数编程思想方面游刃有 余。Java对标C/C++，以抛掉内存管理为卖点，却又陷入了JVM优化的噩梦。选 择比努力更重要，选择Java的人更需要对它有更清晰的认识。</li><li>Java 需要在新的计算场景下，改进开发效率。这话说的有点笼统，我谈一些自 己的体会，Java 代码虽然进行了一些类型推断等改进，更易用的集合 API 等， 但仍然给开发者留下了过于刻板、形式主义的印象，这是一个长期的改进方向</li></ul>]]></content>
    
    
    <summary type="html">Java9-11新特性</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>16-Java8的其他新特性</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/16%E2%80%94Java8%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/16%E2%80%94Java8%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2021-09-16T17:27:14.973Z</published>
    <updated>2021-08-16T13:49:26.595Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="16—Java8的其他新特性"><a href="#16—Java8的其他新特性" class="headerlink" title="16—Java8的其他新特性"></a>16—Java8的其他新特性</h3><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108071505555.png" alt="16-Java8新特性"></p><h4 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1. Lambda表达式"></a>1. Lambda表达式</h4><p>Lambda是一个匿名函数，我们可以把Lambda表达式理解为是一段可以传递的代码（将代码像数据一样进行传递）。使用它可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java语言表达能力得到了提升</p><ul><li><p>从匿名类到Lambda的转换举例1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line">Runnable r1 = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line">Runnable r1 = () -&gt; System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>从匿名类到Lambda的转换举例2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原来使用匿名内部类作为参数传递</span></span><br><span class="line">TreeSet&lt;String&gt; ts = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;()&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.compare(o1.length(),o2.length())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Lambda 表达式作为参数传递</span></span><br><span class="line">TreeSet&lt;String&gt; ts2 = <span class="keyword">new</span> TreeSet&lt;&gt;(</span><br><span class="line">    (o1,o2) -&gt; Integer.compare(o1.length(), o2.length())</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>Lambda表达式：在Java8语言中引入的一种新的语法元素和操作符。这个操作符为“-&gt;”，该操作符被称为Lambda操作符或箭头操作符。他将Lambda分为两个部分：</p><p>左侧：指定了Lambda表达式需要的参数列表</p><p>右侧：指定了Lambda体，是抽象方法的实现逻辑，也即Lambda表达式要执行的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式一：无参，无返回值</span></span><br><span class="line">Runnable r1= ()-&gt;&#123;System.out.println(<span class="string">&quot;Hello Lambda&quot;</span>);&#125;;</span><br><span class="line"><span class="comment">//语法格式二：Lambda需要一个参数，但是没有返回值</span></span><br><span class="line">Consumer&lt;String&gt; con = (String str) -&gt; &#123;System.out.println(str);&#125;;</span><br><span class="line"><span class="comment">//语法格式三：数据类型可以省略，因为可以由编译器推断得出，称为“类型推断”</span></span><br><span class="line">Consumer&lt;String&gt; con = (str) -&gt; &#123;System.out.println(str);&#125;;</span><br><span class="line"><span class="comment">//语法格式四：Lambda只需要一个参数时，参数的小括号可以省略</span></span><br><span class="line">Consumer&lt;String&gt; con = str -&gt; &#123;System.out.println(str);&#125;;</span><br><span class="line"><span class="comment">//语法格式五：Lambda需要两个或以上的参数，多条执行语句，并且可以有返回值</span></span><br><span class="line">Comparator&lt;Integer&gt; com = (x,y) -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;实现函数式接口方法&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x,y);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//语法格式六：当Lambda体只有一条语句时，return与大括号若有，都可以省略</span></span><br><span class="line">Comparator&lt;Integer&gt; com = (x,y) -&gt; Integer.compare(x,y);</span><br></pre></td></tr></table></figure><p><strong>类型推断</strong></p><p>上述Lambda表达式中的参数类型都是由编译器推断得出的。Lambda表达式中无需指定类型，程序依然可以编译，这是因为javac根据程序的上下文，在后台推断出了参数的类型。Lambda表达式的类型依赖于上下文的环境，是由编译器推断出来的。</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108071535176.png" alt="image-20210807153542725"></p><h5 id="1-1-示例"><a href="#1-1-示例" class="headerlink" title="1.1 示例"></a>1.1 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda表达式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我在花江学计算机&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        r1.run();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Runnable r2 = () -&gt; System.out.println(<span class="string">&quot;I love GUET&quot;</span>);</span><br><span class="line">        r2.run();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">int</span> compare1 = com1.compare(<span class="number">12</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(compare1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|++++++++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        <span class="comment">//Lambda表达式写法</span></span><br><span class="line">        Comparator&lt;Integer&gt; com2 = (o1,o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">        <span class="keyword">int</span> compare2 = com2.compare(<span class="number">12</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(compare2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|++++++++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        <span class="comment">//方法引用</span></span><br><span class="line">        Comparator&lt;Integer&gt; com3 = Integer :: compare;</span><br><span class="line">        <span class="keyword">int</span> compare3 = com3.compare(<span class="number">12</span>,<span class="number">21</span>);</span><br><span class="line">        System.out.println(compare3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda表达式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Lambda表达式的使用</span></span><br><span class="line"><span class="comment">1.举例：(o1, o2) -&gt; Integer.compare(o1, o2);</span></span><br><span class="line"><span class="comment">2.格式：</span></span><br><span class="line"><span class="comment">    -：lambda操作符</span></span><br><span class="line"><span class="comment">    -：左边：lambda形参列表（其实就是接口中的抽象方法的新参列表）</span></span><br><span class="line"><span class="comment">    -：右边：lambda体（其实就是重写抽象方法的方法体）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.Lambda表达式的使用：（分为六种情况）</span></span><br><span class="line"><span class="comment">总结：</span></span><br><span class="line"><span class="comment">-：左边：lambda形参列表的参数类型可以省略（类型推断）；如果lambda形参列表只有一个参数，其中一堆()也可以省略</span></span><br><span class="line"><span class="comment">-：右边：lambda体应该使用一对&#123;&#125;包裹；如果lambda体只有一条执行语句（可能是return语句），省略这一对&#123;&#125;和return关键字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4.Lambda表达式的本质：作为函数式接口的实例</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">5.如果一个接口中，只声明了一个抽象方法，则此接口就称为函数式接口。我们可以在一个接口上使用@FunctionalInterface注解。</span></span><br><span class="line"><span class="comment">这样就可以做检查它是否是一个函数式接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">6.所以以前使用匿名实现类表示的现在都可以用Lambda表达式来写</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambadTest2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式一：无参无返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Runnable r1 = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我在金鸡岭写代码&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        r1.run();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Runnable r2 = () -&gt; &#123;System.out.println(<span class="string">&quot;我在金鸡岭写代码&quot;</span>);&#125;;</span><br><span class="line">        r2.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式二：Lambda需要一个参数，但是没有返回值 正常写法</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; con = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;你在哪儿&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; con2 = (String s) -&gt;&#123;System.out.println(s); &#125; ;</span><br><span class="line">        con2.accept(<span class="string">&quot;我在这儿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式三：Lambda需要一个参数，但是没有返回值 数据类型可以省略，因为可以由编译器推断得出，称为”类型推断“</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; con = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;你在哪儿&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; con2 = (s) -&gt;&#123;System.out.println(s); &#125; ;</span><br><span class="line">        con2.accept(<span class="string">&quot;我在这儿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式四：Lambda需要一个参数，但是没有返回值 数据类型可以省略，因为可以由编译器推断得出，称为”类型推断“，参数的小括号也可以省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; con = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;你在哪儿&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; con2 = s -&gt;&#123;System.out.println(s); &#125; ;</span><br><span class="line">        con2.accept(<span class="string">&quot;我在这儿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式五：Lambda需要一个参数，数据类型可以省略，因为可以由编译器推断得出，称为”类型推断“，参数的小括号也可以省略</span></span><br><span class="line">    <span class="comment">//但是没有返回值 只有一条语句，方法体的&#123;&#125;也可以省略</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; con = <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        con.accept(<span class="string">&quot;你在哪儿&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer&lt;String&gt; con2 = s -&gt;System.out.println(s);</span><br><span class="line">        con2.accept(<span class="string">&quot;我在这儿&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式五：:Lambda需要两个或以上的参数，多条执行语句，并且可以有返回值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com1 = <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                System.out.println(o1);</span><br><span class="line">                System.out.println(o2);</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(com1.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Comparator&lt;Integer&gt; com2 = (o1, o2) -&gt; &#123;</span><br><span class="line">            System.out.println(o1);</span><br><span class="line">            System.out.println(o2);</span><br><span class="line">            <span class="keyword">return</span> Integer.compare(o1,o2);</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(com2.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//语法格式六：当Lambda体只有一条语句时，return(若有)与大括号都可以省略；</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com1 = (o1, o2) -&gt; Integer.compare(o1,o2);</span><br><span class="line">        System.out.println(com1.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Lambda表达式;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Java内置的四大核心函数式接口</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">消费型接口 Consumer&lt;T&gt;       void accept(T t)</span></span><br><span class="line"><span class="comment">供给型接口 Supplier&lt;T&gt;       T get()</span></span><br><span class="line"><span class="comment">函数型接口 Function&lt;T,R&gt;     R apply(T t)</span></span><br><span class="line"><span class="comment">断定型接口 Predicate&lt;T&gt;      boolean test(T t)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaTest3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        relax(<span class="string">&quot;打篮球&quot;</span>, <span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;学习太累了，&quot;</span> + s + <span class="string">&quot;放松一下&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        relax(<span class="string">&quot;看Bilibili&quot;</span>,method -&gt; System.out.println(<span class="string">&quot;学习太累了，&quot;</span>+method+<span class="string">&quot;放松一下&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">relax</span><span class="params">(String method, Consumer&lt;String&gt; con)</span></span>&#123;</span><br><span class="line">        con.accept(method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;南京&quot;</span>,<span class="string">&quot;天津&quot;</span>,<span class="string">&quot;东京&quot;</span>,<span class="string">&quot;西京&quot;</span>,<span class="string">&quot;普京&quot;</span>);</span><br><span class="line">        List&lt;String&gt; filterStrs = filterString(list, <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> s.contains(<span class="string">&quot;京&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(filterStrs);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; filterStr1 = filterString(list,s -&gt; s.contains(<span class="string">&quot;京&quot;</span>));</span><br><span class="line">        System.out.println(filterStr1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt;  <span class="title">filterString</span><span class="params">(List&lt;String&gt; list, Predicate&lt;String&gt; predicate)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; filterList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(predicate.test(s))&#123;</span><br><span class="line">                filterList.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filterList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-函数式-Functional-接口"><a href="#2-函数式-Functional-接口" class="headerlink" title="2. 函数式(Functional)接口"></a>2. 函数式(Functional)接口</h4><h5 id="2-1-什么是函数式-Funcional-接口"><a href="#2-1-什么是函数式-Funcional-接口" class="headerlink" title="2.1 什么是函数式(Funcional)接口"></a>2.1 什么是函数式(Funcional)接口</h5><ul><li>只包含一个抽象方法的接口，称为函数式接口</li><li>你可以通过Lambda表达式来创建该接口的对象。（若Lambda表达式抛出一个受检异常（即：非运行时异常），那么该异常需要在目标接口的抽象方法上进行声明）</li><li>我们可以在一个接口上使用@FuncionalInterface注解，这样做可以检查它是否是一个函数式接口。同时javadoc也会包含一条声明，说明这个接口是一个函数是接口</li><li>在java.util.function包下定义了Java8的丰富的函数式接口</li></ul><h5 id="2-2-如何理解函数式接口"><a href="#2-2-如何理解函数式接口" class="headerlink" title="2.2 如何理解函数式接口"></a>2.2 如何理解函数式接口</h5><ul><li>Java从诞生日起就是一直倡导“一切皆对象”，在Java里面面向对象(OOP) 编程是一切。但是随着python、scala等语言的兴起和新技术的挑战，Java不得不做出调整以便支持更加广泛的技术要求，也即java不但可以支持OOP还 可以支持OOF（面向函数编程）</li><li>在函数式编程语言当中，函数被当做一等公民对待。在将函数作为一等公民的编程语言中，Lambda表达式的类型是函数。但是在Java8中，有所不同。在 Java8中，Lambda表达式是对象，而不是函数，它们必须依附于一类特别的对象类型——函数式接口</li><li>简单的说，在Java8中，Lambda表达式就是一个函数式接口的实例。这就是 Lambda表达式和函数式接口的关系。也就是说，只要一个对象是函数式接口 的实例，那么该对象就可以用Lambda表达式来表示</li><li>所以以前用匿名实现类表示的现在都可以用Lambda表达式来写</li></ul><h5 id="2-3-函数式接口举例"><a href="#2-3-函数式接口举例" class="headerlink" title="2.3 函数式接口举例"></a>2.3 函数式接口举例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &#123;<span class="doctag">@code</span> Runnable&#125; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> run&#125; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &#123;<span class="doctag">@code</span> run&#125; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-自定义函数式接口"><a href="#2-4-自定义函数式接口" class="headerlink" title="2.4 自定义函数式接口"></a>2.4 自定义函数式接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FuncitonalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mynumber</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数式接口中使用泛型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyFunc</span>&lt;<span class="title">t</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-作为参数传递Lambda表达式"><a href="#2-5-作为参数传递Lambda表达式" class="headerlink" title="2.5 作为参数传递Lambda表达式"></a>2.5 作为参数传递Lambda表达式</h5><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108071557432.png" alt="image-20210807155726164"></p><h5 id="2-6-Java内置四大核心函数式接口"><a href="#2-6-Java内置四大核心函数式接口" class="headerlink" title="2.6 Java内置四大核心函数式接口"></a>2.6 Java内置四大核心函数式接口</h5><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>Consumer<T> 消费型接口</td><td>T</td><td>void</td><td>对类型为T的对象应用操作，包含方法：void accept(T t)</td></tr><tr><td>Supplier<T> 供给型接口</td><td>无</td><td>T</td><td>返回类型为T的对象，包含方法：T get()</td></tr><tr><td>Function&lt;T,R&gt; 函数类型接口</td><td>T</td><td>R</td><td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t)</td></tr><tr><td>Predicate<T> 断定型接口</td><td>T</td><td>boolean</td><td>确定类型为T的对象是否满足某约束，并返回boolean值。包含方法：boolean test(T t)</td></tr></tbody></table><h5 id="2-7-其他接口"><a href="#2-7-其他接口" class="headerlink" title="2.7 其他接口"></a>2.7 其他接口</h5><table><thead><tr><th>函数式接口</th><th>参数类型</th><th>返回类型</th><th>用途</th></tr></thead><tbody><tr><td>BiFunction&lt;T,U,R&gt;</td><td>T,U</td><td>R</td><td>对类型为T,U参数应用操作，返回R类型的结果。包含方法为：R apply(T t, U u);</td></tr><tr><td>UnaryOperator<T> (Function子接口)</td><td>T</td><td>T</td><td>对类型为T的对象进行一元运算，并返回T类型的结果。包含方法为：T apply(T t)</td></tr><tr><td>BinaryOperator<T> (BiFunction子接口)</td><td>T,T</td><td>T</td><td>对类型为T的对象进行二元运算，并返回T类型的结果。包含方法为：T apply(T t1, T t2)</td></tr><tr><td>BiConsumer&lt;T,U&gt;</td><td>T,U</td><td>void</td><td>对类型为T,U参数应用操作<br />包含方法为：void accept(T t, U u)</td></tr><tr><td>BiPredicate&lt;T,U&gt;</td><td>T,U</td><td>boolean</td><td>包含方法为：boolean test(T t, Uu)</td></tr><tr><td>ToIntFuction<T></td><td>T</td><td>int</td><td>计算int值的函数</td></tr><tr><td>ToLongFunction<T></td><td>T</td><td>long</td><td>计算long值的函数</td></tr><tr><td>ToDoubleFunction<T></td><td>T</td><td>double</td><td>计算double值的函数</td></tr><tr><td>IntFunction<R></td><td>int</td><td>R</td><td>参数为int类型的函数</td></tr><tr><td>LongFunction<R></td><td>long</td><td>R</td><td>参数为long类型的函数</td></tr><tr><td>DoubleFunction<R></td><td>double</td><td>R</td><td>参数为double类型的函数</td></tr></tbody></table><h4 id="3-方法引用与构造器引用"><a href="#3-方法引用与构造器引用" class="headerlink" title="3. 方法引用与构造器引用"></a>3. 方法引用与构造器引用</h4><h5 id="3-1-方法引用-Method-References"><a href="#3-1-方法引用-Method-References" class="headerlink" title="3.1 方法引用(Method References)"></a>3.1 方法引用(Method References)</h5><ul><li><p>当要传递给Lambda体的操作时，已经有实现的方法了，可以使用方法引用</p></li><li><p>方法引用可以看作是Lambda表达式深层次的表达。换句话说，方法引用就是Lambda表达式，也就是函数式接口的一个实例，通过方法的名字来指向一个方法，可以认为是Lambda表达式的一个语法糖</p></li><li><p>要求：实现接口的抽象方法的参数列表和返回值类型，必须与方法引用的方法的参数列表和返回值类型保持一致</p></li><li><p>格式：使用操作符“::”将类（或对象）与方法名分隔开</p></li><li><p>如下三种主要使用情况：</p><ul><li>对象::实例方法名</li><li>类::静态方法名</li><li>类::实例方法名</li></ul></li><li><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Consumer&lt;String&gt; con = (x) -&gt; System.out.println(x);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">Consume&lt;String&gt; con1 = System.out::println;</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">Comparator&lt;Integer&gt; com = (x,y) -&gt; Integer.compare(x,y);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">Comparator&lt;Integer&gt; com1 = Integer::compare;</span><br><span class="line"><span class="keyword">int</span> value = com.compare(<span class="number">12</span>,<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">BiPredicate&lt;String,String&gt; bp = (x,y) -&gt; x.equals(y);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">BiPredicate&lt;String,String&gt; bp1 = String::equals;</span><br><span class="line"><span class="keyword">boolean</span> falg= bp1.test(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;hi&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>注意：当函数式接口方法的第一个参数是需要引用方法的调用者，并且第二 个参数是需要引用方法的参数(或无参数)时：ClassName::methodName</p></blockquote></li></ul><h5 id="3-2-构造器引用"><a href="#3-2-构造器引用" class="headerlink" title="3.2 构造器引用"></a>3.2 构造器引用</h5><p>格式：ClassName::new</p><p>与函数式接口相结合，自动与函数式接口中的方法兼容。</p><p>可以把构造器引用赋值给定义的方法，要求构造器参数列表要与接口中抽象方法的参数列表一致，且方法的返回值即为构造器对应类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">Function&lt;Integer, MyClass&gt; fun = (n) -&gt; <span class="keyword">new</span> MyClass(n);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">Function&lt;Integer, MyClass&gt; fun = MyClass::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure><h5 id="3-3-数组引用"><a href="#3-3-数组引用" class="headerlink" title="3.3 数组引用"></a>3.3 数组引用</h5><p>格式：type[]::new</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如</span></span><br><span class="line">Function&lt;Integer, Integer[]&gt; fun = (n) -&gt; <span class="keyword">new</span> Integer[n];</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">Function&lt;Integer, Integer[]&gt; fun = Integer[]::<span class="keyword">new</span>;</span><br></pre></td></tr></table></figure><h5 id="3-4-示例"><a href="#3-4-示例" class="headerlink" title="3.4 示例"></a>3.4 示例</h5><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108162144944.png" alt="image-20210816214443373"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 方法引用与构造器引用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getSalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Employee().....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, <span class="keyword">double</span> salary)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, salary=&quot;</span> + salary +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Employee employee = (Employee) o;</span><br><span class="line">        <span class="keyword">return</span> id == employee.id &amp;&amp; age == employee.age &amp;&amp; Double.compare(employee.salary, salary) == <span class="number">0</span> &amp;&amp; Objects.equals(name, employee.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(id, name, age, salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 方法引用与构造器引用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeeData</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Employee&gt; <span class="title">getEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1001</span>, <span class="string">&quot;马化腾&quot;</span>, <span class="number">34</span>, <span class="number">6000.38</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1002</span>, <span class="string">&quot;马云&quot;</span>, <span class="number">12</span>, <span class="number">9876.12</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1003</span>, <span class="string">&quot;刘强东&quot;</span>, <span class="number">33</span>, <span class="number">3000.82</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1004</span>, <span class="string">&quot;雷军&quot;</span>, <span class="number">26</span>, <span class="number">7657.37</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1005</span>, <span class="string">&quot;李彦宏&quot;</span>, <span class="number">65</span>, <span class="number">5555.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1006</span>, <span class="string">&quot;比尔盖茨&quot;</span>, <span class="number">42</span>, <span class="number">9500.43</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1007</span>, <span class="string">&quot;任正非&quot;</span>, <span class="number">26</span>, <span class="number">4333.32</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1008</span>, <span class="string">&quot;扎克伯格&quot;</span>, <span class="number">35</span>, <span class="number">2500.32</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 方法引用与构造器引用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiPredicate;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法的引用</span></span><br><span class="line"><span class="comment">1.使用情景：当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用</span></span><br><span class="line"><span class="comment">2.方法引用，本质上就是Lambda表达式，而Lambda表达式作为函数式接口的实例。所以方法引用也是函数式接口的实例</span></span><br><span class="line"><span class="comment">3.使用格式：类（或对象）：：方法名</span></span><br><span class="line"><span class="comment">4.具体分为如下三种情况：</span></span><br><span class="line"><span class="comment">情况1；对象 :: 非静态方法</span></span><br><span class="line"><span class="comment">情况2：类  ::  静态方法</span></span><br><span class="line"><span class="comment">情况3：类  ::  非静态方法</span></span><br><span class="line"><span class="comment">5.方法引用的使用要求：要求接口中的抽象方法的形参列表和返回值类类型与方法引用的形参列表和返回值类型相同（针对情况1和2）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodRefTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况一：对象 :: 实例方法</span></span><br><span class="line">    <span class="comment">//Consumer中的void accept(T t)</span></span><br><span class="line">    <span class="comment">//PrintStream中的void println(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Consumer&lt;String&gt; con = str -&gt; System.out.println(str);</span><br><span class="line">        con.accept(<span class="string">&quot;花江&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        PrintStream ps = System.out;</span><br><span class="line">        Consumer&lt;String&gt; con1 = ps :: println;</span><br><span class="line">        con1.accept(<span class="string">&quot;金鸡岭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Supplier中的T get()</span></span><br><span class="line">    <span class="comment">//Employee中的String getName()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee emp = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;xiong&quot;</span>,<span class="number">23</span>,<span class="number">15000</span>);</span><br><span class="line"></span><br><span class="line">        Supplier&lt;String &gt; supplier = () -&gt; emp.getName();</span><br><span class="line">        System.out.println(supplier.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Supplier&lt;String&gt; stringSupplier = emp :: getName;</span><br><span class="line">        System.out.println(stringSupplier.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况二：类 :: 静态方法</span></span><br><span class="line">    <span class="comment">//Comparator中的int compare(T t1, T t2)</span></span><br><span class="line">    <span class="comment">//Interger中的int comapra(T t1, T t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator&lt;Integer&gt; com1 = (t1,t2) -&gt; Integer.compare(t1,t2);</span><br><span class="line">        System.out.println(com1.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Comparator&lt;Integer&gt; com2 = Integer :: compare;</span><br><span class="line">        System.out.println(com2.compare(<span class="number">12</span>, <span class="number">21</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="comment">//Math中的Long round(double d)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Function&lt;Double,Long&gt; func = <span class="keyword">new</span> Function&lt;Double, Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">apply</span><span class="params">(Double aDouble)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Math.round(aDouble);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(func.apply(<span class="number">12.8</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Function&lt;Double,Long&gt; func1 = d -&gt; Math.round(d);</span><br><span class="line">        System.out.println(func1.apply(<span class="number">12.3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Function&lt;Double,Long&gt; func2 = Math :: round;</span><br><span class="line">        System.out.println(func2.apply(<span class="number">12.4</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//情况三：类 :: 实例方法</span></span><br><span class="line">    <span class="comment">//Comparator中的int compare(T t1, T t2)</span></span><br><span class="line">    <span class="comment">//String中的int t1.compareTo(t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Comparator&lt;String&gt; com1 = (s1, s2) -&gt; s1.compareTo(s2);</span><br><span class="line">        System.out.println(com1.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Comparator&lt;String&gt; com2 = String :: compareTo;</span><br><span class="line">        System.out.println(com2.compare(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;abd&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BiPredicate中的boolean test(T t1, T t2);</span></span><br><span class="line">    <span class="comment">//String中的boolean t1.equals(t2)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BiPredicate&lt;String,String&gt; pre1 = (s1,s2) -&gt;s1.equals(s2);</span><br><span class="line">        System.out.println(pre1.test(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;ab&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        BiPredicate&lt;String,String&gt; pre2 = String :: equals;</span><br><span class="line">        System.out.println(pre2.test(<span class="string">&quot;ax&quot;</span>, <span class="string">&quot;az&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Fuction中的R apply(T t) 传一个参数，返回另一个数据</span></span><br><span class="line">    <span class="comment">//Employee中的String T.getName();</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;zhuo&quot;</span>,<span class="number">23</span>,<span class="number">15000</span>);</span><br><span class="line"></span><br><span class="line">        Function&lt;Employee,String&gt; fun1 = e -&gt; e.getName();</span><br><span class="line">        System.out.println(fun1.apply(employee));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Function&lt;Employee,String&gt; fun2 = Employee :: getName;</span><br><span class="line">        System.out.println(fun2.apply(employee));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 方法引用与构造器引用;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiFunction;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、构造器引用</span></span><br><span class="line"><span class="comment">        和方法引用类似，函数式接口的抽象方法的形参列表和构造器的形参列表一致。</span></span><br><span class="line"><span class="comment">        抽象方法的返回值类型即为构造器所属的类的类型</span></span><br><span class="line"><span class="comment">二、数组引用</span></span><br><span class="line"><span class="comment">        大家可以把数组看作是一个特殊的类。则写法与构造器引用一致</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructorTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器引用</span></span><br><span class="line">    <span class="comment">//Supperlier中的T get()</span></span><br><span class="line">    <span class="comment">//Employee的空参构造器：Employee()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Supplier&lt;Employee&gt; sup = <span class="keyword">new</span> Supplier&lt;Employee&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Employee <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Employee();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(sup.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Supplier&lt;Employee&gt; sup1 = () -&gt; <span class="keyword">new</span> Employee();</span><br><span class="line">        System.out.println(sup1.get());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Supplier&lt;Employee&gt; sup2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(sup2.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Function&lt;Integer,Employee&gt; func1 = id -&gt; <span class="keyword">new</span> Employee(id);</span><br><span class="line">        Employee em1 = func1.apply(<span class="number">1002</span>);</span><br><span class="line">        System.out.println(em1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Function&lt;Integer,Employee&gt; func2 = Employee :: <span class="keyword">new</span>;</span><br><span class="line">        System.out.println(func2.apply(<span class="number">1003</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BiFunction中的R apply(T t, U u)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BiFunction&lt;Integer,String,Employee&gt; func1 = (id,name) -&gt; <span class="keyword">new</span> Employee(id,name);</span><br><span class="line">        System.out.println(func1.apply(<span class="number">1004</span>, <span class="string">&quot;xiong&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        BiFunction&lt;Integer,String,Employee&gt; func2 = Employee::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(func2.apply(<span class="number">1005</span>, <span class="string">&quot;zhuo&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组引用</span></span><br><span class="line">    <span class="comment">//Function中的R apply(T t)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Function&lt;Integer,String[]&gt; func1 = length -&gt; <span class="keyword">new</span> String[length];</span><br><span class="line">        String[] arr1 = func1.apply(<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;|+++++++++++++++++++++|&quot;</span>);</span><br><span class="line">        Function&lt;Integer,String[]&gt; func2 = String[] :: <span class="keyword">new</span>;</span><br><span class="line">        String[] arr2 = func2.apply(<span class="number">10</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-强大的Stream-API"><a href="#4-强大的Stream-API" class="headerlink" title="4. 强大的Stream API"></a>4. 强大的Stream API</h4><h5 id="4-1-Stream-API说明"><a href="#4-1-Stream-API说明" class="headerlink" title="4.1 Stream API说明"></a>4.1 Stream API说明</h5><ul><li>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API。</li><li>Stream API ( java.util.stream) 把真正的函数式编程风格引入到Java中。这是目前为止对Java类库最好的补充，因为Stream API可以极大提高Java程序员的生产力，让程序员写出高效率、干净、简洁的代码。</li><li>Stream 是Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。 使用 Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。 也可以使用 Stream API 来并行执行操作。简言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</li></ul><h5 id="4-2-为什么要使用Stream-API"><a href="#4-2-为什么要使用Stream-API" class="headerlink" title="4.2 为什么要使用Stream API"></a>4.2 为什么要使用Stream API</h5><ul><li>实际开发中，项目中多数数据源都来自于Mysql，Oracle等。但现在数据源可以更多了，有MongDB，Radis等，而这些NoSQL的数据就需要 Java层面去处理。</li><li>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据 结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中， 后者主要是面向 CPU，通过 CPU 实现计算。</li></ul><h5 id="4-3-什么是Stream"><a href="#4-3-什么是Stream" class="headerlink" title="4.3 什么是Stream"></a>4.3 什么是Stream</h5><p><strong>Stream到底是什么呢？</strong></p><p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。 “集合讲的是数据，Stream讲的是计算！”</p><p>注意： ①Stream 自己不会存储元素。 ②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。 ③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p><h5 id="4-4-Stream的操作三个步骤"><a href="#4-4-Stream的操作三个步骤" class="headerlink" title="4.4 Stream的操作三个步骤"></a>4.4 Stream的操作三个步骤</h5><ul><li><p>1- 创建 Stream</p><p>一个数据源（如：集合、数组），获取一个流</p></li><li><p>2- 中间操作</p><p>一个中间操作链，对数据源的数据进行处理</p></li><li><p>3- 终止操作(终端操作)</p><p>一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108072106954.png" alt="image-20210807210657432"></p></li></ul><h5 id="4-5-创建Stream的方式"><a href="#4-5-创建Stream的方式" class="headerlink" title="4.5 创建Stream的方式"></a>4.5 创建Stream的方式</h5><h6 id="4-5-1-方式一：通过集合"><a href="#4-5-1-方式一：通过集合" class="headerlink" title="4.5.1 方式一：通过集合"></a>4.5.1 方式一：通过集合</h6><p>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法：</p><ul><li>default Stream stream() : 返回一个顺序流</li><li>default Stream parallelStream() : 返回一个并行流</li></ul><h6 id="4-5-2-方式二：通过数组"><a href="#4-5-2-方式二：通过数组" class="headerlink" title="4.5.2 方式二：通过数组"></a>4.5.2 方式二：通过数组</h6><p>Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：</p><ul><li>static  Stream stream(T[] array): 返回一个流</li><li>重载形式，能够处理对应基本类型的数组：<ul><li>public static IntStream stream(int[] array)</li><li>public static LongStream stream(long[] array)</li><li>public static DoubleStream stream(double[] array)</li></ul></li></ul><h6 id="4-5-3-方式三：通过Stream的of"><a href="#4-5-3-方式三：通过Stream的of" class="headerlink" title="4.5.3 方式三：通过Stream的of()"></a>4.5.3 方式三：通过Stream的of()</h6><p>可以调用Stream类静态方法of()，通过显示值创建一个流。它可以接收任意数量的参数</p><ul><li>public static Stream of(T… values) : 返回一个流</li></ul><h6 id="4-5-4-方式四：创建无限流"><a href="#4-5-4-方式四：创建无限流" class="headerlink" title="4.5.4 方式四：创建无限流"></a>4.5.4 方式四：创建无限流</h6><p>可以使用静态方法 Stream.iterate() 和 Stream.generate(),  创建无限流。</p><ul><li><p>迭代</p><p>public static Stream iterate(final T seed, final UnaryOperator f) </p></li><li><p>生成</p><p>public static Stream generate(Supplier s) </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式四：创建无限流</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 迭代</span></span><br><span class="line"><span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final</span></span><br><span class="line"><span class="comment">// UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">Stream&lt;Integer&gt; stream = Stream.iterate(<span class="number">0</span>, x -&gt; x + <span class="number">2</span>);</span><br><span class="line">stream.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"><span class="comment">// 生成</span></span><br><span class="line"><span class="comment">// public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">Stream&lt;Double&gt; stream1 = Stream.generate(Math::random);</span><br><span class="line">stream1.limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-6-Stream的中间操作"><a href="#4-6-Stream的中间操作" class="headerlink" title="4.6 Stream的中间操作"></a>4.6 Stream的中间操作</h5><p>多个中间操作可以连接起来形成一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理。而在中止操作时一次性全部处理，称为“惰性求值”</p><p>1-筛选与切片</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>filter(Predicate p)</td><td>接收Lambda，从流中排除某些元素</td></tr><tr><td>distinct()</td><td>筛选，通过流所生成元素的hashCode()和equals()去除重复元素</td></tr><tr><td>limit(long maxSize)</td><td>截断流，使其元素不超过给定数量</td></tr><tr><td>skip(long n)</td><td>跳过元素，返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回了一个空流。与limit(n)互补</td></tr></tbody></table><p>2-映射</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>map(Function f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</td></tr><tr><td>mapToDouble(ToDoubleFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 DoubleStream。</td></tr><tr><td>mapToInt(ToIntFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 IntStream。</td></tr><tr><td>mapToLong(ToLongFunction f)</td><td>接收一个函数作为参数，该函数会被应用到每个元素上，产生一个新的 LongStream。</td></tr><tr><td>flatMap(Function f)</td><td>接收一个函数作为参数，将流中的每个值都换成另 一个流，然后把所有流连接成一个流。</td></tr></tbody></table><p>3-排序</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>sorted()</td><td>产生一个新流，其中按自然顺序排序</td></tr><tr><td>sorted(Comparator com)</td><td>产生一个新流，其中按比较器顺序排序</td></tr></tbody></table><h5 id="4-7-Streasm的终止操作"><a href="#4-7-Streasm的终止操作" class="headerlink" title="4.7 Streasm的终止操作"></a>4.7 Streasm的终止操作</h5><ul><li>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例 如：List、Integer，甚至是 void 。</li><li>流进行了终止操作后，不能再次使用。</li></ul><p>1-匹配与查找</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>allMatch(Predicate p)</td><td>检查是否匹配所有元素</td></tr><tr><td>anyMatch(Predicate p)</td><td>检查是否至少匹配一个元素</td></tr><tr><td>noneMatch(Predicate p)</td><td>检查是否没有匹配所有元素</td></tr><tr><td>findFirst()</td><td>返回第一个元素</td></tr><tr><td>findAny()</td><td>返回当前流中的任意元素</td></tr><tr><td>count()</td><td>返回流中元素总数</td></tr><tr><td>max(Comparator c)</td><td>返回流中最大值</td></tr><tr><td>min(Comparator c)</td><td>返回流中最小值</td></tr><tr><td>forEach(Consumer c)</td><td>内部迭代(使用 Collection 接口需要用户去做迭代， 称为外部迭代。相反，Stream API 使用内部迭 代——它帮你把迭代做了)</td></tr></tbody></table><p>2-规约</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>reduce(T iden, BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一 个值。返回 T</td></tr><tr><td>reduce(BinaryOperator b)</td><td>可以将流中元素反复结合起来，得到一 个值。返回 Optional</td></tr></tbody></table><blockquote><p>备注：map 和 reduce 的连接通常称为 map-reduce 模式，因 Google  用它来进行网络搜索而出名。</p></blockquote><p>3-收集</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>collect(Collector c)</td><td>将流转换为其他形式。接收一个 Collector 接口的实现，用于给Stream中元素做汇总 的方法</td></tr></tbody></table><p>Collector 接口中方法的实现决定了如何对流执行收集的操作(如收集到 List、Set、 Map)。另外， Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例， 具体方法与实例如下表：</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108072226502.png" alt="image-20210807222605618"></p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108072226730.png" alt="image-20210807222624794"></p><h5 id="4-8-示例"><a href="#4-8-示例" class="headerlink" title="4.8 示例"></a>4.8 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamAPI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> 方法引用与构造器引用.Employee;</span><br><span class="line"><span class="keyword">import</span> 方法引用与构造器引用.EmployeeData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.Stream关注的是对数据的运算，与CPU打交道，集合关注的的是数据的存储</span></span><br><span class="line"><span class="comment">2.</span></span><br><span class="line"><span class="comment">①Stream 自己不会存储元素</span></span><br><span class="line"><span class="comment">②Stream 不会改变源对象，相反，他们会返回一个持有结果的新Stream</span></span><br><span class="line"><span class="comment">③Stream 操作是延迟执行的。这意味着他们会等到徐娅结果的时候才执行</span></span><br><span class="line"><span class="comment">3.Stream执行流程</span></span><br><span class="line"><span class="comment">①Stream的实例化</span></span><br><span class="line"><span class="comment">②一系列的中间操作（过滤、映射）</span></span><br><span class="line"><span class="comment">③终止操作</span></span><br><span class="line"><span class="comment">4.说明：</span></span><br><span class="line"><span class="comment">4.1 一个中间操作链，对数据源的数据进行处理</span></span><br><span class="line"><span class="comment">4.2 一旦执行终止操作，就执行中间操作链，并产生结果。之后，不会再被使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">测试Stream的实例化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAPITest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建Stream方式一：通过集合</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employeeList = EmployeeData.getEmployee();</span><br><span class="line">        <span class="comment">//default Stream&lt;E&gt; stream()：返回一个顺序流</span></span><br><span class="line">        Stream&lt;Employee&gt; stream = employeeList.stream();</span><br><span class="line">        <span class="comment">//default Stream&lt;E&gt; parallelStream()：返回一个并行流</span></span><br><span class="line">        Stream&lt;Employee&gt; paralleStream = employeeList.parallelStream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建方式二：通过数组</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//调用Arrays类的static&lt;T&gt; Stream&lt;T&gt; stream(T[] array)：返回一个流</span></span><br><span class="line">        IntStream stream = Arrays.stream(arr);</span><br><span class="line"></span><br><span class="line">        Employee e1 = <span class="keyword">new</span> Employee(<span class="number">1001</span>,<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line">        Employee e2 = <span class="keyword">new</span> Employee(<span class="number">102</span>,<span class="string">&quot;Jerry&quot;</span>);</span><br><span class="line">        Employee[] arr1 = <span class="keyword">new</span> Employee[]&#123;e1,e2&#125;;</span><br><span class="line">        Stream&lt;Employee&gt; stream1 = Arrays.stream(arr1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建方式三：通过Stream的of()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Stream&lt;Integer&gt; stream = Stream.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建方式四：创建无限流</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//迭代</span></span><br><span class="line">        <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, final UnaryOperator&lt;T&gt; f)</span></span><br><span class="line">        <span class="comment">//遍历前10个偶数</span></span><br><span class="line">        Stream.iterate(<span class="number">0</span>,t-&gt;t+<span class="number">2</span>).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成</span></span><br><span class="line">        <span class="comment">//public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s)</span></span><br><span class="line">        Stream.generate(Math::random).limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamAPI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> 方法引用与构造器引用.Employee;</span><br><span class="line"><span class="keyword">import</span> 方法引用与构造器引用.EmployeeData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamAPITest1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1-筛选与切片</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = EmployeeData.getEmployee();</span><br><span class="line">        <span class="comment">//排除元素：filter(Predicate p)——接收Lambda，从流中排除某些元素</span></span><br><span class="line">        Stream&lt;Employee&gt;stream = list.stream();</span><br><span class="line">        <span class="comment">//练习：查询员工表中薪资大于7000的员工信息</span></span><br><span class="line">        stream.filter(e -&gt; e.getSalary()&gt;<span class="number">7000</span>).forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//截断流：limt(n)使其元素不超过给定数量</span></span><br><span class="line">        list.stream().limit(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跳过元素：skip(n)返回一个扔掉了前n个元素的流。若流中元素不足n个，则返回一个空流。与limit(n)互补</span></span><br><span class="line">        list.stream().skip(<span class="number">2</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//筛选元素：distinct()——筛选，通过流所生成元素的hashCode()和equals()去除重复元素</span></span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">41</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Employee(<span class="number">1010</span>,<span class="string">&quot;刘强东&quot;</span>,<span class="number">40</span>,<span class="number">8000</span>));</span><br><span class="line">        list.stream().distinct().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.映射</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//map(Function f)——接收一个函数作为参数，将元素转换成其他形式的值或者提取信息，该函数会被引用到每个元素上，并将其映射成一个新的元素</span></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;bb&quot;</span>,<span class="string">&quot;cc&quot;</span>,<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        stringList.stream().map(String :: toUpperCase).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习1：将流中的每个值都换成另一个流，然后把所有流连接成一个流。</span></span><br><span class="line">        <span class="comment">//方式一</span></span><br><span class="line">        Stream&lt;Stream&lt;Character&gt;&gt; streamStream = stringList.stream().map(StreamAPITest1::fromStringToStream);</span><br><span class="line">        streamStream.forEach(s -&gt; s.forEach(System.out::println));</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//方式二:</span></span><br><span class="line">        Stream&lt;Character&gt; stream = stringList.stream().flatMap(StreamAPITest1::fromStringToStream);</span><br><span class="line">        stream.forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//练习2：获取员工姓名长度大于3的员工姓名</span></span><br><span class="line">        List&lt;Employee&gt; employeeList = EmployeeData.getEmployee();</span><br><span class="line">        Stream&lt;String&gt; nameStream = employeeList.stream().map(Employee :: getName);</span><br><span class="line">        nameStream.filter(s -&gt; s.length()&gt;<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Character&gt; <span class="title">fromStringToStream</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Character c :</span><br><span class="line">                str.toCharArray()) &#123;</span><br><span class="line">            list.add(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.stream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list1.add(<span class="number">1</span>);</span><br><span class="line">        list1.add(<span class="number">2</span>);</span><br><span class="line">        list1.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList list2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list2.add(<span class="number">4</span>);</span><br><span class="line">        list2.add(<span class="number">5</span>);</span><br><span class="line">        list2.add(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        list1.add(list2);</span></span><br><span class="line">        list1.addAll(list2);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//自然排序</span></span><br><span class="line">         List&lt;Integer&gt; list = Arrays.asList(<span class="number">12</span>,<span class="number">21</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">32</span>,<span class="number">54</span>,<span class="number">0</span>,-<span class="number">3</span>);</span><br><span class="line">         list.stream().sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//sorted(Comprator com)——定制排序</span></span><br><span class="line">         List&lt;Employee&gt; list1 = EmployeeData.getEmployee();</span><br><span class="line">         list1.stream().sorted((e1,e2) -&gt; &#123;</span><br><span class="line">             <span class="keyword">int</span> ageValue = Integer.compare(e1.getAge(),e2.getAge());</span><br><span class="line">             <span class="keyword">if</span>(ageValue != <span class="number">0</span>)&#123;</span><br><span class="line">                 <span class="keyword">return</span> ageValue;</span><br><span class="line">             &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="keyword">return</span> - Double.compare(e1.getSalary(),e2.getSalary());</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;).forEach(System.out::println);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StreamAPI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> 方法引用与构造器引用.Employee;</span><br><span class="line"><span class="keyword">import</span> 方法引用与构造器引用.EmployeeData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">测试Stream的终止操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StreamTest2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.匹配与查找</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employeeList = EmployeeData.getEmployee();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//allMatch(Predicate p)——检查是否匹配所有元素</span></span><br><span class="line">        <span class="comment">//练习：是否所有员工年龄都大于18</span></span><br><span class="line">        <span class="keyword">boolean</span> allMatch = employeeList.stream().allMatch(employee -&gt; employee.getAge() &gt;<span class="number">18</span>);</span><br><span class="line">        System.out.println(allMatch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//anyMatch(Predicate p)——检查是否至少匹配一个元素</span></span><br><span class="line">        <span class="comment">//练习：是否存在员工工资大于10000</span></span><br><span class="line">        <span class="keyword">boolean</span> anyMatch = employeeList.stream().anyMatch(employee -&gt; employee.getSalary()&gt;<span class="number">10000</span>);</span><br><span class="line">        System.out.println(anyMatch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//noneMatch(Predicate p)——检查是否没有匹配元素</span></span><br><span class="line">        <span class="comment">//练习：是否存在员工姓名姓“雷”</span></span><br><span class="line">        <span class="keyword">boolean</span> noneMatch = employeeList.stream().noneMatch(s -&gt; s.getName().startsWith(<span class="string">&quot;类&quot;</span>));</span><br><span class="line">        System.out.println(noneMatch);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//findFirst——返回第一个元素</span></span><br><span class="line">        Optional&lt;Employee&gt; first = employeeList.stream().findFirst();</span><br><span class="line">        System.out.println(first);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//findAny——返回当前流中的任意元素</span></span><br><span class="line">        Optional&lt;Employee&gt; any = employeeList.stream().findAny();</span><br><span class="line">        System.out.println(any);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employeeList = EmployeeData.getEmployee();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//count——返回流中元素的总个数</span></span><br><span class="line">        <span class="keyword">long</span> count = employeeList.stream().count();</span><br><span class="line">        System.out.println(count);<span class="comment">//8</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//max(Comparator c)——返回流中最大值</span></span><br><span class="line">        <span class="comment">//返回最高工资</span></span><br><span class="line">        Stream&lt;Double&gt; salaryStream = employeeList.stream().map(e -&gt; e.getSalary());</span><br><span class="line">        Optional&lt;Double&gt; maxSalary = salaryStream.max(Double::compare);</span><br><span class="line">        System.out.println(maxSalary);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//min(Comparator c)——返回流中最小值</span></span><br><span class="line">        <span class="comment">//返回最低工资</span></span><br><span class="line">        Stream&lt;Double&gt; salary = employeeList.stream().map(e -&gt; e.getSalary());</span><br><span class="line">        Optional&lt;Double&gt; minSalary= salary.min(Double::compare);</span><br><span class="line">        System.out.println(minSalary);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//forEach(Consumer c)——内部迭代</span></span><br><span class="line">        employeeList.stream().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用集合遍历操作</span></span><br><span class="line">        employeeList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2-规约</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//reduce(T identity, BinaryOperator)——可以将流中的元素反复结合起来，得到一个值。返回T</span></span><br><span class="line">        <span class="comment">//练习1：计算1-10的自然数的和</span></span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">        Integer sum = list.stream().reduce(<span class="number">0</span>,Integer :: sum);</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//reduce(BinaryOperator)——可以将流中的元素反复结合起来，得到一个值。返回Optional&lt;T&gt;</span></span><br><span class="line">        <span class="comment">//练习2：计算公司所有员工工资的总和</span></span><br><span class="line">        List&lt;Employee&gt; employeeList = EmployeeData.getEmployee();</span><br><span class="line">        Stream&lt;Double&gt; saralyStream = employeeList.stream().map(e -&gt; e.getSalary());</span><br><span class="line">        Optional&lt;Double&gt; sumSalary = saralyStream.reduce((s1,s2)-&gt;s1 + s2);</span><br><span class="line">        System.out.println(sumSalary.get());<span class="comment">//48424.08 不用.get会输出Optional[48424.08]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3-收集</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//collect(Collector c)——将流转化为其他形式。接收一个Collection接口的实现类，用于给Stream中元素做汇总的方法</span></span><br><span class="line">        <span class="comment">//查找工资大于6000的员工，结果返回为一个List或Set</span></span><br><span class="line">        List&lt;Employee&gt; employees = EmployeeData.getEmployee();</span><br><span class="line">        List&lt;Employee&gt; employeeList = employees.stream().filter(e -&gt; e.getSalary()&gt;<span class="number">6000</span>).collect(Collectors.toList());</span><br><span class="line">        employeeList.forEach(System.out::println);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Set&lt;Employee&gt; employeeSet = employees.stream().filter(e -&gt; e.getSalary()&gt;<span class="number">6000</span>).collect(Collectors.toSet());</span><br><span class="line">        employeeSet.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-Optional类"><a href="#5-Optional类" class="headerlink" title="5. Optional类"></a>5. Optional类</h4><ul><li>到目前为止，臭名昭著的空指针异常是导致Java应用程序失败的最常见原因。 以前，为了解决空指针异常，Google公司著名的Guava项目引入了Optional类， Guava通过使用检查空值的方式来防止代码污染，它鼓励程序员写更干净的代 码。受到Google Guava的启发，Optional类已经成为Java 8类库的一部分。</li><li>Optional 类(java.util.Optional) 是一个容器类，它可以保存类型T的值，代表这个值存在。或者仅仅保存null，表示这个值不存在。原来用 null 表示一个值不 存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。</li><li>Optional类的Javadoc描述如下：这是一个可以为null的容器对象。如果值存在 则isPresent()方法会返回true，调用get()方法会返回该对象。</li><li>Optional提供很多有用的方法，这样我们就不用显式进行空值检测</li><li>创建Optional类对象的方法：<ul><li>Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</li><li>Optional.empty() : 创建一个空的 Optional 实例</li><li>Optional.ofNullable(T t)：t可以为null</li></ul></li><li>判断Optional容器中是否包含对象：<ul><li>boolean isPresent() : 判断是否包含对象</li><li>void ifPresent(Consumer consumer) ：如果有值，就执行Consumer 接口的实现代码，并且该值会作为参数传给它。</li></ul></li><li>获取Optional容器的对象：<ul><li>T get(): 如果调用对象包含值，返回该值，否则抛异常</li><li>T orElse(T other) ：如果有值则将其返回，否则返回指定的other对象。</li><li>T orElseGet(Supplier other) ：如果有值则将其返回，否则返回由 Supplier接口实现提供的对象。</li><li>T orElseThrow(Supplier exceptionSupplier) ：如果有值则将其返 回，否则抛出由Supplier接口实现提供的异常。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Boy b = <span class="keyword">new</span> Boy(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">Optional&lt;Girl&gt; opt = Optional.ofNullable(b.getGrilFriend());</span><br><span class="line"><span class="comment">// 如果女朋友存在就打印女朋友的信息</span></span><br><span class="line">opt.ifPresent(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Boy b = <span class="keyword">new</span> Boy(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">Optional&lt;Girl&gt; opt = Optional.ofNullable(b.getGrilFriend());</span><br><span class="line"><span class="comment">// 如果有女朋友就返回他的女朋友，否则只能欣赏“嫦娥”了</span></span><br><span class="line">Girl girl = opt.orElse(<span class="keyword">new</span> Girl(<span class="string">&quot;嫦娥&quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;他的女朋友是：&quot;</span> + girl.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Employee&gt; opt = Optional.of(<span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">8888</span>));</span><br><span class="line"><span class="comment">//判断opt中员工对象是否满足条件，如果满足就保留，否则返回空</span></span><br><span class="line">Optional&lt;Employee&gt; emp = opt.filter(e -&gt; e.getSalary()&gt;<span class="number">10000</span>);</span><br><span class="line">System.out.println(emp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">Optional&lt;Employee&gt; opt = Optional.of(<span class="keyword">new</span> Employee(<span class="string">&quot;张三&quot;</span>, <span class="number">8888</span>));</span><br><span class="line"><span class="comment">//如果opt中员工对象不为空，就涨薪10%</span></span><br><span class="line">Optional&lt;Employee&gt; emp = opt.map(</span><br><span class="line">        e -&gt; &#123;e.setSalary(e.getSalary()%<span class="number">1.1</span>);<span class="keyword">return</span> e;&#125;);</span><br><span class="line">System.out.println(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Optional类;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Girl girl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Boy&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;girl=&quot;</span> + girl +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Girl <span class="title">getGirl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> girl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGirl</span><span class="params">(Girl girl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.girl = girl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boy</span><span class="params">(Girl girl)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.girl = girl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Optional类;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Girl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Girl&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Girl</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Optional类;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Optional类：为了在程序中避免出现空指针异常而创建的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 常用的方法：ofNullable(T t)</span></span><br><span class="line"><span class="comment"> *            orElse(T t)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Optional.of(T t) : 创建一个 Optional 实例，t必须非空；</span></span><br><span class="line"><span class="comment">Optional.empty() : 创建一个空的 Optional 实例</span></span><br><span class="line"><span class="comment">Optional.ofNullable(T t)：t可以为null</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Girl girl = <span class="keyword">new</span> Girl();</span><br><span class="line"><span class="comment">//        girl = null;</span></span><br><span class="line">        <span class="comment">//of(T t):保证t是非空的</span></span><br><span class="line">        Optional&lt;Girl&gt; optionalGirl = Optional.of(girl);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Girl girl = <span class="keyword">new</span> Girl();</span><br><span class="line"><span class="comment">//        girl = null;</span></span><br><span class="line">        <span class="comment">//ofNullable(T t)：t可以为null</span></span><br><span class="line">        Optional&lt;Girl&gt; optionalGirl = Optional.ofNullable(girl);</span><br><span class="line">        System.out.println(optionalGirl);</span><br><span class="line">        <span class="comment">//orElse(T t1):如果单前的Optional内部封装的t是非空的，则返回内部的t.</span></span><br><span class="line">        <span class="comment">//如果内部的t是空的，则返回orElse()方法中的参数t1.</span></span><br><span class="line">        Girl girl1 = optionalGirl.orElse(<span class="keyword">new</span> Girl(<span class="string">&quot;赵丽颖&quot;</span>));</span><br><span class="line">        System.out.println(girl1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGirlName</span><span class="params">(Boy boy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> boy.getGirl().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Boy boy = <span class="keyword">new</span> Boy();</span><br><span class="line">        boy = <span class="keyword">null</span>;</span><br><span class="line">        String girlName = getGirlName(boy);</span><br><span class="line">        System.out.println(girlName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//优化以后的getGirlName():</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGirlName1</span><span class="params">(Boy boy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(boy != <span class="keyword">null</span>)&#123;</span><br><span class="line">          Girl girl = boy.getGirl();</span><br><span class="line">            <span class="keyword">if</span>(girl != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> girl.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Boy boy = <span class="keyword">new</span> Boy();</span><br><span class="line">        boy = <span class="keyword">null</span>;</span><br><span class="line">        String girlName = getGirlName1(boy);</span><br><span class="line">        System.out.println(girlName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Optional类的getGirlName():</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGirlName2</span><span class="params">(Boy boy)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Boy&gt; boyOptional = Optional.ofNullable(boy);</span><br><span class="line">        <span class="comment">//此时的boy1一定非空</span></span><br><span class="line">        Boy boy1 = boyOptional.orElse(<span class="keyword">new</span> Boy(<span class="keyword">new</span> Girl(<span class="string">&quot;迪丽热巴&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        Girl girl = boy1.getGirl();</span><br><span class="line"></span><br><span class="line">        Optional&lt;Girl&gt; girlOptional = Optional.ofNullable(girl);</span><br><span class="line">        <span class="comment">//girl1一定非空</span></span><br><span class="line">        Girl girl1 = girlOptional.orElse(<span class="keyword">new</span> Girl(<span class="string">&quot;古力娜扎&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> girl1.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Boy boy = <span class="keyword">null</span>;</span><br><span class="line">        boy = <span class="keyword">new</span> Boy();</span><br><span class="line">        boy = <span class="keyword">new</span> Boy(<span class="keyword">new</span> Girl(<span class="string">&quot;苍老师&quot;</span>));</span><br><span class="line">        String girlName = getGirlName2(boy);</span><br><span class="line">        System.out.println(girlName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Java8的其他新特性</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>15-反射机制</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/15%E2%80%94%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/15%E2%80%94%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2021-09-16T17:27:14.971Z</published>
    <updated>2021-08-26T11:31:08.694Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="15—反射机制"><a href="#15—反射机制" class="headerlink" title="15—反射机制"></a>15—反射机制</h3><h4 id="1-Java反射机制概述"><a href="#1-Java反射机制概述" class="headerlink" title="1. Java反射机制概述"></a>1. Java反射机制概述</h4><h5 id="1-1Java-Reflection"><a href="#1-1Java-Reflection" class="headerlink" title="1.1Java Reflection"></a>1.1Java Reflection</h5><ul><li><p>Reflection(反射)是被是为动态语言的关键，反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法</p></li><li><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以我们形象的称之为：反射</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108051058768.png" alt="image-20210805105812183"></p></li></ul><p><strong>动态语言VS静态语言</strong></p><ol><li><p>动态语言</p><p>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗来说就是在运行时代码可以根据某些条件改变自身结构</p><p>主要的动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。</p></li><li><p>静态语言</p><p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++</p><blockquote><p>Java不是动态语言，但Java可以称为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制、字节码操作获得类似动态语言的特性。</p></blockquote></li></ol><h5 id="1-2-Java反射机制研究及应用"><a href="#1-2-Java反射机制研究及应用" class="headerlink" title="1.2 Java反射机制研究及应用"></a>1.2 Java反射机制研究及应用</h5><ul><li>Java反射机制提供的功能<ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul></li></ul><h5 id="1-3-反射相关的主要API"><a href="#1-3-反射相关的主要API" class="headerlink" title="1.3 反射相关的主要API"></a>1.3 反射相关的主要API</h5><ul><li>java.lang.Class：代表一个类</li><li>java.lang.reflect.Method：代表类的方法</li><li>java.lang.reflect.Field：代表类的成员变量</li><li>java.lang.reflect.Constructor：代表类的构造器</li></ul><h4 id="2-理解Class类并获取Class实例"><a href="#2-理解Class类并获取Class实例" class="headerlink" title="2.理解Class类并获取Class实例"></a>2.理解Class类并获取Class实例</h4><h5 id="2-1-Class类"><a href="#2-1-Class类" class="headerlink" title="2.1 Class类"></a>2.1 Class类</h5><p>在Object类中定义了以下方法，此方法将被所有子类继承</p><ul><li><p>public final Class getClass()</p><p>以上方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108051121088.png" alt="image-20210805112119113"></p></li><li><p>对象照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE都为其保留了一个不变的Class类型的对象。一个Class对象包括了特定某个结构(class/interface/enum/annotation/primitive type/void[])的有关信息</p><ul><li>Class本身也是一个类</li><li>Class对象只能由系统建立对象</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个Class实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul></li></ul><h5 id="2-2-Class类的常用方法"><a href="#2-2-Class类的常用方法" class="headerlink" title="2.2 Class类的常用方法"></a>2.2 Class类的常用方法</h5><table><thead><tr><th>方法名</th><th>功能说明</th></tr></thead><tbody><tr><td>static Class forName(String name)</td><td>返回指定类名name的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回该Class对象的一个实例</td></tr><tr><td>getName()</td><td>返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</td></tr><tr><td>Class getSuperClass()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td>Class[] getInterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的加载器</td></tr><tr><td>Class getSuperclass()</td><td>返回表示此Class所表示的实体类的超类的Class</td></tr><tr><td>Construct[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Field[] getDeclareFields()</td><td>返回Field对象的一个数组</td></tr><tr><td>Method getMethod(String name, Class … paramTypes)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr></tbody></table><h5 id="2-3-反射的应用举例"><a href="#2-3-反射的应用举例" class="headerlink" title="2.3 反射的应用举例"></a>2.3 反射的应用举例</h5> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 反射的引入;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">showNation</span><span class="params">(String nation)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我的国籍是：&quot;</span> + nation);</span><br><span class="line">        <span class="keyword">return</span> nation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Person类里的show()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class clazz = Person.class;</span><br><span class="line">        <span class="comment">//1.通过反射，创建Person类的对象</span></span><br><span class="line">        Constructor cons = clazz.getConstructor(String.class,<span class="keyword">int</span>.class);</span><br><span class="line">        Object obj = cons.newInstance(<span class="string">&quot;xiong&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        Person person = (Person) obj;</span><br><span class="line">        System.out.println(person);<span class="comment">//Person&#123;name=&#x27;xiong&#x27;, age=23&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过反射，调用对象指定的属性和方法</span></span><br><span class="line">        <span class="comment">//调用属性</span></span><br><span class="line">        Field age = clazz.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.set(person,<span class="number">10</span>);</span><br><span class="line">        System.out.println(person);<span class="comment">//Person&#123;name=&#x27;xiong&#x27;, age=10&#125;</span></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        Method show = clazz.getMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        show.invoke(person);<span class="comment">//Person类里的show()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;|++++++++++++++++++++++++|&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过反射可以调用类的私有结构。比如：私有的构造器、方法、属性</span></span><br><span class="line">        <span class="comment">//调用私有的构造器</span></span><br><span class="line">        Constructor cons1 = clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        cons1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Person person1 = (Person)cons1.newInstance(<span class="string">&quot;zhuo&quot;</span>);</span><br><span class="line">        System.out.println(person1);<span class="comment">//Person&#123;name=&#x27;zhuo&#x27;, age=0&#125;</span></span><br><span class="line">        <span class="comment">//调用私有的属性</span></span><br><span class="line">        Field name = clazz.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(person1,<span class="string">&quot;Guet&quot;</span>);</span><br><span class="line">        System.out.println(person1);<span class="comment">//Person&#123;name=&#x27;Guet&#x27;, age=0&#125;</span></span><br><span class="line">        <span class="comment">//调用私有方法</span></span><br><span class="line">        Method showNation = clazz.getDeclaredMethod(<span class="string">&quot;showNation&quot;</span>, String.class);</span><br><span class="line">        showNation.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        String nation = (String) showNation.invoke(person1,<span class="string">&quot;中国&quot;</span>);<span class="comment">//我的国籍是：中国</span></span><br><span class="line">        System.out.println(nation);<span class="comment">//中国</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-4-获取Class类的四种实例（四种方法）"><a href="#2-4-获取Class类的四种实例（四种方法）" class="headerlink" title="2.4 获取Class类的四种实例（四种方法）"></a>2.4 获取Class类的四种实例（四种方法）</h5><ol><li><p>前提；若已知具体的类，通过类的class属性获取。该方法最为可靠，程序性能最高</p><p>实例：Class clazz = String.class;</p></li><li><p>前提：已知某个类的实例，调用该实例的getClass()方法获取Class对象</p><p>实例：Class clazz = “reflection”.getClass();</p></li><li><p>前提：已知一个类的全类名，且该类在类路径下，可以通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</p><p>实例：Class class = Class.forName(“java.lang.String”);</p></li><li><p>其他方式</p><p>ClassLoader cl = this.getClass().getClassLoader();</p><p>Class clazz = cl.loadClass(“类的全类名”)；</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//方式一：调用运行时类的属性：.class</span></span><br><span class="line">        Class clazz1 = Person.class;</span><br><span class="line">        System.out.println(clazz1);<span class="comment">//class 获取Class的实例方式.Person</span></span><br><span class="line">        <span class="comment">//方式二：通过运行时类的对象，调用getClass()</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        Class clazz2 = p1.getClass();</span><br><span class="line">        System.out.println(clazz2);<span class="comment">//class 获取Class的实例方式.Person</span></span><br><span class="line">        <span class="comment">//方式三：调用Class的静态方法：forName(String classPath)</span></span><br><span class="line">        Class clazz3 = Class.forName(<span class="string">&quot;获取Class的实例方式.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz3);<span class="comment">//class 获取Class的实例方式.Person</span></span><br><span class="line"></span><br><span class="line">        System.out.println(clazz1 == clazz2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(clazz2 == clazz3);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式四：使用类加载器：ClassLoader</span></span><br><span class="line">        ClassLoader classLoader = GetClassTest.class.getClassLoader();</span><br><span class="line">        Class clazz4 = classLoader.loadClass(<span class="string">&quot;获取Class的实例方式.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz4);<span class="comment">//class 获取Class的实例方式.Person</span></span><br><span class="line"></span><br><span class="line">        System.out.println(clazz3 == clazz4);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-哪些类型可以有Class对象"><a href="#2-5-哪些类型可以有Class对象" class="headerlink" title="2.5 哪些类型可以有Class对象"></a>2.5 哪些类型可以有Class对象</h5><ol><li>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</li><li>interface：接口</li><li>[]：数组</li><li>enum：枚举</li><li>annotation：注解@interface</li><li>primitive type：基本数据类型</li><li>void</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class c1 = Object.class;</span><br><span class="line">Class c2 = Comparable.class;</span><br><span class="line">Class c3 = String[].class;</span><br><span class="line">Class c4 = <span class="keyword">int</span>[][].class;</span><br><span class="line">Class c5 = ElementType.class;</span><br><span class="line">Class c6 = Override.class;</span><br><span class="line">Class c7 = <span class="keyword">int</span>.class;</span><br><span class="line">Class c8 = <span class="keyword">void</span>.class;</span><br><span class="line">Class c9 = Class.class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">Class c10 = a.getClass();</span><br><span class="line">Class c11 = b.getClass();</span><br><span class="line"><span class="comment">//只要元素类型与维度一样，就是同一个Class</span></span><br><span class="line">System.out.println(c10 == c11);</span><br></pre></td></tr></table></figure><h4 id="3-类的加载与ClassLoader的理解"><a href="#3-类的加载与ClassLoader的理解" class="headerlink" title="3.类的加载与ClassLoader的理解"></a>3.类的加载与ClassLoader的理解</h4><h5 id="3-1-类的加载过程"><a href="#3-1-类的加载过程" class="headerlink" title="3.1 类的加载过程"></a>3.1 类的加载过程</h5><p>当程序主动使用了某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108051455506.png" alt="image-20210805145547292"></p><ul><li>加载：将class文件字节码内容加载到内存中，并将这些静态数据转化成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与</li><li>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。<ul><li>验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题</li><li>准备：正式为类变量（static）分配内存并设置类变量默认的初始值的阶段，这些内存都将在方法区中进行分配</li><li>解析：虚拟机常量池的符号引用（常量名）替换为直接引用（地址）的过程</li></ul></li><li>初始化：<ul><li>执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的（类构造器是构造类信息的，不是构造该类对象的构造器）</li><li>当初始化一个类的时候，如果发现其父类还没进行初始化，则需要先触发其父类的初始化</li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确的加锁和同步</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadingTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(A.m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">m = <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第二步：链接结束后m=0</span></span><br><span class="line"><span class="comment">//第三步：初始化后，m的值由&lt;clinit&gt;()方法执行决定</span></span><br><span class="line"><span class="comment">// 这个A的类构造器&lt;clinit&gt;()方法由类变量的赋值和静态代码块中的语句按照顺序合并产生，类似于</span></span><br><span class="line"><span class="comment">// &lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">// m = 300;</span></span><br><span class="line"><span class="comment">// m = 100;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h5 id="3-2-什么时候会发生类初始化"><a href="#3-2-什么时候会发生类初始化" class="headerlink" title="3.2 什么时候会发生类初始化"></a>3.2 什么时候会发生类初始化</h5><ul><li>类的主动引用（一定会发生类的初始化）<ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则会先初始化它的父类</li></ul></li><li>类的被动引用（不会发生类的初始化）<ul><li>当访问一个静态域时，只有真正声明了这个域的类才会被初始化<ul><li>当通过子类引用父类的静态变量时，不会导致子类初始化</li></ul></li><li>通过数组定义类的引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadingTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 主动引用：一定会导致A和Father的初始化</span></span><br><span class="line"><span class="comment">// A a = new A();</span></span><br><span class="line"><span class="comment">// System.out.println(A.m);</span></span><br><span class="line"><span class="comment">// Class.forName(&quot;com.atguigu.java2.A&quot;);</span></span><br><span class="line"><span class="comment">// 被动引用</span></span><br><span class="line">A[] array = <span class="keyword">new</span> A[<span class="number">5</span>];<span class="comment">//不会导致A和Father的初始化</span></span><br><span class="line"><span class="comment">// System.out.println(A.b);//只会初始化Father</span></span><br><span class="line"><span class="comment">// System.out.println(A.M);//不会导致A和Father的初始化</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;main所在的类&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;父类被加载&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;子类被加载&quot;</span>);</span><br><span class="line">m = <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108051708546.png" alt="image-20210805170831278"></p><h5 id="3-3-类加载器的作用"><a href="#3-3-类加载器的作用" class="headerlink" title="3.3 类加载器的作用"></a>3.3 类加载器的作用</h5><ul><li>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转化成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</li><li>类缓存：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象类加载器作用是用来把类(class)装载进内存的。JVM规范定义了如下类型的类的加载器</li></ul><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108051715466.png" alt="image-20210805171547278"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取一个系统类加载器</span></span><br><span class="line">ClassLoader classloader = ClassLoader.getSystemClassLoader();</span><br><span class="line">System.out.println(classloader);</span><br><span class="line"><span class="comment">//2.获取系统类加载器的父类加载器，即扩展类加载器</span></span><br><span class="line">classloader = classloader.getParent();</span><br><span class="line">System,out.println(classloader);</span><br><span class="line"><span class="comment">//3.获取扩展类的加载器的父类加载器，即引导类的加载器</span></span><br><span class="line">classloader = classloader.getParent();</span><br><span class="line">System.out.println(classloader);</span><br><span class="line"><span class="comment">//4.测试当前类由哪个类加载器进行加载</span></span><br><span class="line">classloader = Class.forName(<span class="string">&quot;exer2.ClassloaderDemo&quot;</span>).getClassLoader();</span><br><span class="line">System.out.println(classloader);</span><br><span class="line"><span class="comment">//5.测试JDK提供的Object类由哪个类加载器加载</span></span><br><span class="line">classloader = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">System.out.println(classloader);</span><br><span class="line"><span class="comment">//6.关于类加载器的一个主要方法：getResourceAsStream(String str)：获取类路径下的指定文件的输入流</span></span><br><span class="line">InputStream in = <span class="keyword">null</span>;</span><br><span class="line">in = <span class="keyword">this</span>.getClass.getClassLoader().getResourceAsStream(<span class="string">&quot;反射\\文件\\test.properties&quot;</span>);</span><br><span class="line">System.out.println(in);</span><br></pre></td></tr></table></figure><p><strong>实践</strong></p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108110956620.png" alt="image-20210811095555132"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 类的加载;</span><br><span class="line"><span class="comment">//了解类的加载器</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//对于自定义类，使用系统类加载器进行加载</span></span><br><span class="line">        ClassLoader classLoader1 = ClassLoaderTest.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader1);<span class="comment">//sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class="line">        <span class="comment">//调用系统类加载器的getParent()：获取扩展类加载器</span></span><br><span class="line">        ClassLoader classLoader2 = classLoader1.getParent();</span><br><span class="line">        System.out.println(classLoader2);<span class="comment">//sun.misc.Launcher$ExtClassLoader@28a418fc</span></span><br><span class="line">        <span class="comment">//调用扩展类加载器的getParent()：无法获得类引导加载器</span></span><br><span class="line">        <span class="comment">//引导加载器主要负责加载java的核心类库，无法加载自定义类</span></span><br><span class="line">        ClassLoader classLoader3 = classLoader2.getParent();</span><br><span class="line">        System.out.println(classLoader3);<span class="comment">//null</span></span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader4 = String.class.getClassLoader();</span><br><span class="line">        System.out.println(classLoader4);<span class="comment">//null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Properties：用来读取配置文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//此时文件默认在当前Module下</span></span><br><span class="line">        <span class="comment">//读取配置文件方式一：</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        pros.load(fis);</span><br><span class="line"></span><br><span class="line">        String user = pros.getProperty(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">&quot;密码&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + user + <span class="string">&quot; 密码：&quot;</span> + password);<span class="comment">//姓名：熊卓 密码：1234</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取配置文件方式二：使用ClassLoader</span></span><br><span class="line">        <span class="comment">//配置文件默认识别为：当前Module的src下</span></span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest.class.getClassLoader();</span><br><span class="line"><span class="comment">//        InputStream is = classLoader.getResourceAsStream(&quot;C:\\Users\\xiong\\IdeaProjects\\反射\\src\\jdbc.properties&quot;);//无法识别</span></span><br><span class="line">        InputStream is = classLoader.getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">        pros.load(is);</span><br><span class="line"></span><br><span class="line">        String user1 = pros.getProperty(<span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">        String password1 = pros.getProperty(<span class="string">&quot;密码&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名：&quot;</span> + user1 + <span class="string">&quot; 密码：&quot;</span> + password1);<span class="comment">//姓名：熊卓GUET 密码：12345678</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-创建运行时类的对象"><a href="#4-创建运行时类的对象" class="headerlink" title="4.创建运行时类的对象"></a>4.创建运行时类的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 创建运行时类;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">通过反射创建运行时类的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewInstanceTest</span>  </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line">        Class&lt;Person&gt; clazz = Person.class;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        newInstance()：调用此方法，创建对应的运行时类的对象。内部调用了运行时类的空参构造器</span></span><br><span class="line"><span class="comment">        想要此方法正常的创建运行时类的对象，要求；</span></span><br><span class="line"><span class="comment">        1.运行时类必须提供空参的构造器</span></span><br><span class="line"><span class="comment">        2.空参构造器的访问权限得够，通常设置为public</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        在javabean中要求提供一个public的空参构造器。原因：</span></span><br><span class="line"><span class="comment">        1.便于通过反射，创建运行时类的对象</span></span><br><span class="line"><span class="comment">        2.便于子类继承此类运行时类时，默认调用super()时，保证父类有此构造器</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person obj = clazz.newInstance();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        调用空参构造器</span></span><br><span class="line"><span class="comment">        Person&#123;name=&#x27;null&#x27;, age=0&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//体会反射的动态性</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="keyword">new</span> Random().nextInt(<span class="number">3</span>);<span class="comment">//0,1,2</span></span><br><span class="line">            String classPath = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">switch</span>(num)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.util.Date&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    classPath = <span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="comment">//                    classPath = &quot;创建运行时类&quot;+ File.separator+&quot;Person&quot;; //无法识别中文路径</span></span><br><span class="line">                    classPath = <span class="string">&quot;java.lang.Object&quot;</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Object obj = getInstance(classPath);</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建一个指定类的对象</span></span><br><span class="line"><span class="comment">    classPath：指定类的全类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(String classPath)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Class clazz = Class.forName(classPath);</span><br><span class="line">        <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-1-有了Class对象能做什么"><a href="#4-1-有了Class对象能做什么" class="headerlink" title="4.1 有了Class对象能做什么"></a>4.1 有了Class对象能做什么</h5><p>创建类的对象：调用Class对象的newInstance()方法</p><p>要求：1. 类必须要有无参构造器； 2. 类的构造器的访问权限需要足够</p><p>难道没有无参构造器就不能创建对象了吗？</p><p>不是，只要在操作的时候明确调用类中的构造器，并将参数传递进去之后，才可以实例化操作。步骤如下：</p><ol><li><p>通过Class类的getDeclaredConstruct(Class … parameterTypes)取得本类的指定形参类型的构造器</p></li><li><p>向构造器的形成中传递一个对象数组进去，里面包含了构造器中那个所需的各个参数</p></li><li><p>通过Construct实例化对象</p><p>在Constructor类中存在一个方法：</p><p><code>public T newInstance(Object ... initargs)</code></p><p>以上是反射机制应用最多的地方</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.根据全类名获取对应的Class对象</span></span><br><span class="line">String name = <span class="string">&quot;reflection.Person&quot;</span>;</span><br><span class="line">Class clazz = <span class="keyword">null</span>;</span><br><span class="line">clazz = Class.forName(name);</span><br><span class="line"><span class="comment">//2.调用指定参数结构的构造器，生成Constructor实例</span></span><br><span class="line">Constructor con = clazz.getConstructor(String.class,Integer.class);</span><br><span class="line"><span class="comment">//3.通过Constructor的实例创建对应类的对象，并初始化类的属性</span></span><br><span class="line">Person p2 = (Person)con.newInstance(<span class="string">&quot;Peter&quot;</span>,<span class="number">20</span>);</span><br><span class="line">System.out.println(p2);</span><br></pre></td></tr></table></figure><h4 id="5-获取运行时类的完整结构"><a href="#5-获取运行时类的完整结构" class="headerlink" title="5.获取运行时类的完整结构"></a>5.获取运行时类的完整结构</h4><h5 id="5-1-通过反射获取运行时类的完整结构"><a href="#5-1-通过反射获取运行时类的完整结构" class="headerlink" title="5.1 通过反射获取运行时类的完整结构"></a>5.1 通过反射获取运行时类的完整结构</h5><p><strong>Field、Method、Construct、Superclass、Interface、Annotation</strong></p><ul><li>实现的全部接口</li><li>所继承的父类</li><li>全部的构造器</li><li>全部的方法</li><li>全部的Field</li></ul><p><strong>实现反射可以取得：</strong></p><p>1.实现的全部接口</p><ul><li><p>public Class&lt;?&gt;[] getInterfaces()</p><p>确定此对象所表示的类或接口实现的接口</p></li></ul><p>2.所继承的父类</p><ul><li><p>public Class&lt;? Super T&gt; getSuperclass()</p><p>返回表示此Class所表示的实体（类、接口、基本类型）的父类的Class</p></li></ul><p>3.全部的构造器</p><ul><li><p>public Constructor<T>[] getConstruct()</p><p>返回此Class对象所表示的类的所有public构造方法</p></li><li><p>public Constructor<T>[] getDeclaredConstructors()</p><p>返回此Class对象表示的类声明的所有构造方法</p></li></ul><p>Constructor类中</p><ul><li>取得修饰符：public int getModifiers()</li><li>取得方法名称：public String getName()</li><li>取得参数的类型：public Class&lt;?&gt;[] getParameterTypes()</li></ul><p>4.全部的方法</p><ul><li><p>public Method[] getDeclaredMethods()</p><p>返回此Class对象所表示的类或接口的全部方法</p></li><li><p>public Method[] getMethods()</p><p>返回此Class对象所表示的类或接口的public的方法</p></li></ul><p>Method类中</p><ul><li>public Class&lt;?&gt; getReturnType()取得全部的返回值</li><li>public Class&lt;?&gt;[] getParameterTypes取得全部的参数</li><li>public int getMethodifiers()取得修饰符</li><li>public Class&lt;?&gt;[] getExceptionTypes()取得异常信息</li></ul><p>5.全部的Field</p><ul><li><p>public Field[] getFields()</p><p>返回此Class对象所表示的类或接口的public的Field</p></li><li><p>public Field[] getDeclaredFields()</p><p>返回此Class对象所表示的类或接口的全部Fiels</p></li></ul><p>Field方法中</p><ul><li>public int getModifiers()以整数形式返回此Field的修饰符</li><li>public Class&lt;?&gt; getType()得到Field的属性类型</li><li>public String getName()返回Field的名称</li></ul><p>6.Annotation相关</p><ul><li>get Annotation(Class<T> annotaionClass)</li><li>getDeclaredAnnotations()</li></ul><p>7.泛型相关</p><p>获取父类泛型类型：Type getGenericSuperclass()</p><p>泛型类型：ParameterizedType</p><p>获取实际的泛型类型参数数组：getActualTypeArguments()</p><p>8.类所在的包 Package getPackage()</p><h4 id="6-调用运行时类的指定结构"><a href="#6-调用运行时类的指定结构" class="headerlink" title="6.调用运行时类的指定结构"></a>6.调用运行时类的指定结构</h4><h5 id="6-1-调用指定方法"><a href="#6-1-调用指定方法" class="headerlink" title="6.1 调用指定方法"></a>6.1 调用指定方法</h5><p>通过反射，调用类中的方法，通过Method类完成。步骤：</p><ol><li>通过Class类的getMethod(String name, Class … parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型</li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息</li></ol><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108061424618.png" alt="image-20210806142442981"></p><p><strong>Object invoke(Object obj, Object … args)</strong></p><p>说明：</p><ol><li>Object对应原方法的返回值，若原方法无返回值，此时返回null</li><li>若原方法为静态方法，此时形参Object obj可为null</li><li>若原方法形参列表为空，则Object[] args为null</li><li>若原方法声明为private，则需要在调用此invoke()方法之前，显示调用方法对象的setAccessible(true)方法，将可访问private的方法</li></ol><h5 id="6-2-调用属性"><a href="#6-2-调用属性" class="headerlink" title="6.2 调用属性"></a>6.2 调用属性</h5><p>在反射机制中，可以直接通过Field类操作类中的属性，通过Field类提供的set()和get()方法就可以完成设置和取得属性内容的操作</p><ul><li>public Field getField(String name)返回此Class对象表示的类或接口的指定的public的Field</li><li>public Field getDeclaredField(String name)返回此Class对象表示的类或接口的指定的Field</li><li>在Field中：<ul><li>public Object get(Object obj)取得指定对象obj上此Field的属性内容</li><li>public void set(Object obj, Object value)设置指定对象obj上此Field的属性内容</li></ul></li></ul><h5 id="6-3-关于setAccessible方法的使用"><a href="#6-3-关于setAccessible方法的使用" class="headerlink" title="6.3 关于setAccessible方法的使用"></a>6.3 关于setAccessible方法的使用</h5><ul><li>Method和Field、Constructor对象都有setAccessible()方法</li><li>setAccessible启动和禁用访问安全检查的开关</li><li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查<ul><li>提高反射的效率。如果代码中必须使用放射，而该句代码需要频繁的被调用，那么请设置为true</li><li>使得原本无法访问的私有成员也可以访问</li></ul></li><li>参数值为false则指示反射的对象应该实施Java语言访问检查</li></ul><h4 id="7-反射的引用：动态代理"><a href="#7-反射的引用：动态代理" class="headerlink" title="7.反射的引用：动态代理"></a>7.反射的引用：动态代理</h4><h5 id="7-1-代理设计模式的原理"><a href="#7-1-代理设计模式的原理" class="headerlink" title="7.1 代理设计模式的原理"></a>7.1 代理设计模式的原理</h5><p>使用一个代理将对象包装起来，然后用该代理取得原始对象。任何对原始对象的调用都要通过代理。代理对象决定是否以及何时将方法调用转到原始对象上</p><ul><li><p>动态代理是指客户通过代理类来调用其他对象的方法，并且是在程序运行时根据需要动态创建目标类的代理对象</p></li><li><p>动态代理使用场合</p><ul><li>调试</li><li>远程方法调用</li></ul></li><li><p>动态代理相比于静态代理的优点</p><p>抽象角色中（接口）声明的所有方法都被转移到调用处理器一个集中的方法中处理，这样，我们可以更加灵活统一的处理众多的方法</p></li></ul><h5 id="7-2-Java动态代理相关API"><a href="#7-2-Java动态代理相关API" class="headerlink" title="7.2 Java动态代理相关API"></a>7.2 Java动态代理相关API</h5><ul><li>Proxy：专门完成代理的操作类，是所有动态代理类的父类。通过此类为一个或多个接口动态的生成实现类</li><li>提供用于创建动态代理类和动态代理对象的静态方法<ul><li>static Class<?> getProxyClass(ClassLoader loader, Class<?> … interface)创建一个动态代理类所对应的Class对象</li><li><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108061451071.png" alt="image-20210806145058217"></li></ul></li></ul><h5 id="7-3-动态代理步骤"><a href="#7-3-动态代理步骤" class="headerlink" title="7.3 动态代理步骤"></a>7.3 动态代理步骤</h5><ol><li><p>创建一个实现接口InvocationHandler的类，它必须实现invoke方法，以完成代理的具体操作。</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108162129142.jpg" alt="Inked202108061453500_LI"></p></li><li><p>创建被代理的类以及接口</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108061453573.png" alt="image-20210806145355114"></p></li><li><p>通过Proxy的静态方法 newProxyInstance(ClassLoader loader, Class[] interfaces, InvocationHandler h) 创建 一个Subject接口代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RealSubject target = <span class="keyword">new</span> RealSubject();</span><br><span class="line"><span class="comment">// Create a proxy to wrap the original implementation</span></span><br><span class="line">DebugProxy proxy = <span class="keyword">new</span> DebugProxy(target);</span><br><span class="line"><span class="comment">// Get a reference to the proxy through the Subject interface</span></span><br><span class="line">Subject sub = (Subject) Proxy.newProxyInstance(</span><br><span class="line">Subject.class.getClassLoader(),<span class="keyword">new</span> Class[] &#123; Subject.class &#125;, proxy);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>通过 Subject代理调用RealSubject实现类的方法</p><p><code>String info = sub.say(“Peter&quot;, 24);</code></p><p><code>System.out.println(info);</code></p></li></ol><h5 id="7-4-动态代理与AOP（Aspect-Orient-Programming"><a href="#7-4-动态代理与AOP（Aspect-Orient-Programming" class="headerlink" title="7.4 动态代理与AOP（Aspect Orient Programming)"></a>7.4 动态代理与AOP（Aspect Orient Programming)</h5><p>前面介绍的Proxy和InvocationHandler，很难看出这种动态代理的优势，下 面介绍一种更实用的动态代理机制</p><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108162131985.jpg" alt="Inked202108061456771_LI"></p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108061457620.png" alt="image-20210806145706453"></p><blockquote><p>改进后的说明：代码段1、代码段2、代码段3和深色代码段分离开了，但代码段1、2、3又和 一个特定的方法A耦合了！最理想的效果是：代码块1、2、3既可以执行方法A，又无须在程序 中以硬编码的方式直接调用深色代码的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HuntingDog</span> <span class="keyword">implements</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是一只猎狗&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我奔跑迅速&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogUtil</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;=====模拟通用方法一=====&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;=====模拟通用方法二=====&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line"><span class="comment">// 需要被代理的对象</span></span><br><span class="line"><span class="keyword">private</span> Object target;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.target = target;&#125;</span><br><span class="line"><span class="comment">// 执行动态代理对象的所有方法时，都会被替换成执行如下的invoke方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">DogUtil du = <span class="keyword">new</span> DogUtil();</span><br><span class="line"><span class="comment">// 执行DogUtil对象中的method1。</span></span><br><span class="line">du.method1();</span><br><span class="line"><span class="comment">// 以target作为主调来执行method方法</span></span><br><span class="line">Object result = method.invoke(target , args);</span><br><span class="line"><span class="comment">// 执行DogUtil对象中的method2。</span></span><br><span class="line">du.method2();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxyFactory</span></span>&#123;</span><br><span class="line"><span class="comment">// 为指定target生成动态代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(Object target)</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">// 创建一个MyInvokationHandler对象</span></span><br><span class="line">MyInvokationHandler handler = </span><br><span class="line"><span class="keyword">new</span> MyInvokationHandler();</span><br><span class="line"><span class="comment">// 为MyInvokationHandler设置target对象</span></span><br><span class="line">handler.setTarget(target);</span><br><span class="line"><span class="comment">// 创建、并返回一个动态代理对象</span></span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces() , handler);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">// 创建一个原始的HuntingDog对象，作为target</span></span><br><span class="line">Dog target = <span class="keyword">new</span> HuntingDog();</span><br><span class="line"><span class="comment">// 以指定的target来创建动态代理</span></span><br><span class="line">Dog dog = (Dog)MyProxyFactory.getProxy(target);</span><br><span class="line">dog.info();</span><br><span class="line">dog.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用Proxy生成一个动态代理时，往往并不会凭空产生一个动态代理，这样没有 太大的意义。通常都是为指定的目标对象生成动态代理</li><li>这种动态代理在AOP中被称为AOP代理，AOP代理可代替目标对象，AOP代理 包含了目标对象的全部方法。但AOP代理中的方法与目标对象的方法存在差异： AOP代理里的方法可以在执行目标方法之前、之后插入一些通用处理</li><li><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/202108061502837.png" alt="image-20210806150224762"></li></ul>]]></content>
    
    
    <summary type="html">反射机制</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>14-网络编程</title>
    <link href="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/14%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/2021/09/17/14%E2%80%94%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2021-09-16T17:27:14.969Z</published>
    <updated>2021-08-16T13:22:31.749Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="14—网络编程"><a href="#14—网络编程" class="headerlink" title="14—网络编程"></a>14—网络编程</h3><h4 id="1-网络编程概述"><a href="#1-网络编程概述" class="headerlink" title="1. 网络编程概述"></a>1. 网络编程概述</h4><ul><li>Java是Internet上的语言，它从语言级上提供了对网络应用程序的支持，程序员能够很容易开发常见的网络程序应用</li><li>Java提供的网络类库。可以实现无痛的网络连接，联网的底层细节被隐藏在Java的本机安装系统里，由JVM进行控制。并且Java实现了一个跨平台的网络库，程序员面对的是一个同一的网络编程环境</li><li>网络编程的目的：直接或间接地通过网络协议与其他计算机实现数据交换，进行通讯</li><li>网络编程中有两个主要的问题：<ul><li>如何准确地定位网络上一台或多台主机；定位主机上的特定应用</li><li>找到主机后如何可靠高效地进行数据传输</li></ul></li></ul><h4 id="2-网络通信要素概括"><a href="#2-网络通信要素概括" class="headerlink" title="2. 网络通信要素概括"></a>2. 网络通信要素概括</h4><h5 id="2-1-如何实现网络中地主机相互通信"><a href="#2-1-如何实现网络中地主机相互通信" class="headerlink" title="2.1 如何实现网络中地主机相互通信"></a>2.1 如何实现网络中地主机相互通信</h5><ul><li>通信双方地址<ul><li>IP</li><li>端口号</li></ul></li><li>一定的规则（即：网络通信协议。有两套参考模型）<ul><li>OSI参考模型：模型过于理想化，未能在英特网上进行广泛推广</li><li>TCP/IP参考模型（或TCP/IP协议）：事实上的国际标准</li></ul></li></ul><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801113613.png" alt="image-20210801113602577"></p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801113651.png" alt="image-20210801113649784"></p><h4 id="3-通信要素1：IP和端口号"><a href="#3-通信要素1：IP和端口号" class="headerlink" title="3. 通信要素1：IP和端口号"></a>3. 通信要素1：IP和端口号</h4><h5 id="3-1-IP地址：InetAddress"><a href="#3-1-IP地址：InetAddress" class="headerlink" title="3.1 IP地址：InetAddress"></a>3.1 IP地址：InetAddress</h5><ul><li><p>唯一的标识Internet上的计算机（通信实体）</p></li><li><p>本地回环地址（hostAddress）：127.0.0.1 主机名（hostName）：localhost</p></li><li><p>IP地址分类方式1：IPV4 和 IPV6</p><ul><li>IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1</li><li>IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示， 数之间用冒号（：）分开，如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li></ul></li><li><p>IP地址分类方式2：公网地址（万维网使用）和私有地址（局域网使用）。192.168. 开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</p></li><li><p>端口号标识正在计算机上运行的进程（程序）</p><ul><li>不同的进程有不同的端口号</li><li>被规定为一个16位的整数0-65535</li><li>端口分类：<ul><li>公认端口：0-1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，TeInet占用端口23）</li><li>注册端口：1024-49151分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3360，Oracle占用端口1521等）</li><li>动态/私有端口：49152-65535</li></ul></li></ul></li><li><p>端口号与IP地址的组合得出一个网络套接字：Socket</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801121803.png" alt="image-20210801121801521"></p></li></ul><h5 id="3-2-InetAddress类"><a href="#3-2-InetAddress类" class="headerlink" title="3.2 InetAddress类"></a>3.2 InetAddress类</h5><ul><li>Internet上的主机有两种方式表示地址：<ul><li>域名（hostName)：<a href="http://www.baidu.com/">www.baidu.com</a></li><li>IP地址（hostAddress）：202.108.22.5</li></ul></li><li>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address</li><li>InetAddress类对象主要含有一个Internet主机地址的域名和IP地址：<a href="http://www.baidu.com和202.108.22.5/">www.baidu.com和202.108.22.5</a></li><li>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS)负责将域名转化为IP地址，这样才能和主机建立连接——域名解析</li><li>先找本机的hosts，是否有输入的域名地址，没有的话，再通过DNS服务器，找主机</li><li>InetAddress类没有提供公共的构造器，而是提供如下几个静态方法来获取InetAddress实例<ul><li>public static InetAddress getLocalHost()</li><li>public static InetAddress getByName(String host)</li></ul></li><li>InetAddress提供了如下几个常用的方法<ul><li>public String getHostAddress()：返回IP地址字符串（以文本表现形式）</li><li>public String getHostName()：获取此IP地址的主机名</li><li>public boolean isReachable(int timeout)：测试是否可以达到该地址</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InteAddress address_1 = InetAddress.getByName(<span class="string">&quot;www.baidu.com&quot;</span>);</span><br><span class="line">System.out.println(address_1);</span><br><span class="line"><span class="comment">//获取InetAddress对象所含的域名</span></span><br><span class="line">System.out.println(address_1.getHostName());</span><br><span class="line"><span class="comment">//获取InetAddress对象所包含的IP地址</span></span><br><span class="line">System.out.println(address_1.getHostAddress());</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取本机的域名和IP地址</span></span><br><span class="line">InetAddress address_2 = InetAddress.getLocalHost();</span><br><span class="line">System.out.println(address_2);</span><br></pre></td></tr></table></figure><h4 id="4-通信要素2：网络协议"><a href="#4-通信要素2：网络协议" class="headerlink" title="4. 通信要素2：网络协议"></a>4. 通信要素2：网络协议</h4><ul><li><p>网络通信协议</p><p>计算机网络中实现通信必须要有一些约定，即通信协议，对速率、传输代码、代码结构、传输控制步骤、出错控制等指定标准</p></li><li><p>问题：网路协议太复杂</p><p>计算机网络通信涉及内容很多，比如指定源地址和目标地址，加密解密，压缩解压缩，差错控制，流量控制，路由控制，如何实现复杂的网络协议呢？</p></li><li><p>通信协议分层思想</p><p>在制定协议是，把复杂成分分解成一些简单的成分，再将它们复合起来。最常用的复合方式时层次方式，即同层间可以互相通信、上一层可以调用下一层，而与再下一层不发生关系。各层互不影响，利于系统的开发和扩展</p></li></ul><h5 id="4-1-TCP-IP协议簇"><a href="#4-1-TCP-IP协议簇" class="headerlink" title="4.1 TCP/IP协议簇"></a>4.1 TCP/IP协议簇</h5><ul><li>传输层协议中有两个非常重要的协议：<ul><li>传输控制协议TCP(Transmission Control Protocol)</li><li>用户数据报协议UDP(User Datagram Protocol)</li></ul></li><li>TCP/IP以其两个主要协议：传输控制协议(TCP)和互联网协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议</li><li>IP(Internet Protocol)协议是从网络层的主要协议，支持网间互连的数据通信。</li><li>TCP/IP协议模型从更实用的角度出发，形成了高效的四层体系结构，即物理链路层、IP层、传输层和应用层</li></ul><h5 id="4-2-TCP和UDP"><a href="#4-2-TCP和UDP" class="headerlink" title="4.2 TCP和UDP"></a>4.2 TCP和UDP</h5><ul><li>TCP协议<ul><li>使用TCP协议前，须先建立TCP连接，形成数据传输通道</li><li>传输前，采用”三次握手“方式，点对点通信，是可靠的</li><li>TCP协议进程通信的两个应用进程：客户端、服务端</li><li>再连接中可进行大量数据的传输</li><li>传输完毕，需释放已经建立的连接，效率低</li></ul></li><li>UDP协议<ul><li>将数据、源、目的封装成数据包，不需要进行连接</li><li>每个数据报的大小限制在64K内</li><li>发送方不管对方是否准备好，接收方收到也不确认，故是不可靠的</li><li>可以广播发送</li><li>发送数据结束时无需释放资源，开销小，速度快</li></ul></li></ul><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801131634.png" alt="image-20210801131632738" style="zoom:50%;" /><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801131716.png" alt="image-20210801131714952" style="zoom:50%;" /><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801133525.webp" alt="img" style="zoom:50%;" /><h5 id="4-3-Socket"><a href="#4-3-Socket" class="headerlink" title="4.3 Socket"></a>4.3 Socket</h5><ul><li>利用套接字（Socket）开发网络应用程序早已被广泛的采用，以至于成为事实上的标准</li><li>网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字</li><li>通信的两端都要有Socket，是两台机器间通信的端点</li><li>网络通信其实就是Socket间的通信</li><li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输</li><li>一般主动发起通信的应用程序属于客户端，等待通信请求的为服务端</li><li>Socket分类：<ul><li>流套接字（stream socket)：使用TCP提供可依赖的字节流服务</li><li>数据报套接字（datagram socket)：使用UDP提供”尽力而为”的数据报服务</li></ul></li><li>Socket类常用的构造器：<ul><li>public Socket(InetAddress address, int port)创建一个流套接字，并将其连接到指定IP地址的指定端口号</li><li>public Socket（String host, int port）创建一个流套接字并将其连接到指定端口号</li></ul></li><li>Socket类的常用方法：<ul><li>public InputStream getInputStream()返回此套接字的输入流。可以用于接收网络消息</li><li>public OutputStream getOutputStream()返回此套接字的输出流。可以用于发哦那个网络消息</li><li>public InetAddress getInetAddress()此套接字连接到远程的IP地址；如果套接字是未连接的，则返回null</li><li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。即本端的IP地址</li><li>public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字，则返回0</li><li>public int getLocalPort()返回此套接字绑定到的本地端口号。如果尚未绑定套接字，则返回-1</li><li>public void close()关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。关闭此套接字也会关闭该套接字的InputStream和OutputStream</li><li>public void shutdownInput()如果在套接字上调用shutdownInput()后从套接字输入流读取内容，则流将返回EOF（文件结束符）。即不能再从此套接字的输入流中接收任何数</li><li>public void shutdownOutput()禁用此套接字的输入流。对于TCP套接字，任何以前写入的数据都将被发送，并且后跟TCP的正常中止序列。如果在套接字上调用shutdownOutput()后写入套接字输出流，则该流将抛出IOException。即不能通过此套接字的输出流发送任何数据</li></ul></li></ul><h4 id="5-TCP网络编程"><a href="#5-TCP网络编程" class="headerlink" title="5. TCP网络编程"></a>5. TCP网络编程</h4><h5 id="5-1-基于Socket的TCP编程"><a href="#5-1-基于Socket的TCP编程" class="headerlink" title="5.1 基于Socket的TCP编程"></a>5.1 基于Socket的TCP编程</h5><ul><li><p>Java语言的基于套接字编程分为服务点编程和客户端编程，其通信模型如图所示</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801140720.png" alt="image-20210801140718934"></p></li></ul><p><strong>客户端Socket的工作过程包含以下四个基本步骤</strong></p><ul><li><p>创建Socket：根据指定服务端口的IP地址或端口号构造Socket类对象。若服务器端口响应，则建立客户端到服务器的通信线路。若连接失败会出现异常</p></li><li><p>打开连接到Socket的输入/输出流：使用getInputStram()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</p></li><li><p>按照一定的协议对Socket进行读/写操作：通过输入流读取服务器放入线路的信息（但不能读取自己的放入线路的信息）。通过输出流将信息写入线程</p></li><li><p>关闭Socket：断开客户端到服务器的连接，释放线路</p></li><li><p>客户端创建Socket对象</p><ul><li><p>客户端程序可以使用Socket类创建对象，创建的同时会自动向服务器发起连接。Socket的构造器是：</p><ul><li>Socket(String host, int port)throws UnkonwnHostException,IOException：向服务器（域名是host。端口号为port）发起TCP连接，若成功，则创建Socket对象，否则抛出异常</li><li>Socket(InetAddress address, int port)throws IOException：根据InetAddress对象所表示的IP地址以及端口号port发起连接</li></ul></li><li><p>客户端建立socketAtClient对象的过程就是向服务器发出套接字连接请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Socket s = <span class="keyword">new</span> Socket(<span class="string">&quot;192.168.40.165&quot;</span>,<span class="number">9999</span>);</span><br><span class="line">OutputStream out = s.getOutputStream();</span><br><span class="line">out.write(<span class="string">&quot;hello&quot;</span>.getBytes());</span><br><span class="line">s.close();</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>服务器程序的工作过程包含以下四个基本步骤：</p><ul><li><p>调用ServerSocket(int port)：创建一个服务器端套接字，并绑定到指定端口上。用于监听客户端的请求</p></li><li><p>调用accept()：监听连接请求，如果客户端请求连接，则接收连接，返回通信套接字对象</p></li><li><p>调用该Socket类对象的getOutputStream()和getInputStream()：获取输出流和输入流，开始网络数据的发送和接收</p></li><li><p>关闭ServerSocket和Socket对象：客户端访问结束，关闭通信套接字</p></li><li><p>服务器建立ServerSocket对象</p><ul><li><p>ServerSocket对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，服务器必须实现建立一个等待客户请求建立套接字连接的ServerSocket对象</p></li><li><p>所谓”接收“客户的套接字请求，就是accept()方法会返回一个Socket对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">Socket s = ss.accept();</span><br><span class="line">InputStream in = s.getInputStream();</span><br><span class="line"><span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> num = in.read(buf);</span><br><span class="line">String  str = <span class="keyword">new</span> String(buf,<span class="number">0</span>,num);</span><br><span class="line">System.out.println(s.getInetAddress().toString() + <span class="string">&quot; :&quot;</span> + str);</span><br><span class="line">s.close();</span><br><span class="line">ss.close();</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801160159.png" alt="image-20210801160157108"></p><p><strong>客户端—服务端</strong></p><ul><li>客户端：<ul><li>自定义</li><li>浏览器</li></ul></li><li>服务端<ul><li>自定义</li><li>Tomcat服务器</li></ul></li></ul><h5 id="5-2-示例"><a href="#5-2-示例" class="headerlink" title="5.2 示例"></a>5.2 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> TCP编程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">实现TCP的网络编程</span></span><br><span class="line"><span class="comment">从客户端发送文件给服务器，服务器保存到本地，并返回“发送成功”给客户端</span></span><br><span class="line"><span class="comment">关闭相应连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Socket socketClient = <span class="keyword">null</span>;<span class="comment">//指定IP与端口，创建客户端Socket</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;<span class="comment">//创建文件输入流，读取本地文件</span></span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;<span class="comment">//创建Socket的输出流，将文件输出给服务器</span></span><br><span class="line">        InputStream is = <span class="keyword">null</span>;<span class="comment">//创建Socket的输入流，接收来自服务器的文件</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;<span class="comment">//创建字节数组输出流，用于接收来自服务器的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Socket</span></span><br><span class="line">            socketClient = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(),<span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.创建输出流</span></span><br><span class="line">            os = socketClient.getOutputStream();</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;文件夹\\发送文件\\send.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.操作文件进行发送</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = fis.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            socketClient.shutdownOutput();<span class="comment">//结束输出</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.接收来自服务器的消息</span></span><br><span class="line">            is = socketClient.getInputStream();</span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> length ;</span><br><span class="line">            <span class="keyword">while</span>((length = is.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(bytes,<span class="number">0</span>,length);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());<span class="comment">//输出来自服务器的信息</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//5.关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (socketClient != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socketClient.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">null</span>;<span class="comment">//指定端口号，创建服务端ServerSocket</span></span><br><span class="line">        Socket socketFromClient = <span class="keyword">null</span>;<span class="comment">//创建来自于客户端的Socket</span></span><br><span class="line">        InputStream is = <span class="keyword">null</span>;<span class="comment">//创建Socket的输入流</span></span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;<span class="comment">//创建Socket的输出流</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;<span class="comment">//将来自客户端文件保存到本地</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建服务端ServerSocket</span></span><br><span class="line">            serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">8989</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.调用accept()</span></span><br><span class="line">            socketFromClient = serverSocket.accept();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.创建流</span></span><br><span class="line">            is = socketFromClient.getInputStream();</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;文件夹\\接收文件\\receive.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//4.接收</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//5.接收完成进行反馈</span></span><br><span class="line">            os = socketFromClient.getOutputStream();</span><br><span class="line">            os.write(<span class="string">&quot;文件接收完成&quot;</span>.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//6.关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (socketFromClient != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socketFromClient.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-UDP网络编程"><a href="#6-UDP网络编程" class="headerlink" title="6. UDP网络编程"></a>6. UDP网络编程</h4><ul><li>类DatagramSocket和DatagramPacket实现了基于UDP协议网络程序</li><li>UDP数据报通过数据报套接字DatagramSocket发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达</li><li>DatagramPacket对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号</li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无需建立发送方和接收方的连接。如同发快递包裹一样</li></ul><h5 id="6-1-DatagramSocket类的常用方法"><a href="#6-1-DatagramSocket类的常用方法" class="headerlink" title="6.1 DatagramSocket类的常用方法"></a>6.1 DatagramSocket类的常用方法</h5><ul><li>public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字被绑定到通配符地址，IP地址由内核来选择</li><li>public DatagramSocket(int port, InetAddress Iaddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在0-65535之间（包括两者）。如果IP地址为0.0.0.0，套接字将被绑定到通配符地址，IP地址由内核选择</li><li>public void close()关闭此数据报套接字</li><li>public void send(DatagramPacket p)从此套接字发送数据包。DatagramPacket包含的信息将指示：将要发送的数据、其长度、远程主机的IP地址和远程主机的端口号。</li><li>public void receive(DatagramPacket p)从此套接字接收数据包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的IP地址和发送机器上的端口号。此方法在接收到数据报前一直阻塞。数据报包对象的length字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短</li><li>public InetAddress getLocalAddress()获取套接字绑定的本地地址</li><li>public int getLocalPort()返回此套接字绑定的本地主机上的端口号</li><li>public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回null</li><li>public int getPort()返回此套接字的端口。如果套接字未连接，则返回-1</li><li>public DatagramPacket(byte[] buf, int length)构造DatagramPacket，用来接收长度为length的数据包。length参数必须小于等于buf.length</li><li>public DatagramPacket(byte[] buf, int length, InetAddress, int port)构造数据包，用来将长度为length的包发送到指定主机的指定端口号。length参数必须小于等于buf.length</li><li>public InetAddress getAddress()返回某台机器的IP地址，此数据报将要发往该主机或者是从该主机接收到的</li><li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的</li><li>public byte[] getData()返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量offset处开始，持续length长度</li><li>public int getLength()返回将要发送或接收到的数据的长度</li></ul><h5 id="6-2-UDP网络通信"><a href="#6-2-UDP网络通信" class="headerlink" title="6.2 UDP网络通信"></a>6.2 UDP网络通信</h5><ul><li><p>流程：</p><ol><li>DatagramSocket与DatagramPacket</li><li>建立发送端，接收端</li><li>建立数据包</li><li>调用Socket的发送、接收方法</li><li>关闭Socket</li></ol></li><li><p>发送端与接收端是两个独立的运行程序</p></li><li><p>发送端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ds = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">    <span class="keyword">byte</span>[] by = <span class="string">&quot;hello&quot;</span>.getBytes();</span><br><span class="line">    DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(by,<span class="number">0</span>,by.length, InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>),<span class="number">10000</span>);</span><br><span class="line">    ds.send(dp);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ds != <span class="keyword">null</span>)&#123;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接收端，在接收端，要指定监听的端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ds = <span class="keyword">new</span> DatagramSocket(<span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] by = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(by,by.length);</span><br><span class="line">    ds.receive(dp);</span><br><span class="line">    String str = <span class="keyword">new</span> String(dp.getData(),<span class="number">0</span>,dp.getLength());</span><br><span class="line">    System.out.println(str + <span class="string">&quot;——&quot;</span> + dp.getAddress());</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ds != <span class="keyword">null</span>)&#123;</span><br><span class="line">        ds.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="6-3-示例"><a href="#6-3-示例" class="headerlink" title="6.3 示例"></a>6.3 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> UDP编程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line">        InetAddress inet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ds = <span class="keyword">new</span> DatagramSocket();<span class="comment">//创建数据报套接字</span></span><br><span class="line">            inet = InetAddress.getLocalHost();</span><br><span class="line"></span><br><span class="line">            String str = <span class="string">&quot;以UDP方式发送文件&quot;</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes =str.getBytes(StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(bytes,<span class="number">0</span>,bytes.length,inet,<span class="number">9898</span>);</span><br><span class="line"></span><br><span class="line">            ds.send(dp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ds.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DatagramSocket ds = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ds = <span class="keyword">new</span> DatagramSocket(<span class="number">9898</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">            DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line"></span><br><span class="line">            ds.receive(dp);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ds.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-URL编程"><a href="#7-URL编程" class="headerlink" title="7. URL编程"></a>7. URL编程</h4><h5 id="7-1-URL类"><a href="#7-1-URL类" class="headerlink" title="7.1 URL类"></a>7.1 URL类</h5><ul><li><p>URL(Uniform Resource Locator)：统一资源定位符，它表示Internet上某一资源的地址</p></li><li><p>它是一种具体的URI，即URL可以用来表示一个资源，而且还指明了如何locate这个资源</p></li><li><p>通过URL我们可以访问Internet上的各种网络资源，比如最常见的www，ftp站点。浏览器通过解析给定的URL可以在网络上查找相应的文件或其他资源</p></li><li><p>URL的基本结构由5部分组成：</p><p>&lt;传输协议&gt;://&lt;主机名&gt;:&lt;端口号&gt;/&lt;文件名&gt;#片段名？参数列表</p><ul><li><p>例如：</p><p><a href="http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123">http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123</a></p></li><li><p>片段名：即锚点，例如看小说，之间定位到章节</p></li><li><p>参数列表格式：参数名 = 参数值 &amp; 参数名 = 参数值…</p></li></ul></li></ul><h5 id="7-2-URL类构造器"><a href="#7-2-URL类构造器" class="headerlink" title="7.2 URL类构造器"></a>7.2 URL类构造器</h5><ul><li><p>为了表示URL，java.net中实现了类URL。我们可以通过下面的构造器来初始化一个URL对象：</p><ul><li><p>public URL(String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。</p><p>URL url = new URL(“<a href="https://www.baidu.com&quot;/">https://www.baidu.com&quot;</a>);</p></li><li><p>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。</p><p>URL downloadUrl = new URL(url, “download.html”)</p></li><li><p>public URL(String protocol, String host, int port, String file);</p><p>URL gamelan = new  URL(“http”, “<a href="http://www.baidu.com&quot;/">www.baidu.com&quot;</a>, 80, “download.html”);</p></li></ul></li><li><p>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通 常是用 try-catch 语句进行捕获。</p></li></ul><h5 id="7-3-URL常用方法"><a href="#7-3-URL常用方法" class="headerlink" title="7.3 URL常用方法"></a>7.3 URL常用方法</h5><ul><li>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性<ul><li>public String getProtocol()        获取该URL的协议名</li><li>public String getHost()              获取该URL的主机号</li><li>public String getPort()               获取该URL的端口号</li><li>public String getPath()              获取该URL的文件路径</li><li>public String getFile()                获取该URL的文件名</li><li>public String getQuery()           获取该URL的查询名</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/examples/myTest.txt&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;getProtocol() :&quot;</span>+url.getProtocol());</span><br><span class="line">System.out.println(<span class="string">&quot;getHost() :&quot;</span>+url.getHost());</span><br><span class="line">System.out.println(<span class="string">&quot;getPort() :&quot;</span>+url.getPort());</span><br><span class="line">System.out.println(<span class="string">&quot;getPath() :&quot;</span>+url.getPath());</span><br><span class="line">System.out.println(<span class="string">&quot;getFile() :&quot;</span>+url.getFile());</span><br><span class="line">System.out.println(<span class="string">&quot;getQuery() :&quot;</span>+url.getQuery());</span><br></pre></td></tr></table></figure><h5 id="7-3-针对HTTP协议的URLConnection类"><a href="#7-3-针对HTTP协议的URLConnection类" class="headerlink" title="7.3 针对HTTP协议的URLConnection类"></a>7.3 针对HTTP协议的URLConnection类</h5><ul><li>URL的方法openStream()：能从网络上读取数据</li><li>若希望输出数据，例如向服务器端的CGI（公共网关接口-Common Gateway Interface-简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一次额数据，必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection</li><li>URLConnection：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个URL对象上通过方法openConnection()生成对应的URLConnection对象。如果连接过程失败，将产生IOExecption<ul><li>URL netchinaren = new URL (“<a href="http://www.baiduu.com/index.shtml&quot;">http://www.baiduu.com/index.shtml&quot;</a>);</li><li>URLConnectonn u = netchinaren.openConnection( ); </li></ul></li><li>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI 程序进行交互。<ul><li>public Object getContent( ) throws IOException</li><li>public int getContentLength( )</li><li>public String getContentType( )</li><li>public long getDate( )</li><li>public long getLastModified( )</li><li>public InputStream getInputStream( )throws IOException</li><li>public OutputSteram getOutputStream( )throws IOException</li></ul></li></ul><h6 id="7-3-1-URI、URL和URN的区别"><a href="#7-3-1-URI、URL和URN的区别" class="headerlink" title="7.3.1 URI、URL和URN的区别"></a>7.3.1 URI、URL和URN的区别</h6><p>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个 资源。而URL是uniform resource locator，统一资源定位符，它是一种具体 的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。 而URN，uniform resource name，统一资源命名，是通过名字来标识资源， 比如mailto:<a href="mailto:&#x6a;&#x61;&#x76;&#97;&#x2d;&#x6e;&#101;&#116;&#x40;&#106;&#x61;&#118;&#97;&#x2e;&#x73;&#x75;&#110;&#x2e;&#99;&#111;&#x6d;">&#x6a;&#x61;&#x76;&#97;&#x2d;&#x6e;&#101;&#116;&#x40;&#106;&#x61;&#118;&#97;&#x2e;&#x73;&#x75;&#110;&#x2e;&#99;&#111;&#x6d;</a>。也就是说，URI是以一种抽象的，高层 次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL 和URN都是一种URI。</p><p>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符 合URI的语法规则。而URL类则 不仅符合语义，还包含了定位该资源的信息， 因此它不能是相对的。</p><p><img src="https://gitee.com/xiongzero/alienware_-pic-go/raw/master/img/20210801173322.png" alt="image-20210801173320541"></p><h5 id="7-4-示例"><a href="#7-4-示例" class="headerlink" title="7.4 示例"></a>7.4 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> URL编程;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/examples/两只小熊.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//            public String getProtocol(  )     获取该URL的协议名</span></span><br><span class="line">            System.out.println(url.getProtocol());</span><br><span class="line"><span class="comment">//            public String getHost(  )           获取该URL的主机名</span></span><br><span class="line">            System.out.println(url.getHost());</span><br><span class="line"><span class="comment">//            public String getPort(  )            获取该URL的端口号</span></span><br><span class="line">            System.out.println(url.getPort());</span><br><span class="line"><span class="comment">//            public String getPath(  )           获取该URL的文件路径</span></span><br><span class="line">            System.out.println(url.getPath());</span><br><span class="line"><span class="comment">//            public String getFile(  )             获取该URL的文件名</span></span><br><span class="line">            System.out.println(url.getFile());</span><br><span class="line"><span class="comment">//            public String getQuery(   )        获取该URL的查询名</span></span><br><span class="line">            System.out.println(url.getQuery());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/examples/%E4%B8%A4%E5%8F%AA%E5%B0%8F%E7%86%8A.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line"></span><br><span class="line">            urlConnection.connect();</span><br><span class="line"></span><br><span class="line">            is = urlConnection.getInputStream();</span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;文件夹\\接收文件\\两只小熊.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;下载完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(urlConnection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                urlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-小结"><a href="#8-小结" class="headerlink" title="8.小结"></a>8.小结</h4><ul><li>位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。</li><li>客户端－服务器是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定 服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。端口号 是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。套接字用于连接客户 端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。TCP协议用于实 现面向连接的会话。</li><li>Java 中有关网络方面的功能都定义在 java.net 程序包中。Java 用 InetAddress 对象表示 IP  地址，该对象里有两个字段：主机名(String) 和 IP 地址(int)。</li><li>类 Socket 和 ServerSocket 实现了基于TCP协议的客户端－服务器程序。Socket是客户端 和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输 通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络 拥挤等问题，它保证数据可靠的传送。</li><li>类 URL 和 URLConnection 提供了最高级网络应用。URL 的网络资源的位置来同一表示 Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之 间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。</li></ul>]]></content>
    
    
    <summary type="html">网络编程</summary>
    
    
    
    <category term="编程" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Java" scheme="https://github.com/xiongzhuozhuo/xiongzhuozhuo.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
