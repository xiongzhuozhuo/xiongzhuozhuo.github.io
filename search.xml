<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>个人分享平台构建（前导篇）——Markdown基础语法</title>
    <url>/2021/02/25/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA(%E5%89%8D%E5%AF%BC%E7%AF%87)%E2%80%94%E2%80%94Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305161628.png" alt="个人分享平台构建"></p>
<h1 id="MarkDown常用语法"><a href="#MarkDown常用语法" class="headerlink" title="MarkDown常用语法"></a>MarkDown常用语法</h1><p><a href="https://www.bilibili.com/video/av87982836#reply2366896129">基础视频讲解链接</a><br><a href="https://www.bilibili.com/video/av88551739/">画图视频讲解链接</a></p>
<span id="more"></span>
<p>本篇为前导教程，帮助大家了解Markdown的基础语法 ，Markdown是一种轻量级标记语言，创始人为约翰·格鲁伯（英语：John Gruber）。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。<br>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。如GitHub、Reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge、简书等，甚至还能被使用来撰写电子书。了解Markdown语法规则有利于大家后期个人博客的撰写。</p>
<h2 id="语块及标识"><a href="#语块及标识" class="headerlink" title="语块及标识"></a>语块及标识</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```语言名称</span></span><br><span class="line"><span class="code">```(英文输入法下输入)</span></span><br></pre></td></tr></table></figure>
<h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`行内代码`</span><br></pre></td></tr></table></figure>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;一级引用</span><br><span class="line">&gt;&gt;二级引用</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">***  或  ---  或  ___</span><br></pre></td></tr></table></figure>
<h2 id="文字效果"><a href="#文字效果" class="headerlink" title="文字效果"></a>文字效果</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 标题名字 （#个数代表标题级数）</span><br></pre></td></tr></table></figure>
<h3 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**文本**  或  __文本__</span><br><span class="line">__(英文输入法下 Shift + -)</span><br></pre></td></tr></table></figure>
<h3 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*文本*  或  _文本_</span><br></pre></td></tr></table></figure>
<h3 id="加粗斜体"><a href="#加粗斜体" class="headerlink" title="加粗斜体"></a>加粗斜体</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">***文本***  或  ___文本___</span><br></pre></td></tr></table></figure>
<h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;文本&lt;/u&gt;</span><br></pre></td></tr></table></figure>
<h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">~~文字~~</span><br></pre></td></tr></table></figure>
<h3 id="在Typora下需勾选扩展语法的效果"><a href="#在Typora下需勾选扩展语法的效果" class="headerlink" title="在Typora下需勾选扩展语法的效果"></a>在Typora下需勾选扩展语法的效果</h3><h3 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">==文本== （Typora下需勾选扩展语法)</span><br></pre></td></tr></table></figure>
<h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">水 H~<span class="number">2</span>~O</span><br><span class="line">双氧水 H~<span class="number">2</span>~O~<span class="number">2</span>~</span><br></pre></td></tr></table></figure>
<h4 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">面积 m^<span class="number">2</span>^</span><br><span class="line">体积 m^<span class="number">3</span>^</span><br></pre></td></tr></table></figure>
<h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p>😁😀 （win标 + ;)</p>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><h3 id="外部跳转"><a href="#外部跳转" class="headerlink" title="外部跳转"></a>外部跳转</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[描述](网址)</span><br></pre></td></tr></table></figure>
<h3 id="内部跳转"><a href="#内部跳转" class="headerlink" title="内部跳转"></a>内部跳转</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">[描述]（#标题）</span><br></pre></td></tr></table></figure>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;网址&gt;</span><br></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![图片描述](图片本地地址)</span><br></pre></td></tr></table></figure>
<h3 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![图片描述](图片网络地址)</span><br></pre></td></tr></table></figure>
<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序表"><a href="#无序表" class="headerlink" title="无序表"></a>无序表</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 可以使用“*”作为标记</span><br><span class="line">+ 也可以使用“+”</span><br><span class="line">- 或者“-”</span><br></pre></td></tr></table></figure>
<h4 id="有序表"><a href="#有序表" class="headerlink" title="有序表"></a>有序表</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数字.空格</span><br><span class="line"><span class="number">1.</span> 有序表以数字和<span class="string">&#x27;.&#x27;</span>开始</span><br><span class="line"><span class="number">4.</span> 数字序列不会影响生成序列</span><br><span class="line"><span class="number">5</span>\. 数字\. 取消显示为列表</span><br></pre></td></tr></table></figure>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用|来分隔不同单元格，使用-来分隔表头和其他行,使用:来设置对齐</span><br><span class="line">姓名 | 年龄</span><br><span class="line">-- | --</span><br><span class="line">张三 | <span class="number">12</span></span><br><span class="line">李四 | <span class="number">23</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>办公技能</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>个人分享平台构建(工具篇)——Typora + PicGo + Gitee</title>
    <url>/2021/03/05/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA(%E5%B7%A5%E5%85%B7%E7%AF%87)%E2%80%94%E2%80%94Typora+PicGo+Gitee/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305161628.png" alt="个人分享平台构建"></p>
<span id="more"></span>
<h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><a href="https://www.typora.io/">Typora</a></h4><p>​    <strong>Typora</strong>是一个所见即所得的Markdown格式文本编辑器，支持Windows、macOS和GNU/Linux操作系统，包括对GitHub Flavored Markdown扩展格式的支持、拼写检查、自定义CSS样式、数学公式渲染（通过MathJax）等特性，<a href="https://www.typora.io/">点击跳转下载</a>，软件截图如下：</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305140341.png" alt="image-20210305140336396" style="zoom: 50%;" />

<h4 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a><a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.4">PicGo</a></h4><p>​    我们在写作、写 Markdown、博客时，经常都要插入图片。然而要贴图 (上传图片) 时还得登录图床网站/服务器去手工上传和复制链接，操作比较繁琐。</p>
<p>​    <strong>PicGo</strong> 是一款开源跨平台的免费图片上传工具以及图床相册管理软件，它能帮你快速地将图片上传到微博、又拍云、阿里云 OSS、腾讯云 COS、七牛、GitHub、sm.ms、Imgur 等常见的免费图床网站或云存储服务上，并自动复制图片的链接到剪贴板里，使用上非常高效便捷。<a href="https://github.com/Molunerfinn/PicGo/releases/tag/v2.3.0-beta.4">点击跳转下载</a>，软件截图如下：</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305140622.png" alt="image-20210305140621282" style="zoom: 50%;" />

<h4 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a><a href="https://gitee.com/">Gitee</a></h4><p>​    <strong>Gitee</strong>是深圳市奥思网络科技有限公司推出的代码托管平台，支持Git和SVN，提供免费的私有仓库托管。目前开发者超过500万，托管项目超过1000万，汇聚几乎所有本土原创开源项目，并于2016年推出企业版，提供企业级代码托管服务。<a href="https://gitee.com/">点击跳转官网</a>进行Gitee账户注册。</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305141040.png" alt="image-20210305141038648" style="zoom: 25%;" />

<h3 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h3><p>​    Typora作为一款Markdown编辑器，搭配图床工具PicGo以及托管平台Gitee，能够简洁高效的编写图文并茂的博客。按照链接==<strong>下载好Typora、PicGo并注册Gitee账号后</strong>==，下面进入配置环节。</p>
<h4 id="1-配置Gitee"><a href="#1-配置Gitee" class="headerlink" title="1.配置Gitee"></a>1.配置Gitee</h4><p>【创建仓库】</p>
<p>​    点击头像右侧“+”，【新建仓库】——填写【仓库名称】——是否开源选择【公开】（如果不公开，PicGo上传之后的图片无法在Typora中通过网络地址进行显示）——【创建】</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305144104.png" alt="image-20210305144102602" style="zoom: 67%;" />

<p>【生成私人令牌】</p>
<p>​    点击头像，【设置】——【私人令牌】——【生成新令牌】——填写令牌描述【提交】，复制令牌</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305145414.png" alt="image-20210305145412307"></p>
<h4 id="2-配置PicGo"><a href="#2-配置PicGo" class="headerlink" title="2.配置PicGo"></a>2.配置PicGo</h4><p><a href="https://nodejs.org/zh-cn/">点击下载node.js</a>，为安装插件做准备</p>
<p>【插件设置】——下载gitee插件</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305145931.png" alt="image-20210305145929348" style="zoom: 50%;" />

<p>【PicGo设置】——开启Gitee图床——开启【时间戳重命名】</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305150117.png" alt="image-20210305150114651" style="zoom:50%;" />

<p>【图床设置】——Gitee图床设置</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305150333.png" alt="image-20210305150331034" style="zoom:50%;" />

<h4 id="3-配置Typora"><a href="#3-配置Typora" class="headerlink" title="3.配置Typora"></a>3.配置Typora</h4><p>【文件】——【偏好设置】——【图像】，PicGo路径为当前电脑安装路径</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305151539.png" alt="image-20210305151537874" style="zoom:50%;" />

<p>【验证图片上传选项】</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305151955.png" alt="image-20210305151953065" style="zoom: 67%;" />

<h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>​    运行PicGo，运行Typora，插入图片进行测试。右键插入的图片，点击【上传图片】，上传成功，并能正确显示，完成测试</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/20210305152932.png" style="zoom:25%;" />



]]></content>
      <categories>
        <category>办公技能</category>
      </categories>
      <tags>
        <tag>Typora + PicGo + Gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>01-Java语言概述</title>
    <url>/2021/08/14/01-Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><span id="more"></span>
<h3 id="01-Java语言概述"><a href="#01-Java语言概述" class="headerlink" title="01-Java语言概述"></a>01-Java语言概述</h3><p><strong>Java基础知识图解</strong></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108140854557.png" alt="Java基础知识图解"></p>
<h4 id="1-软件开发介绍"><a href="#1-软件开发介绍" class="headerlink" title="1. 软件开发介绍"></a>1. 软件开发介绍</h4><ul>
<li><p>软件开发</p>
<p>软件，即一系列按照特定顺序组织的计算机数据和指令的集合。有系统软件和应用软件之分。</p>
</li>
<li><p>人机交互方式</p>
<ul>
<li>图形化界面(Graphical User Interface GUI)这种方式简单直观，使用者易于接受，容易上手操作。</li>
<li>命令行方式(Command Line Interface CLI)：需要有一个控制台，输 入特定的指令，让计算机完成一些操作。较为麻烦，需要记录住一些 命令。</li>
</ul>
</li>
<li><p>常用Dos命令</p>
<ul>
<li>dir：列出当前目录下的文件以及文件夹</li>
<li>md：创建目录</li>
<li>rd：删除目录</li>
<li>cd：进入指定目录</li>
<li>cd..：退回到上一级目录</li>
<li>cd\：回到根目录</li>
<li>del：删除文件</li>
<li>exit：退出dos命令行<ul>
<li>补充：echo javase&gt;1.doc</li>
</ul>
</li>
</ul>
</li>
<li><p>常用快捷键</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108140954873.png" alt="image-20210814095451964" style="zoom: 67%;" /> 

</li>
</ul>
<h4 id="2-计算机编程语言介绍"><a href="#2-计算机编程语言介绍" class="headerlink" title="2. 计算机编程语言介绍"></a>2. 计算机编程语言介绍</h4><ul>
<li><p>什么是计算机语言</p>
<ul>
<li><p>语言：是人与人之间用于沟通的一种方式。例如：中国人与中国人用普通话沟通。而中国人要和英国人交流，就要学习英语。</p>
</li>
<li><p>计算机语言：人与计算机交流的方式</p>
<p>如果人要与计算机交流，那么就要学习计算机语言。</p>
<p>计算机语言有很多种。如：C ,C++ ,Java ,PHP , Kotlin，Python，Scala等。</p>
</li>
</ul>
</li>
<li><p>第一代语言</p>
<ul>
<li>机器语言。指令以二进制代码形式存在</li>
</ul>
</li>
<li><p>第二代语言</p>
<ul>
<li><p>汇编语言。使用助记符表示一条机器指令</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108140958142.png" alt="image-20210814095801122"></p>
</li>
</ul>
</li>
<li><p>第三代语言：高级语言</p>
<ul>
<li>C、Pascal、Fortran面向过程的语言</li>
<li>C++面向过程/面向对象</li>
<li>Java跨平台的纯面向对象的语言</li>
<li>.NET跨语言的平台</li>
<li>Pyton、Scala…</li>
</ul>
</li>
<li><p>从市场需求来看<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141003345.png" alt="image-20210814100355030"></p>
<p><a href="https://www.tiobe.com/tiobe-index/">index | TIOBE - The Software Quality Company</a></p>
</li>
</ul>
<h4 id="3-Java语言概述"><a href="#3-Java语言概述" class="headerlink" title="3. Java语言概述"></a>3. Java语言概述</h4><ul>
<li><p>是SUN(Stanford University Network，斯坦福大学网络公司 ) 1995年推出的一 门高级编程语言。</p>
</li>
<li><p>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以 在Web浏览器中运行。这些Java程序被称为Java小程序（applet）。applet使 用现代的图形用户界面与Web用户进行交互。 applet内嵌在HTML代码中。</p>
</li>
<li><p>随着Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p>
<p>后台开发：Java、PHP、Python、Go、Node.js</p>
</li>
<li><p>Java简史</p>
<ul>
<li>1991年 Green项目，开发语言最初命名为Oak (橡树)</li>
<li>1994年，开发组意识到Oak 非常适合于互联网</li>
<li>1996年，发布JDK 1.0，约8.3万个网页应用Java技术来制作</li>
<li>1997年，发布JDK 1.1，JavaOne会议召开，创当时全球同类会议规模之最</li>
<li>1998年，发布JDK 1.2，同年发布企业平台J2EE</li>
<li>1999年，Java分成J2SE、J2EE和J2ME，JSP/Servlet技术诞生</li>
<li>==2004年，发布里程碑式版本：JDK 1.5，为突出此版本的重要性，更名为JDK 5.0==</li>
<li>2005年，J2SE -&gt; JavaSE，J2EE -&gt; JavaEE，J2ME -&gt; JavaME</li>
<li>2009年，Oracle公司收购SUN，交易价格74亿美元</li>
<li>2011年，发布JDK 7.0</li>
<li>==2014年，发布JDK 8.0，是继JDK 5.0以来变化最大的版本==</li>
<li>2017年，发布JDK 9.0，最大限度实现模块化</li>
<li>2018年3月，发布JDK 10.0，版本号也称为18.3</li>
<li>2018年9月，发布JDK 11.0，版本号也称为18.9</li>
</ul>
</li>
<li><p>Java技术体系平台</p>
<img src="../../../AppData/Roaming/Typora/typora-user-images/image-20210814100954968.png" alt="image-20210814100954968" style="zoom:80%;" /> 
</li>
<li><p>Java再各领域的应用</p>
<ul>
<li>从Java的应用领域来分，Java语言的应用方向主要表现在以下几个方面：<ul>
<li>企业级应用：主要指复杂的大企业的软件系统、各种类型的网站。Java的安全机制以及它的跨平台的优势，使它在分布式系统领域开发中有广泛应用。应用领域包括金融、电信、交通、电子商务等。</li>
<li>Android平台应用：Android应用程序使用Java语言编写。Android开发水平的高低 很大程度上取决于Java语言核心能力是否扎实。</li>
<li>大数据平台开发：各类框架有Hadoop，spark，storm，flink等，就这类技术生态圈来讲，还有各种中间件如flume，kafka，sqoop等等 ，这些框架以及工具大多数是用Java编写而成，但提供诸如Java，scala，Python，R等各种语言API供编程。</li>
<li>移动领域应用：主要表现在消费和嵌入式领域，是指在各种小型设备上的应用，包括手 机、PDA、机顶盒、汽车通信设备等。</li>
</ul>
</li>
</ul>
</li>
<li><p>Java语言的诞生</p>
<p>​         java之父James Gosling团队在开发”Green”项目时，发现C缺少垃圾回收系统，还有可移植的安 全性、分布程序设计和多线程功能。最后，他们想要一种易于移植到各种设备上的平台。<br>​         Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看 成是类C语言发展和衍生的产物。比如Java语言的变量声明，操作符 形式，参数传递，流程控制等方面和C语言、C++语言完全相同。但同 时，Java是一个纯粹的面向对象的程序设计语言，它继承了C++语言 面向对象技术的核心。Java舍弃了C语言中容易引起错误的指针（以 引用取代）、运算符重载（operator overloading）、多重继承 （以接口取代）等特性，增加了垃圾回收器功能用于回收不再被引用 的对象所占据的内存空间。JDK1.5又引入了泛型编程（Generic  Programming）、类型安全的枚举、不定长参数和自动装/拆箱</p>
</li>
<li><p>主要特性</p>
<ul>
<li>Java语言是易学的。Java语言的语法与C语言和C++语言很接近，使得大多数程序员 很容易学习和使用Java。</li>
<li>Java语言是强制面向对象的。Java语言提供类、接口和继承等原语，为了简单起见， 只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制 （关键字为implements）。</li>
<li>Java语言是分布式的。Java语言支持Internet应用的开发，在基本的Java应用编 程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类 库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程 方法激活）机制也是开发分布式应用的重要手段。</li>
<li>Java语言是健壮的。Java的强类型机制、异常处理、垃圾的自动收集等是Java程序 健壮性的重要保证。对指针的丢弃是Java的明智选择。</li>
<li>Java语言是安全的。Java通常被用在网络环境中，为此，Java提供了一个安全机 制以防恶意代码的攻击。如：安全防范机制（类ClassLoader），如分配不同的 名字空间以防替代本地的同名类、字节代码检查。</li>
<li>Java语言是体系结构中立的。Java程序（后缀为java的文件）在Java平台上被 编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个 Java平台的任何系统中运行。</li>
<li>Java语言是解释型的。如前所述，Java程序在Java平台上被编译为字节码格式， 然后可以在实现这个Java平台的任何系统的解释器中运行。</li>
<li>Java是性能略高的。与那些解释型的高级脚本语言相比，Java的性能还是较优的。</li>
<li>Java语言是原生支持多线程的。在Java语言中，线程是一种特殊的对象，它必须 由Thread类或其子（孙）类来创建。</li>
</ul>
</li>
</ul>
<h4 id="4-运行机制及运行过程"><a href="#4-运行机制及运行过程" class="headerlink" title="4. 运行机制及运行过程"></a>4. 运行机制及运行过程</h4><ul>
<li>Java语言的特点<ul>
<li>特点一：面向对象<ul>
<li>两个基本概念：类、对象</li>
<li>三大特性：封装、继承、多态</li>
</ul>
</li>
<li>特点二：健壮性<ul>
<li>吸收了C/C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与 释放等），提供了一个相对安全的内存管理和访问机制</li>
</ul>
</li>
<li>特点三：跨平台性<ul>
<li>跨平台性：通过Java语言编写的应用程序在不同的系统平台上都可以运行。“Write  once , Run Anywhere”<ul>
<li><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141017944.png" alt="image-20210814101734807"></li>
</ul>
</li>
<li>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (JVM Java  Virtual Machine) 即可。由JVM来负责Java程序在该系统中的运行。</li>
</ul>
</li>
</ul>
</li>
<li>Java的两种核心机制<ul>
<li>Java虚拟机 (Java Virtal Machine)</li>
<li>垃圾收集机制 (Garbage Collection)</li>
</ul>
</li>
<li>核心机制—Java虚拟机<ul>
<li>JVM是一个虚拟的计算机，具有指令集并使用不同的存储区域。负责执行指令，管理数据、内存、寄存器。</li>
<li>对于不同的平台，有不同的虚拟机。</li>
<li>只有某平台提供了对应的java虚拟机，java程序才可在此平台运行</li>
<li>Java虚拟机机制屏蔽了底层运行平台的差别，实现了“一次编译，到处运行”</li>
<li><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141019425.png" alt="image-20210814101933458"></li>
<li><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141021496.png" alt="image-20210814102128856" style="zoom:80%;" /> </li>
</ul>
</li>
<li>核心机制—垃圾回收<ul>
<li>不再使用的内存空间应回收—— 垃圾回收。<ul>
<li>在C/C++等语言中，由程序员负责回收无用内存。</li>
<li>Java 语言消除了程序员回收无用内存空间的责任：它提供一种系统级线程跟踪存储空间的分配情况。并在JVM空闲时，检查并释放那些可被释放的存储空间。</li>
<li>垃圾回收在Java程序运行过程中自动进行，程序员无法精确控制和干预。</li>
</ul>
</li>
<li>Java程序还会出现内存泄漏和内存溢出问题吗？Yes!</li>
</ul>
</li>
</ul>
<h4 id="5-Java的环境搭建"><a href="#5-Java的环境搭建" class="headerlink" title="5. Java的环境搭建"></a>5. Java的环境搭建</h4><ul>
<li><p>明确什么是JDK, JRE</p>
</li>
<li><p>下载 JDK</p>
</li>
<li><p>安装 JDK</p>
</li>
<li><p>配置环境变量</p>
<ul>
<li>path：windows系统执行命令时要搜寻的路径。</li>
</ul>
</li>
<li><p>验证是否成功：javac java</p>
</li>
<li><p>选择合适的文本编辑器或 IDE 开发</p>
</li>
<li><p>什么是JDK,JRE</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141026886.png" alt="image-20210814102648748" style="zoom:80%;" />
</li>
<li><p>JDK、JRE、JVM关系</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141030638.png" alt="image-20210814103016502"  /> 

<p><a href="https://docs.oracle.com/javase/8/docs/">Java Platform Standard Edition 8 Documentation (oracle.com)</a></p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141031010.png" alt="image-20210814103148629" style="zoom:80%;" />
</li>
<li><p>官方网址：</p>
<ul>
<li><a href="http://www.oracle.com/">www.oracle.com</a></li>
<li>java.sun.com</li>
</ul>
</li>
<li><p>安装JDK</p>
<ul>
<li>傻瓜式安装，下一步即可。</li>
<li>建议：安装路径不要有中文或者空格等特殊符号。</li>
<li>如果操作系统是64位的，软件尽量选择支持64位的（除非软件本身不区分）。</li>
<li>当提示安装 JRE 时，正常在JDK安装时已经装过了，但是为了后续使用Eclipse等开发 工具不报错，建议也根据提示安装JRE。</li>
</ul>
</li>
<li><p>配置环境变量path</p>
<ul>
<li><p>在dos命令行中敲入javac，出现错误</p>
</li>
<li><p>错误原因：当前执行的程序在当前目录下如果不存在，windows系统会在系 统中已有的一个名为path的环境变量指定的目录中查找。如果仍未找到，会 出现以上的错误提示。所以进入到 jdk安装路径\bin目录下，执行javac，会看到javac参数提示信息。</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141036210.png" alt="image-20210814103637239"></p>
<p>每次执行 java 的工具都要进入到bin目录下，是非常麻烦的。可不可以在任何目 录下都可以执行java的工具呢？</p>
</li>
<li><p>根据windows系统在查找可执行程序的原理，可以将java工具所在路径定义到 path 环境变量中，让系统帮我们去找运行执行的程序。</p>
</li>
<li><p>配置方法</p>
<ul>
<li>我的电脑–属性–高级系统设置–环境变量</li>
<li>编辑 path 环境变量，在变量值开始处加上java工具所在目录，后面用 “ ; ”和其他值分隔 开即可。</li>
<li>打开DOS命令行，任意目录下敲入javac。如果出现javac 的参数信息，配置成功。</li>
<li><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141045807.png" alt="image-20210814104346438"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="6-开发体验—HelloWord"><a href="#6-开发体验—HelloWord" class="headerlink" title="6. 开发体验—HelloWord"></a>6. 开发体验—HelloWord</h4><ul>
<li><p>步骤</p>
<ol>
<li><p>将 Java 代码编写到扩展名为 .java 的文件中。</p>
</li>
<li><p>通过 javac 命令对该 java 文件进行编译。</p>
</li>
<li><p>通过 java 命令对生成的 class 文件进行运行。</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141105182.png" alt="image-20210814110554841"></p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>个人分享平台构建（博客搭建篇）——Hexo + Next + Github</title>
    <url>/2021/03/06/%E4%B8%AA%E4%BA%BA%E5%88%86%E4%BA%AB%E5%B9%B3%E5%8F%B0%E6%9E%84%E5%BB%BA%EF%BC%88%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E7%AF%87%EF%BC%89%E2%80%94%E2%80%94Hexo%20+%20Next%20+%20Github/</url>
    <content><![CDATA[<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><h4 id="1-1-1-安装前提"><a href="#1-1-1-安装前提" class="headerlink" title="1.1.1 安装前提"></a>1.1.1 安装前提</h4><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>
<li><a href="http://git-scm.com/">Git</a></li>
</ul>
<h4 id="1-1-2-安装-Node-js"><a href="#1-1-2-安装-Node-js" class="headerlink" title="1.1.2 安装 Node.js"></a>1.1.2 安装 Node.js</h4><p>简单的说 <strong>Node.js</strong> 就是运行在服务端的 JavaScript。**Node.js **是一个基于Chrome JavaScript 运行时建立的一个平台。</p>
<p><strong>Node.js</strong>是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<p><strong>Node.js</strong> 为大多数平台提供了官方的 <a href="https://nodejs.org/en/download/">安装程序</a>。也可以前往 <a href="https://npm.taobao.org/mirrors/node">淘宝 Node.js 镜像</a> 下载。</p>
<p>其它的安装方法：</p>
<ul>
<li>Windows：通过 <a href="https://github.com/jasongin/nvs/">nvs</a>（推荐）或者<a href="https://github.com/nvm-sh/nvm">nvm</a> 安装。</li>
<li>Mac：使用 <a href="https://brew.sh/">Homebrew</a> 或 <a href="http://www.macports.org/">MacPorts</a> 安装。</li>
<li>Linux（DEB/RPM-based）：从 <a href="https://github.com/nodesource/distributions">NodeSource</a> 安装。</li>
<li>其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 <a href="https://nodejs.org/en/download/package-manager/">指导</a></li>
</ul>
<p>对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。</p>
<blockquote>
<p><strong>Windows 用户</strong></p>
<p>使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</p>
</blockquote>
<blockquote>
<p><strong>For Mac / Linux 用户</strong></p>
<p>如果在尝试安装 Hexo 的过程中出现 <code>EACCES</code> 权限错误，请遵循 <a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally">由 npmjs 发布的指导</a> 修复该问题。建议 <strong>不要</strong> 使用 root、sudo 等方法覆盖权限</p>
</blockquote>
<blockquote>
<p><strong>Linux</strong></p>
<p>‎如果您使用Snap安装了<strong>Node.js</strong>，在‎<a href="https://hexo.io/docs/commands#init">‎初始化‎</a>‎博客时，您可能需要手动运行在目标文件夹中。‎<code>npm install</code></p>
</blockquote>
<h4 id="1-1-3-安装-Git"><a href="#1-1-3-安装-Git" class="headerlink" title="1.1.3 安装 Git"></a>1.1.3 安装 Git</h4><ul>
<li>Windows：下载并安装 <a href="https://git-scm.com/download/win">git</a>.</li>
<li>Mac：使用 <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> 或者下载 <a href="http://sourceforge.net/projects/git-osx-installer/">安装程序</a>。</li>
<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>
</ul>
<blockquote>
<p><strong>Mac 用户</strong></p>
<p>如果在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p>
</blockquote>
<blockquote>
<p><strong>Windows 用户</strong></p>
<p>前往 <a href="https://npm.taobao.org/mirrors/git-for-windows/">淘宝 Git for Windows 镜像</a> 下载 git 安装包。</p>
</blockquote>
<h4 id="1-1-4-安装-Hexo"><a href="#1-1-4-安装-Hexo" class="headerlink" title="1.1.4 安装 Hexo"></a>1.1.4 安装 Hexo</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="1-1-5-进阶安装和使用"><a href="#1-1-5-进阶安装和使用" class="headerlink" title="1.1.5 进阶安装和使用"></a>1.1.5 进阶安装和使用</h4><p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure>

<p>安装以后，可以使用以下两种方式执行 Hexo：</p>
<ol>
<li><p><code>npx hexo &lt;command&gt;</code></p>
</li>
<li><p>将 Hexo 所在的目录下的 <code>node_modules</code> 添加到环境变量之中即可直接使用 <code>hexo &lt;command&gt;</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &#39;PATH&#x3D;&quot;$PATH:.&#x2F;node_modules&#x2F;.bin&quot;&#39; &gt;&gt; ~&#x2F;.profile</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="1-1-6-Node-js-版本限制"><a href="#1-1-6-Node-js-版本限制" class="headerlink" title="1.1.6 Node.js 版本限制"></a>1.1.6 Node.js 版本限制</h4><p>我们强烈建议永远安装最新版本的 Hexo，以及 <a href="https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90">推荐的 Node.js 版本</a>。</p>
<table>
<thead>
<tr>
<th align="left">Hexo 版本</th>
<th align="center">最低兼容 Node.js 版本</th>
</tr>
</thead>
<tbody><tr>
<td align="left">5.0+</td>
<td align="center">10.13.0</td>
</tr>
<tr>
<td align="left">4.1 - 4.2</td>
<td align="center">8.10</td>
</tr>
<tr>
<td align="left">4.0</td>
<td align="center">8.6</td>
</tr>
<tr>
<td align="left">3.3 - 3.9</td>
<td align="center">6.9</td>
</tr>
<tr>
<td align="left">3.2 - 3.3</td>
<td align="center">0.12</td>
</tr>
<tr>
<td align="left">3.0 - 3.1</td>
<td align="center">0.10 or iojs</td>
</tr>
<tr>
<td align="left">0.0.1 - 2.8</td>
<td align="center">0.10</td>
</tr>
</tbody></table>
<h3 id="2-建站"><a href="#2-建站" class="headerlink" title="2 建站"></a>2 建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<h4 id="2-1-config-yml"><a href="#2-1-config-yml" class="headerlink" title="2.1 _config.yml"></a>2.1 _config.yml</h4><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p>
<h4 id="2-2-package-json"><a href="#2-2-package-json" class="headerlink" title="2.2 package.json"></a>2.2 package.json</h4><p>应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package.json&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-scaffolds"><a href="#2-3-scaffolds" class="headerlink" title="2.3 scaffolds"></a>2.3 scaffolds</h4><p><a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的文章文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h4 id="2-4-source"><a href="#2-4-source" class="headerlink" title="2.4 source"></a>2.4 source</h4><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<h4 id="2-5-themes"><a href="#2-5-themes" class="headerlink" title="2.5 themes"></a>2.5 themes</h4><p><a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>
<h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3 配置"></a>3 配置</h3><p>您可以在 <code>_config.yml</code> 中修改大部分的配置。</p>
<h4 id="3-1-网站"><a href="#3-1-网站" class="headerlink" title="3.1 网站"></a>3.1 网站</h4><hr>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>title</code></td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="left"><code>subtitle</code></td>
<td align="left">网站副标题</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="left"><code>keywords</code></td>
<td align="left">网站的关键词。支持多个关键词。</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">您的名字</td>
</tr>
<tr>
<td align="left"><code>language</code></td>
<td align="left">网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td>
</tr>
<tr>
<td align="left"><code>timezone</code></td>
<td align="left">网站时区。Hexo 默认使用您电脑的时区。请参考 <a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a> 进行设置，如 <code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。一般的，对于中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td>
</tr>
</tbody></table>
<p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p>
<h4 id="3-2-网址"><a href="#3-2-网址" class="headerlink" title="3.2 网址"></a>3.2 网址</h4><hr>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>url</code></td>
<td align="left">网址, must starts with <code>http://</code> or <code>https://</code></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>root</code></td>
<td align="left">网站根目录</td>
<td align="left"><code>url&#39;s pathname</code></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td>
<td align="left"><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td align="left"><code>permalink_defaults</code></td>
<td align="left">永久链接中各部分的默认值</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>pretty_urls</code></td>
<td align="left">改写 <a href="https://hexo.io/zh-cn/docs/variables"><code>permalink</code></a> 的值来美化 URL</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>pretty_urls.trailing_index</code></td>
<td align="left">是否在永久链接中保留尾部的 <code>index.html</code>，设置为 <code>false</code> 时去除</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>pretty_urls.trailing_html</code></td>
<td align="left">是否在永久链接中保留尾部的 <code>.html</code>, 设置为 <code>false</code> 时去除 (<em>对尾部的 <code>index.html</code>无效</em>)</td>
<td align="left"><code>true</code></td>
</tr>
</tbody></table>
<blockquote>
<p>网站存放在子目录</p>
<p>如果您的网站存放在子目录中，例如 <code>http://example.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://example.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 比如，一个页面的永久链接是 http:&#x2F;&#x2F;example.com&#x2F;foo&#x2F;bar&#x2F;index.html</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: false</span><br><span class="line"># 此时页面的永久链接会变为 http:&#x2F;&#x2F;example.com&#x2F;foo&#x2F;bar&#x2F;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-目录"><a href="#3-3-目录" class="headerlink" title="3.3 目录"></a>3.3 目录</h4><hr>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>source_dir</code></td>
<td align="left">资源文件夹，这个文件夹用来存放内容。</td>
<td align="left"><code>source</code></td>
</tr>
<tr>
<td align="left"><code>public_dir</code></td>
<td align="left">公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td align="left"><code>public</code></td>
</tr>
<tr>
<td align="left"><code>tag_dir</code></td>
<td align="left">标签文件夹</td>
<td align="left"><code>tags</code></td>
</tr>
<tr>
<td align="left"><code>archive_dir</code></td>
<td align="left">归档文件夹</td>
<td align="left"><code>archives</code></td>
</tr>
<tr>
<td align="left"><code>category_dir</code></td>
<td align="left">分类文件夹</td>
<td align="left"><code>categories</code></td>
</tr>
<tr>
<td align="left"><code>code_dir</code></td>
<td align="left">Include code 文件夹，<code>source_dir</code> 下的子目录</td>
<td align="left"><code>downloads/code</code></td>
</tr>
<tr>
<td align="left"><code>i18n_dir</code></td>
<td align="left">国际化（i18n）文件夹</td>
<td align="left"><code>:lang</code></td>
</tr>
<tr>
<td align="left"><code>skip_render</code></td>
<td align="left">跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <a href="https://github.com/micromatch/micromatch#extended-globbing">glob 表达式</a>来匹配路径。</td>
<td align="left"></td>
</tr>
</tbody></table>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">skip_render: &quot;mypage&#x2F;**&#x2F;*&quot;</span><br><span class="line"># 将会直接将 &#96;source&#x2F;mypage&#x2F;index.html&#96; 和 &#96;source&#x2F;mypage&#x2F;code.js&#96; 不做改动地输出到 &#39;public&#39; 目录</span><br><span class="line"># 你也可以用这种方法来跳过对指定文章文件的渲染</span><br><span class="line">skip_render: &quot;_posts&#x2F;test-post.md&quot;</span><br><span class="line"># 这将会忽略对 &#39;test-post.md&#39; 的渲染</span><br></pre></td></tr></table></figure>

<blockquote>
<p>提示</p>
<p>如果您刚刚开始接触 Hexo，通常没有必要修改这一部分的值。</p>
</blockquote>
<h4 id="3-4-文章"><a href="#3-4-文章" class="headerlink" title="3.4 文章"></a>3.4 文章</h4><hr>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>new_post_name</code></td>
<td align="left">新文章的文件名称</td>
<td align="left">:title.md</td>
</tr>
<tr>
<td align="left"><code>default_layout</code></td>
<td align="left">预设布局</td>
<td align="left">post</td>
</tr>
<tr>
<td align="left"><code>auto_spacing</code></td>
<td align="left">在中文和英文之间加入空格</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>titlecase</code></td>
<td align="left">把标题转换为 title case</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>external_link</code></td>
<td align="left">在新标签中打开链接</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>external_link.enable</code></td>
<td align="left">在新标签中打开链接</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>external_link.field</code></td>
<td align="left">对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td>
<td align="left"><code>site</code></td>
</tr>
<tr>
<td align="left"><code>external_link.exclude</code></td>
<td align="left">需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td>
<td align="left"><code>[]</code></td>
</tr>
<tr>
<td align="left"><code>filename_case</code></td>
<td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left"><code>render_drafts</code></td>
<td align="left">显示草稿</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>post_asset_folder</code></td>
<td align="left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders">Asset 文件夹</a></td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>relative_link</code></td>
<td align="left">把链接改为与根目录的相对位址</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>future</code></td>
<td align="left">显示未来的文章</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>highlight</code></td>
<td align="left">代码块的设置, see <a href="https://hexo.io/docs/syntax-highlight#Highlight-js">Highlight.js</a> section for usage guide</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>prismjs</code></td>
<td align="left">代码块的设置, see <a href="https://hexo.io/docs/syntax-highlight#PrismJS">PrismJS</a> section for usage guide</td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>相对地址</p>
<p>默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <code>example.com</code>,您有一篇文章名为 <code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p>
</blockquote>
<h4 id="3-5-分类-amp-标签"><a href="#3-5-分类-amp-标签" class="headerlink" title="3.5 分类 &amp; 标签"></a>3.5 分类 &amp; 标签</h4><hr>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>default_category</code></td>
<td align="left">默认分类</td>
<td align="left"><code>uncategorized</code></td>
</tr>
<tr>
<td align="left"><code>category_map</code></td>
<td align="left">分类别名</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>tag_map</code></td>
<td align="left">标签别名</td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="3-6-日期-时间格式"><a href="#3-6-日期-时间格式" class="headerlink" title="3.6 日期 / 时间格式"></a>3.6 日期 / 时间格式</h4><hr>
<p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>date_format</code></td>
<td align="left">日期格式</td>
<td align="left"><code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td align="left"><code>time_format</code></td>
<td align="left">时间格式</td>
<td align="left"><code>HH:mm:ss</code></td>
</tr>
<tr>
<td align="left"><code>updated_option</code></td>
<td align="left">当 Front Matter 中没有指定 <a href="https://hexo.io/zh-cn/docs/variables#%E9%A1%B5%E9%9D%A2%E5%8F%98%E9%87%8F"><code>updated</code></a> 时 <code>updated</code> 的取值</td>
<td align="left"><code>mtime</code></td>
</tr>
</tbody></table>
<blockquote>
<p>updated_option</p>
<p><code>updated_option</code> 控制了当 Front Matter 中没有指定 <code>updated</code> 时，<code>updated</code> 如何取值：</p>
<ul>
<li><code>mtime</code>: 使用文件的最后修改时间。这是从 Hexo 3.0.0 开始的默认行为。</li>
<li><code>date</code>: 使用 <code>date</code> 作为 <code>updated</code> 的值。可被用于 Git 工作流之中，因为使用 Git 管理站点时，文件的最后修改日期常常会发生改变</li>
<li><code>empty</code>: 直接删除 <code>updated</code>。使用这一选项可能会导致大部分主题和插件无法正常工作。</li>
</ul>
<p><code>use_date_for_updated</code> 选项已经被废弃，将会在下个重大版本发布时去除。请改为使用 <code>updated_option: &#39;date&#39;</code>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use_date_for_updated&#96; | 启用以后，如果 Front Matter 中没有指定 &#96;updated&#96;， [&#96;post.updated&#96;](https:&#x2F;&#x2F;hexo.io&#x2F;zh-cn&#x2F;docs&#x2F;configuration) 将会使用 &#96;date&#96; 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用 | &#96;true</span><br></pre></td></tr></table></figure>

<h4 id="3-7-分页"><a href="#3-7-分页" class="headerlink" title="3.7 分页"></a>3.7 分页</h4><hr>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>per_page</code></td>
<td align="left">每页显示的文章量 (0 = 关闭分页功能)</td>
<td align="left"><code>10</code></td>
</tr>
<tr>
<td align="left"><code>pagination_dir</code></td>
<td align="left">分页目录</td>
<td align="left"><code>page</code></td>
</tr>
</tbody></table>
<h4 id="3-8-扩展"><a href="#3-8-扩展" class="headerlink" title="3.8 扩展"></a>3.8 扩展</h4><hr>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>theme</code></td>
<td align="left">当前主题名称。值为<code>false</code>时禁用主题</td>
</tr>
<tr>
<td align="left"><code>theme_config</code></td>
<td align="left">主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td>
</tr>
<tr>
<td align="left"><code>deploy</code></td>
<td align="left">部署部分的设置</td>
</tr>
<tr>
<td align="left"><code>meta_generator</code></td>
<td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#%E5%B1%9E%E6%80%A7">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td>
</tr>
</tbody></table>
<h4 id="3-9-包括或不包括目录和文件"><a href="#3-9-包括或不包括目录和文件" class="headerlink" title="3.9 包括或不包括目录和文件"></a>3.9 包括或不包括目录和文件</h4><hr>
<p>在 Hexo 配置文件中，通过设置 include/exclude 可以让 Hexo 进行处理或忽略某些目录和文件夹。你可以使用 <a href="https://github.com/isaacs/minimatch">glob 表达式</a> 对目录和文件进行匹配。</p>
<p><code>include</code> and <code>exclude</code> options only apply to the <code>source/</code> folder, whereas <code>ignore</code> option applies to all folders.</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>include</code></td>
<td align="left">Hexo 默认会忽略隐藏文件和文件夹（包括名称以下划线和 <code>.</code> 开头的文件和文件夹，Hexo 的 <code>_posts</code> 和 <code>_data</code> 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 <code>source</code> 目录下。</td>
</tr>
<tr>
<td align="left"><code>exclude</code></td>
<td align="left">Hexo 会忽略这些文件和目录</td>
</tr>
<tr>
<td align="left"><code>ignore</code></td>
<td align="left">Ignore files/folders</td>
</tr>
</tbody></table>
<p>举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Include&#x2F;Exclude Files&#x2F;Folders</span><br><span class="line">include:</span><br><span class="line">  - &quot;.nojekyll&quot;</span><br><span class="line">  # 包括 &#39;source&#x2F;css&#x2F;_typing.css&#39;</span><br><span class="line">  - &quot;css&#x2F;_typing.css&quot;</span><br><span class="line">  # 包括 &#39;source&#x2F;_css&#x2F;&#39; 中的任何文件，但不包括子目录及其其中的文件。</span><br><span class="line">  - &quot;_css&#x2F;*&quot;</span><br><span class="line">  # 包含 &#39;source&#x2F;_css&#x2F;&#39; 中的任何文件和子目录下的任何文件</span><br><span class="line">  - &quot;_css&#x2F;**&#x2F;*&quot;</span><br><span class="line"></span><br><span class="line">exclude:</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;test.js&#39;</span><br><span class="line">  - &quot;js&#x2F;test.js&quot;</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;&#39; 中的文件、但包括子目录下的所有目录和文件</span><br><span class="line">  - &quot;js&#x2F;*&quot;</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;&#39; 中的文件和子目录下的任何文件</span><br><span class="line">  - &quot;js&#x2F;**&#x2F;*&quot;</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;&#39; 目录下的所有文件名以 &#39;test&#39; 开头的文件，但包括其它文件和子目录下的单文件</span><br><span class="line">  - &quot;js&#x2F;test*&quot;</span><br><span class="line">  # 不包括 &#39;source&#x2F;js&#x2F;&#39; 及其子目录中任何以 &#39;test&#39; 开头的文件</span><br><span class="line">  - &quot;js&#x2F;**&#x2F;test*&quot;</span><br><span class="line">  # 不要用 exclude 来忽略 &#39;source&#x2F;_posts&#x2F;&#39; 中的文件。你应该使用 &#39;skip_render&#39;，或者在要忽略的文件的文件名之前加一个下划线 &#39;_&#39;</span><br><span class="line">  # 在这里配置一个 - &quot;_posts&#x2F;hello-world.md&quot; 是没有用的。</span><br><span class="line"></span><br><span class="line">ignore:</span><br><span class="line">  # Ignore any folder named &#39;foo&#39;.</span><br><span class="line">  - &quot;**&#x2F;foo&quot;</span><br><span class="line">  # Ignore &#39;foo&#39; folder in &#39;themes&#x2F;&#39; only.</span><br><span class="line">  - &quot;**&#x2F;themes&#x2F;*&#x2F;foo&quot;</span><br><span class="line">  # Same as above, but applies to every subfolders of &#39;themes&#x2F;&#39;.</span><br><span class="line">  - &quot;**&#x2F;themes&#x2F;**&#x2F;foo&quot;</span><br></pre></td></tr></table></figure>

<p>列表中的每一项都必须用单引号或双引号包裹起来。</p>
<p><code>include</code> 和 <code>exclude</code> 并不适用于 <code>themes/</code> 目录下的文件。如果需要忽略 <code>themes/</code> 目录下的部分文件或文件夹，可以使用 <code>ignore</code> 或在文件名之前添加下划线 <code>_</code>。</p>
<h4 id="3-10-使用代替配置文件"><a href="#3-10-使用代替配置文件" class="headerlink" title="3.10 使用代替配置文件"></a>3.10 使用代替配置文件</h4><hr>
<p>可以在 hexo-cli 中使用 <code>--config</code> 参数来指定自定义配置文件的路径。你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># use &#39;custom.yml&#39; in place of &#39;_config.yml&#39;</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># use &#39;custom.yml&#39; &amp; &#39;custom2.json&#39;, prioritizing &#39;custom3.yml&#39;, then &#39;custom2.json&#39;</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>

<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>
<p>例如，使用 <code>--options</code> 指定了两个自定义配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate --config custom.yml,custom2.json</span><br></pre></td></tr></table></figure>

<p>如果 <code>custom.yml</code> 中指定了 <code>foo: bar</code>，在 custom2.json 中指定了 <code>&quot;foo&quot;: &quot;dinosaur&quot;</code>，那么在 <code>_multiconfig.yml</code> 中你会得到 <code>foo: dinosaur</code>。</p>
<h4 id="3-11-使用代替主题配置文件"><a href="#3-11-使用代替主题配置文件" class="headerlink" title="3.11 使用代替主题配置文件"></a>3.11 使用代替主题配置文件</h4><hr>
<p>通常情况下，Hexo 主题是一个独立的项目，并拥有一个独立的 <code>_config.yml</code> 配置文件。</p>
<p>除了自行维护独立的主题配置文件，你也可以在其它地方对主题进行配置。</p>
<p><strong>配置文件中的 <code>theme_config</code></strong></p>
<blockquote>
<p>该特性自 Hexo 2.8.2 起提供</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line">theme_config:</span><br><span class="line">  bio: &quot;My awesome bio&quot;</span><br><span class="line">  foo:</span><br><span class="line">    bar: &#39;a&#39;</span><br><span class="line"># themes&#x2F;my-theme&#x2F;_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#39;b&#39;</span><br></pre></td></tr></table></figure>

<p>最终主题配置的输出是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>独立的 <code>_config.[theme].yml</code> 文件</strong></p>
<blockquote>
<p>该特性自 Hexo 5.0.0 起提供</p>
</blockquote>
<p>独立的主题配置文件应放置于站点根目录下，支持 <code>yml</code> 或 <code>json</code> 格式。需要配置站点 <code>_config.yml</code> 文件中的 <code>theme</code> 以供 Hexo 寻找 <code>_config.[theme].yml</code> 文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># _config.yml</span><br><span class="line">theme: &quot;my-theme&quot;</span><br><span class="line"># _config.my-theme.yml</span><br><span class="line">bio: &quot;My awesome bio&quot;</span><br><span class="line">foo:</span><br><span class="line">  bar: &#39;a&#39;</span><br><span class="line"># themes&#x2F;my-theme&#x2F;_config.yml</span><br><span class="line">bio: &quot;Some generic bio&quot;</span><br><span class="line">logo: &quot;a-cool-image.png&quot;</span><br><span class="line">  foo:</span><br><span class="line">    baz: &#39;b&#39;</span><br></pre></td></tr></table></figure>

<p>最终主题配置的输出是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  bio: &quot;My awesome bio&quot;,</span><br><span class="line">  logo: &quot;a-cool-image.png&quot;,</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &quot;a&quot;,</span><br><span class="line">    baz: &quot;b&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>建议将所有的主题配置集中在一处。如果不得不在多处配置你的主题，注意以下信息：Hexo 在合并主题配置时，Hexo 配置文件中的 <code>theme_config</code> 的优先级最高，其次是 <code>_config.[theme].yml</code> 文件，最后是位于主题目录下的 <code>_config.yml</code> 文件。</p>
</blockquote>
<h3 id="4-指令"><a href="#4-指令" class="headerlink" title="4 指令"></a>4 指令</h3><h4 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>

<p>新建一个网站。 如果没有设置 ，Hexo 默认在目前的文件夹建立网站。<code>folder</code></p>
<p>此命令是运行以下步骤的快捷方式：</p>
<ol>
<li>Git 克隆<a href="https://github.com/hexojs/hexo-starter">hexo 启动器</a>，包括<a href="https://github.com/hexojs/hexo-theme-landscape">hexo 主题</a>到当前目录或目标文件夹（如果指定）。</li>
<li>使用包管理器安装依赖项：<a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、pnpm 或<a href="https://docs.npmjs.com/cli/install">npm，</a>以安装者为准： 如果安装了多个，则优先级将列出。默认情况下npm与Node.js捆绑。</li>
</ol>
<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>列出网站资料。</p>
<h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>

<p>显示 Hexo 版本。</p>
<h4 id="4-1-新增功能"><a href="#4-1-新增功能" class="headerlink" title="4.1 新增功能"></a>4.1 新增功能</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>新建一篇文章。 如果没有设置 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 参数代替。 如果标题包含空格的话，请使用引号括起来。<code>layout``default_layout</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>,<code>--path</code></td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td align="left"><code>-r</code>,<code>--replace</code></td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td align="left"><code>-s</code>,<code>--slug</code></td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。 对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 文件。 你可以使用 参数来覆盖上述行为、自行决定文件的目录：<code>index.md``--path</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me &quot;About me&quot;</span><br></pre></td></tr></table></figure>

<p>以上命令会创建一个 文件，同时 Front Matter 中的 title 为 <code>source/about/me.md``&quot;About me&quot;</code></p>
<p>注意！ title 是必须指定的！ 如果你这么做并不能达到你的目的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page --path about&#x2F;me</span><br></pre></td></tr></table></figure>

<p>此时 Hexo 会创建 ，同时 的 Front Matter 中的 title 为 。 这是因为在上述命令中，hexo-cli 将 视为指定文章的标题、并采用默认的 。<code>source/_posts/about/me.md``me.md``&quot;page&quot;``page``layout</code></p>
<h4 id="4-2-生成"><a href="#4-2-生成" class="headerlink" title="4.2 生成"></a>4.2 生成</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>,<code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>,<code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left"><code>-b</code>,<code>--bail</code></td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left"><code>-f</code>,<code>--force</code></td>
<td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 目录存在，那么 只会重新生成改动的文件。 使用该参数的效果接近 <code>public``hexo g``hexo clean &amp;&amp; hexo generate</code></td>
</tr>
<tr>
<td align="left"><code>-c</code>,<code>--concurrency</code></td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>

<h4 id="4-3-发布"><a href="#4-3-发布" class="headerlink" title="4.3 发布"></a>4.3 发布</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>发表草稿。</p>
<h4 id="4-4-服务器"><a href="#4-4-服务器" class="headerlink" title="4.4 服务器"></a>4.4 服务器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>启动服务器。 默认情况下，访问网址为： 。<code>http://localhost:4000/</code></p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>,<code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>,<code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>,<code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h4 id="4-5-部署"><a href="#4-5-部署" class="headerlink" title="4.5 部署"></a>4.5 部署</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>,<code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h4 id="4-6-呈现"><a href="#4-6-呈现" class="headerlink" title="4.6 呈现"></a>4.6 呈现</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>

<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o</code>,<code>--output</code></td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h4 id="4-7-迁移"><a href="#4-7-迁移" class="headerlink" title="4.7 迁移"></a>4.7 迁移</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>

<p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p>
<h4 id="4-8-清理"><a href="#4-8-清理" class="headerlink" title="4.8 清理"></a>4.8 清理</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 () 和已生成的静态文件 ()。<code>db.json``public</code></p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h4 id="4-9-选项"><a href="#4-9-选项" class="headerlink" title="4.9 选项"></a>4.9 选项</h4><h5 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure>

<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h5 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure>

<p>在终端中显示调试信息并记录到 。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。<code>debug.log</code></p>
<h5 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure>

<p>隐藏终端信息。</p>
<h5 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml 和 custom2.json，其中 custom2.json 优先级更高</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>

<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。 例如：<code>_config.yml</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 使用 custom.yml 代替默认的 _config.yml</span><br><span class="line">$ hexo server --config custom.yml</span><br><span class="line"></span><br><span class="line"># 使用 custom.yml, custom2.json 和 custom3.yml，其中 custom3.yml 优先级最高，其次是 custom2.json</span><br><span class="line">$ hexo generate --config custom.yml,custom2.json,custom3.yml</span><br></pre></td></tr></table></figure>

<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 。 如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。 这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。<code>_multiconfig.yml</code></p>
<h5 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>

<p>显示 文件夹中的草稿文章。<code>source/_drafts</code></p>
<h5 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>

<p>自定义当前工作目录（Current working directory）的路径。</p>
<h3 id="5-迁移"><a href="#5-迁移" class="headerlink" title="5 迁移"></a>5 迁移</h3><h4 id="5-1-RSS"><a href="#5-1-RSS" class="headerlink" title="5.1 RSS"></a>5.1 RSS</h4><p>首先，安装 <code>hexo-migrator-rss</code> 插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-migrator-rss --save</span><br></pre></td></tr></table></figure>

<p>插件安装完成后，执行下列命令，从 RSS 迁移所有文章。<code>source</code> 可以是文件路径或网址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo migrate rss &lt;source&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-Jekyll"><a href="#5-2-Jekyll" class="headerlink" title="5.2 Jekyll"></a>5.2 Jekyll</h4><p>把 <code>_posts</code> 文件夹内的所有文件复制到 <code>source/_posts</code> 文件夹，并在 <code>_config.yml</code> 中修改 <code>new_post_name</code> 参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure>

<h4 id="5-3-Octopress"><a href="#5-3-Octopress" class="headerlink" title="5.3 Octopress"></a>5.3 Octopress</h4><p>把 Octopress <code>source/_posts</code> 文件夹内的所有文件转移到 Hexo 的 <code>source/_posts</code> 文件夹，并修改 <code>_config.yml</code> 中的 <code>new_post_name</code> 参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new_post_name: :year-:month-:day-:title.md</span><br></pre></td></tr></table></figure>

<h4 id="5-4-WordPress"><a href="#5-4-WordPress" class="headerlink" title="5.4 WordPress"></a>5.4 WordPress</h4><p>首先，安装 <code>hexo-migrator-wordpress</code> 插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure>

<p>在 WordPress 仪表盘中导出数据(“Tools” → “Export” → “WordPress”)（详情参考<a href="http://en.support.wordpress.com/export/">WP支持页面</a>）。</p>
<p>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 WordPress 导出的文件路径或网址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo migrate wordpress &lt;source&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意</p>
<p>这个插件并不能完美地实现WordPress-&gt;Hexo的数据转换，尤其是在处理WordPress的分类方面存在问题（见<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter中的分类与标签</a>）。因此，建议您在迁移完成后，手工审阅所有生成的markdown文件，检查其中是否有错误。对于文章数量较大的WordPress站点，这项工作可能要花很长的时间。</p>
</blockquote>
<h4 id="5-5-Joomla"><a href="#5-5-Joomla" class="headerlink" title="5.5 Joomla"></a>5.5 Joomla</h4><p>首先，安装 <code>hexo-migrator-joomla</code> 插件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-migrator-joomla --save</span><br></pre></td></tr></table></figure>

<p>使用 <a href="http://extensions.joomla.org/extensions/migration-a-conversion/data-import-a-export/12816?qh=YToxOntpOjA7czo1OiJqMnhtbCI7fQ==">J2XML</a> 组件导出 Joomla 文章。<br>插件安装完成后，执行下列命令来迁移所有文章。<code>source</code> 可以是 Joomla 导出的文件路径或网址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo migrate joomla &lt;source&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-写作"><a href="#6-写作" class="headerlink" title="6 写作"></a>6 写作</h3><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>您可以在命令中指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。</p>
<h4 id="6-1-布局（Layout）"><a href="#6-1-布局（Layout）" class="headerlink" title="6.1 布局（Layout）"></a>6.1 布局（Layout）</h4><p>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。在创建这三种不同类型的文件时，它们将会被保存到不同的路径；而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p>
<table>
<thead>
<tr>
<th align="left">布局</th>
<th align="left">路径</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>post</code></td>
<td align="left"><code>source/_posts</code></td>
</tr>
<tr>
<td align="left"><code>page</code></td>
<td align="left"><code>source</code></td>
</tr>
<tr>
<td align="left"><code>draft</code></td>
<td align="left"><code>source/_drafts</code></td>
</tr>
</tbody></table>
<blockquote>
<p>Disabling layout</p>
<p>If you don’t want an article (post/page) to be processed with a theme, set <code>layout: false</code> in its front-matter. Refer to <a href="https://hexo.io/zh-cn/docs/front-matter#%E5%B8%83%E5%B1%80">this section</a> for more details.</p>
</blockquote>
<h4 id="6-2-文件名称"><a href="#6-2-文件名称" class="headerlink" title="6.2 文件名称"></a>6.2 文件名称</h4><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p>
<table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>:title</code></td>
<td align="left">标题（小写，空格将会被替换为短杠）</td>
</tr>
<tr>
<td align="left"><code>:year</code></td>
<td align="left">建立的年份，比如， <code>2015</code></td>
</tr>
<tr>
<td align="left"><code>:month</code></td>
<td align="left">建立的月份（有前导零），比如， <code>04</code></td>
</tr>
<tr>
<td align="left"><code>:i_month</code></td>
<td align="left">建立的月份（无前导零），比如， <code>4</code></td>
</tr>
<tr>
<td align="left"><code>:day</code></td>
<td align="left">建立的日期（有前导零），比如， <code>07</code></td>
</tr>
<tr>
<td align="left"><code>:i_day</code></td>
<td align="left">建立的日期（无前导零），比如， <code>7</code></td>
</tr>
</tbody></table>
<h4 id="6-3-草稿"><a href="#6-3-草稿" class="headerlink" title="6.3 草稿"></a>6.3 草稿</h4><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p>
<h4 id="6-4-模版（Scaffold）"><a href="#6-4-模版（Scaffold）" class="headerlink" title="6.4 模版（Scaffold）"></a>6.4 模版（Scaffold）</h4><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new photo &quot;My Gallery&quot;</span><br></pre></td></tr></table></figure>

<p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p>
<table>
<thead>
<tr>
<th align="left">变量</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>layout</code></td>
<td align="left">布局</td>
</tr>
<tr>
<td align="left"><code>title</code></td>
<td align="left">标题</td>
</tr>
<tr>
<td align="left"><code>date</code></td>
<td align="left">文件建立日期</td>
</tr>
</tbody></table>
<h4 id="6-5-支持的格式"><a href="#6-5-支持的格式" class="headerlink" title="6.5 支持的格式"></a>6.5 支持的格式</h4><p>Hexo 支持以任何格式书写文章，只要安装了相应的渲染插件。</p>
<p>例如，Hexo 默认安装了 <code>hexo-renderer-marked</code> 和 <code>hexo-renderer-ejs</code>，因此你不仅可以用 Markdown 写作，你还可以用 EJS 写作。如果你安装了 <code>hexo-renderer-pug</code>，你甚至可以用 Pug 模板语言书写文章。</p>
<p>只需要将文章的扩展名从 <code>md</code> 改成 <code>ejs</code>，Hexo 就会使用 <code>hexo-renderer-ejs</code> 渲染这个文件，其他格式同理。</p>
<h3 id="7-Front-matter"><a href="#7-Front-matter" class="headerlink" title="7 Front-matter"></a>7 Front-matter</h3><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2013&#x2F;7&#x2F;13 20:46:25</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>layout</code></td>
<td align="left">布局</td>
<td align="left"><a href="https://hexo.io/zh-cn/docs/configuration#%E6%96%87%E7%AB%A0"><code>config.default_layout</code></a></td>
</tr>
<tr>
<td align="left"><code>title</code></td>
<td align="left">标题</td>
<td align="left">文章的文件名</td>
</tr>
<tr>
<td align="left"><code>date</code></td>
<td align="left">建立日期</td>
<td align="left">文件建立日期</td>
</tr>
<tr>
<td align="left"><code>updated</code></td>
<td align="left">更新日期</td>
<td align="left">文件更新日期</td>
</tr>
<tr>
<td align="left"><code>comments</code></td>
<td align="left">开启文章的评论功能</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>tags</code></td>
<td align="left">标签（不适用于分页）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>categories</code></td>
<td align="left">分类（不适用于分页）</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">覆盖文章网址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>excerpt</code></td>
<td align="left">Page excerpt in plain text. Use <a href="https://hexo.io/docs/tag-plugins#Post-Excerpt">this plugin</a> to format the text</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>disableNunjucks</code></td>
<td align="left">Disable rendering of Nunjucks tag <code>&#123;&#123; &#125;&#125;</code>/<code>&#123;% %&#125;</code> and <a href="https://hexo.io/docs/tag-plugins">tag plugins</a> when enabled</td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="7-1-布局"><a href="#7-1-布局" class="headerlink" title="7.1 布局"></a>7.1 布局</h4><p>‎默认布局是 <code>post</code>, 根据设置在<code>_config.yml</code>里的 <a href="https://hexo.io/zh-cn/docs/(/docs/configuration#Writing)"><code>default_layout</code></a> 的值。当文章中的布局被禁用时 (<code>layout: false</code>),它将不会以主题进行处理。但是，它仍将由任何可用的渲染器呈现：如果一篇文章写在标记和标记渲染器（如默认‎<a href="https://github.com/hexojs/hexo-renderer-marked">‎的 hexo 渲染器标记‎</a>‎）中，它将呈现给 HTML。‎<code>post``_config.yml``layout: false</code></p>
<p>‎无论布局如何，‎<a href="https://hexo.io/docs/tag-plugins">‎标记插件‎</a>‎始终被处理，除非设置或‎<a href="https://hexo.io/api/renderer#Disable-Nunjucks-tags">‎渲染器‎</a>‎禁用。‎<code>disableNunjucks</code></p>
<h4 id="7-2-分类和标签"><a href="#7-2-分类和标签" class="headerlink" title="7.2 分类和标签"></a>7.2 分类和标签</h4><p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure>

<blockquote>
<p>分类方法的分歧</p>
<p>如果您有过使用 WordPress 的经验，就很容易误解 Hexo 的分类方式。WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - Diary</span><br><span class="line">  - Life</span><br></pre></td></tr></table></figure>

<p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p>
<p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br></pre></td></tr></table></figure>

<p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p>
</blockquote>
<h4 id="7-3-JSON-Front-matter"><a href="#7-3-JSON-Front-matter" class="headerlink" title="7.3 JSON Front-matter"></a>7.3 JSON Front-matter</h4><p>除了 YAML 外，你也可以使用 JSON 来编写 Front-matter，只要将 <code>---</code> 代换成 <code>;;;</code> 即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;title&quot;: &quot;Hello World&quot;,</span><br><span class="line">&quot;date&quot;: &quot;2013&#x2F;7&#x2F;13 20:46:25&quot;</span><br><span class="line">;;;</span><br></pre></td></tr></table></figure>

<h3 id="8-标签插件（Tag-Plugins）"><a href="#8-标签插件（Tag-Plugins）" class="headerlink" title="8 标签插件（Tag Plugins）"></a>8 标签插件（Tag Plugins）</h3><p>标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</p>
<p>虽然你可以使用任何格式书写你的文章，但是标签插件永远可用，且语法也都是一致的。</p>
<p><em>‎标记插件不应包裹在标记语法中，‎</em>, e.g. <code>[](&#123;% post_path lorem-ipsum %&#125;)</code> 是不被支持的</p>
<h4 id="8-1-引用块"><a href="#8-1-引用块" class="headerlink" title="8.1 引用块"></a>8.1 引用块</h4><p>在文章中插入引言，可包含作者、来源和标题。</p>
<p><strong>别号：</strong> quote</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-2-样例"><a href="#8-2-样例" class="headerlink" title="8.2 样例"></a>8.2 样例</h4><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<p><strong>引用书上的句子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<p><strong>David Levithan</strong>Wide Awake</p>
</blockquote>
<p><strong>引用 Twitter</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https:&#x2F;&#x2F;twitter.com&#x2F;devdocs&#x2F;status&#x2F;356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http:&#x2F;&#x2F;devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io/">http://devdocs.io</a></p>
<p><strong>@DevDocs</strong><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></p>
</blockquote>
<p><strong>引用网络上的文章</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;seths_blog&#x2F;2009&#x2F;07&#x2F;welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Every interaction is both precious and an opportunity to delight.</p>
<p><strong>Seth Godin</strong><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></p>
</blockquote>
<h4 id="8-3-代码块"><a href="#8-3-代码块" class="headerlink" title="8.3 代码块"></a>8.3 代码块</h4><p>在文章中插入代码。</p>
<p><strong>别名：</strong> code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>

<p>Specify additional options in <code>option:value</code> format, e.g. <code>line_number:false first_line:5</code>.</p>
<table>
<thead>
<tr>
<th align="left">Extra Options</th>
<th align="left">Description</th>
<th align="left">Default</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>line_number</code></td>
<td align="left">Show line number</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>highlight</code></td>
<td align="left">Enable code highlighting</td>
<td align="left"><code>true</code></td>
</tr>
<tr>
<td align="left"><code>first_line</code></td>
<td align="left">Specify the first line number</td>
<td align="left"><code>1</code></td>
</tr>
<tr>
<td align="left"><code>mark</code></td>
<td align="left">Line highlight specific line(s), each value separated by a comma. Specify number range using a dash Example: <code>mark:1,4-7,10</code> will mark line 1, 4 to 7 and 10.</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>wrap</code></td>
<td align="left">Wrap the code block in <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table">``</a></td>
<td align="left"><code>true</code></td>
</tr>
</tbody></table>
<h4 id="8-5-样例"><a href="#8-5-样例" class="headerlink" title="8.5 样例"></a>8.5 样例</h4><p><strong>普通的代码块</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#39;Hello World!&#39;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">alert(&#39;Hello World!&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>指定语言</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br></pre></td></tr></table></figure>

<p><strong>附加说明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">Array.maparray.map(callback[, thisArg])</span><br></pre></td></tr></table></figure>

<p><strong>附加说明和网址</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock _.compact http:&#x2F;&#x2F;underscorejs.org&#x2F;#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">_.compactUnderscore.js_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>

<h4 id="8-6-反引号代码块"><a href="#8-6-反引号代码块" class="headerlink" title="8.6 反引号代码块"></a>8.6 反引号代码块</h4><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p>
<p>``` [language] [title] [url] [link text] code snippet ```</p>
<h4 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h4><p>在文章中插入 Pull quote。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h4><p>在文章中嵌入 jsFiddle。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h4><p>在文章中嵌入 Gist。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><p>在文章中插入 iframe。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h4><p>在文章中插入指定大小的图片。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] &#x2F;path&#x2F;to&#x2F;image [width] [height] &#39;&quot;title text&quot; &quot;alt text&quot;&#39; %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h4><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h4><p>插入 <code>source/downloads/code</code> 文件夹内的代码文件。<code>source/downloads/code</code> 不是固定的，取决于你在配置文件中 <code>code_dir</code> 的配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path&#x2F;to&#x2F;file %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-7-样例"><a href="#8-7-样例" class="headerlink" title="8.7 样例"></a>8.7 样例</h4><p><strong>嵌入 test.js 文件全文</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include_code lang:javascript test.js %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>只嵌入第 3 行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:3 to:3 test.js %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>嵌入第 5 行至第 8 行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 to:8 test.js %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>嵌入第 5 行至文件结束</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 test.js %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>嵌入第 1 行至第 8 行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include_code lang:javascript to:8 test.js %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-8-引用文章"><a href="#8-8-引用文章" class="headerlink" title="8.8 引用文章"></a>8.8 引用文章</h4><p>引用其他文章的链接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure>

<p>在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。</p>
<p>例如，在文章中使用 <code>&#123;% post_link how-to-bake-a-cake %&#125;</code> 时，只需有一个名为 <code>how-to-bake-a-cake.md</code> 的文章文件即可。即使这个文件位于站点文件夹的 <code>source/posts/2015-02-my-family-holiday</code> 目录下、或者文章的永久链接是 <code>2018/en/how-to-bake-a-cake</code>，都没有影响。</p>
<p>默认链接文字是文章的标题，你也可以自定义要显示的文本。</p>
<p>默认对文章的标题和自定义标题里的特殊字符进行转义。可以使用<code>escape</code>选项，禁止对特殊字符进行转义。</p>
<p><strong>链接使用文章的标题</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link hexo-3-8-released %&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://hexo.io/news/2018/10/19/hexo-3-8-released/">Hexo 3.8.0 Released</a></p>
<p><strong>链接使用自定义文字</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link hexo-3-8-released &#39;通往文章的链接&#39; %&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://hexo.io/news/2018/10/19/hexo-3-8-released/">通往文章的链接</a></p>
<p><strong>对标题的特殊字符进行转义</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link hexo-4-released &#39;How to use &lt;b&gt; tag in title&#39; %&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://hexo.io/news/2019/10/14/hexo-4-released/">How to use  tag in title</a></p>
<p><strong>禁止对标题的特殊字符进行转义</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_link hexo-4-released &#39;&lt;b&gt;bold&lt;&#x2F;b&gt; custom title&#39; false %&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://hexo.io/news/2019/10/14/hexo-4-released/"><strong>bold</strong> custom title</a></p>
<h4 id="8-9-引用资源"><a href="#8-9-引用资源" class="headerlink" title="8.9 引用资源"></a>8.9 引用资源</h4><p>引用文章的资源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path filename %&#125;</span><br><span class="line">&#123;% asset_img [class names] slug [width] [height] [title text [alt text]] %&#125;</span><br><span class="line">&#123;% asset_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Embed-image"><a href="#Embed-image" class="headerlink" title="Embed image"></a>Embed image</h3><p><em>‎hexo-渲染器标记的 3.1.0+ 可以（可选地）自动解析帖子的图像路径，请参阅‎<a href="https://hexo.io/docs/asset-folders#Embedding-an-image-using-markdown">‎此部分‎</a>‎，了解如何启用该图像。‎</em></p>
<p>“foo.jpg” is located at <code>http://example.com/2020/01/02/hello/foo.jpg</code>.</p>
<p><strong>Default (no option)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img foo.jpg %&#125;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;2020&#x2F;01&#x2F;02&#x2F;hello&#x2F;foo.jpg&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Custom class</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img post-image foo.jpg %&#125;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;2020&#x2F;01&#x2F;02&#x2F;hello&#x2F;foo.jpg&quot; class&#x3D;&quot;post-image&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Display size</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img foo.jpg 500 400 %&#125;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;2020&#x2F;01&#x2F;02&#x2F;hello&#x2F;foo.jpg&quot; width&#x3D;&quot;500&quot; height&#x3D;&quot;400&quot;&gt;</span><br></pre></td></tr></table></figure>

<p><strong>Title &amp; Alt</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img logo.svg &quot;lorem ipsum&#39;dolor&#39;&quot; %&#125;</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;2020&#x2F;01&#x2F;02&#x2F;hello&#x2F;foo.jpg&quot; title&#x3D;&quot;lorem ipsum&quot; alt&#x3D;&quot;dolor&quot;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h4><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="8-10-文章摘要和截断"><a href="#8-10-文章摘要和截断" class="headerlink" title="8.10 文章摘要和截断"></a>8.10 文章摘要和截断</h4><p>在文章中使用 <code>&lt;!-- more --&gt;</code>，那么 <code>&lt;!-- more --&gt;</code> 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure>

<p>首页中将只会出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br></pre></td></tr></table></figure>

<p>正文中则会出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</span><br><span class="line"></span><br><span class="line">Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</span><br></pre></td></tr></table></figure>

<p>注意，摘要可能会被 Front Matter 中的 <code>excerpt</code> 覆盖。</p>
<h3 id="9-资源文件夹"><a href="#9-资源文件夹" class="headerlink" title="9 资源文件夹"></a>9 资源文件夹</h3><p>资源（Asset）代表 <code>source</code> 文件夹中除了文章以外的所有文件，例如图片、CSS、JS 文件等。比方说，如果你的Hexo项目中只有少量图片，那最简单的方法就是将它们放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</p>
<h4 id="9-1-文章资源文件夹"><a href="#9-1-文章资源文件夹" class="headerlink" title="9.1 文章资源文件夹"></a>9.1 文章资源文件夹</h4><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 <code>config.yml</code> 文件中的 <code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_config.ymlpost_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个文章文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</p>
<h4 id="9-2-相对路径引用的标签插件"><a href="#9-2-相对路径引用的标签插件" class="headerlink" title="9.2 相对路径引用的标签插件"></a>9.2 相对路径引用的标签插件</h4><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。在Hexo 2时代，社区创建了很多插件来解决这个问题。但是，随着Hexo 3 的发布，许多新的<a href="https://hexo.io/docs/tag-plugins#Include-Assets">标签插件</a>被加入到了核心代码中。这使得你可以更简单地在文章中引用你的资源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>

<p>比如说：当你打开文章资源文件夹功能后，你把一个 <code>example.jpg</code> 图片放在了你的资源文件夹中，如果通过使用相对路径的常规 markdown 语法 <code>![](example.jpg)</code> ，它将 <em>不会</em> 出现在首页上。（但是它会在文章中按你期待的方式工作）</p>
<p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>

<p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p>
<h4 id="9-3-‎使用‎-markdown嵌入图像"><a href="#9-3-‎使用‎-markdown嵌入图像" class="headerlink" title="9.3 ‎使用‎ markdown嵌入图像"></a>9.3 ‎使用‎ markdown嵌入图像</h4><p><a href="https://github.com/hexojs/hexo-renderer-marked">‎hexo-渲染器标记的‎</a>‎3.1.0引入了一个新的选项，允许您在不使用标签插件的情况下在标记中嵌入图像。‎</p>
<p>To enable:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_config.ymlpost_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure>

<p>‎一旦启用，资产图像将自动解决到其相应的帖子路径。例如，”图像.jpg”位于”/2020/01/02/foo/图像.jpg”，这意味着它是”/2020/01/02/foo/“帖子的资产图像，将呈现为。‎ <code>![](image.jpg)</code> will be rendered as <code>&lt;img src=&quot;/2020/01/02/foo/image.jpg&quot;&gt;</code>.</p>
<h3 id="10-数据文件"><a href="#10-数据文件" class="headerlink" title="10 数据文件"></a>10 数据文件</h3><p>有时您可能需要在主题中使用某些资料，而这些资料并不在文章内，并且是需要重复使用的，那么您可以考虑使用 Hexo 3.0 新增的「数据文件」功能。此功能会载入 <code>source/_data</code> 内的 YAML 或 JSON 文件，如此一来您便能在网站中复用这些文件了。</p>
<p>举例来说，在 <code>source/_data</code> 文件夹中新建 <code>menu.yml</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Home: &#x2F;</span><br><span class="line">Gallery: &#x2F;gallery&#x2F;</span><br><span class="line">Archives: &#x2F;archives&#x2F;</span><br></pre></td></tr></table></figure>

<p>您就能在模板中使用这些资料：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;% for (var link in site.data.menu) &#123; %&gt;</span><br><span class="line">  &lt;a href&#x3D;&quot;&lt;%&#x3D; site.data.menu[link] %&gt;&quot;&gt; &lt;%&#x3D; link %&gt; &lt;&#x2F;a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>

<p>渲染结果如下 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&#x2F;&quot;&gt; Home &lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;gallery&#x2F;&quot;&gt; Gallery &lt;&#x2F;a&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;&#x2F;archives&#x2F;&quot;&gt; Archives &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="11-服务器"><a href="#11-服务器" class="headerlink" title="11 服务器"></a>11 服务器</h3><h4 id="hexo-server"><a href="#hexo-server" class="headerlink" title="hexo-server"></a><a href="https://github.com/hexojs/hexo-server">hexo-server</a></h4><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server">hexo-server</a> 才能使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>

<p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>

<h4 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h4><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server -s</span><br></pre></td></tr></table></figure>

<h4 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h4><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure>

<p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p>
<h4 id="Pow"><a href="#Pow" class="headerlink" title="Pow"></a>Pow</h4><p><a href="http://pow.cx/">Pow</a> 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl get.pow.cx | sh</span><br></pre></td></tr></table></figure>

<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><p>在 <code>~/.pow</code> 文件夹建立链接（symlink）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.pow</span><br><span class="line">$ ln -s &#x2F;path&#x2F;to&#x2F;myapp</span><br></pre></td></tr></table></figure>

<p>您的网站将会在 <code>http://myapp.dev</code> 下运行，网址根据链接名称而定。</p>
<h3 id="11-生成文件"><a href="#11-生成文件" class="headerlink" title="11 生成文件"></a>11 生成文件</h3><p>使用 Hexo 生成静态文件快速而且简单。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h4 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h4><p>Hexo 能够监视文件变动并立即重新生成静态文件，在生成时会比对文件的 SHA1 checksum，只有变动的文件才会写入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate --watch</span><br></pre></td></tr></table></figure>

<h4 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h4><p>您可执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate --deploy</span><br><span class="line">$ hexo deploy --generate</span><br></pre></td></tr></table></figure>

<blockquote>
<p>简写</p>
<p>上面两个命令可以简写为<br>$ hexo g -d<br>$ hexo d -g</p>
</blockquote>
<h2 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h2><p>访问Hexo官网，下载喜欢的主题，此处下载主题为NexT，Next主题有非常多的自定义选项，网络上的美化教程也十分丰富，建议下载。</p>
<h4 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h4><p>如果您使用的是 Hexo 5.0 或更晚，安装最简单的方法是通过 npm：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ npm install hexo-theme-next</span><br></pre></td></tr></table></figure>

<p>或者您可以克隆整个存储库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>

<p>如果您需要任何其他变体，请参阅<a href="https://theme-next.js.org/docs/getting-started/installation.html">详细的安装说明</a>。</p>
<p>安装后，打开 Hexo 配置文件并设置变量。<code>theme``next</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h4><p>目前，NexT 鼓励用户使用<a href="https://theme-next.js.org/docs/getting-started/configuration.html">备用主题配置</a>来配置 NexT。使用<a href="https://theme-next.js.org/docs/advanced-settings/custom-files.html">自定义文件</a>可以轻松地自定义 NexT 的布局或样式。</p>
<p>不建议直接修改 NexT 主题中的任何文件。因为这可能导致错误（例如合并冲突），修改后的文件在升级主题时可能会被丢弃。</p>
<p>但是，您可以绕过合并冲突（错误消息（如**”提交更改或在合并之前将其存放”），**使用本地更改的命令。请参阅<a href="https://stackoverflow.com/a/15745424/5861495">此处</a>如何做到这一点。<code>Commit``Stash``Reset</code></p>
<h4 id="3-插件"><a href="#3-插件" class="headerlink" title="3 插件"></a>3 插件</h4><p>插件扩展和扩展了 NexT 的功能。插件有两种类型：核心插件和第三方插件。核心插件由 NexT 的基本功能要求。第三方插件提供大量可选功能。</p>
<p>配置这些插件非常容易。例如，如果您想在您的网站上启用，只需设置为在NexT配置文件中：<code>pjax``pjax``true</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Easily enable fast Ajax navigation on your website.</span><br><span class="line"># For more information: https:&#x2F;&#x2F;github.com&#x2F;next-theme&#x2F;pjax</span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure>

<h4 id="4-配置-CDN"><a href="#4-配置-CDN" class="headerlink" title="4 配置 CDN"></a>4 配置 CDN</h4><p>默认情况下，第三方插件将从<a href="https://www.jsdelivr.com/">jsDelivr</a> CDN 加载。我们还提供其他可选的清洁发展机制，包括著名的<a href="https://unpkg.com/">联合国驻科特派团</a>和<a href="https://cdnjs.com/">CDNJS。</a></p>
<p>例如，如果您想使用而不是作为默认的 CDN 提供商，则需要编辑 NexT 配置文件中的以下设置：<code>unpkg``jsdelivr</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  # ...</span><br><span class="line">  # Some contents...</span><br><span class="line">  # ...</span><br><span class="line">  plugins: unpkg</span><br></pre></td></tr></table></figure>

<h4 id="5-更新"><a href="#5-更新" class="headerlink" title="5 更新"></a>5 更新</h4><p>NexT 的新版本将每月发布一次。请在更新主题之前阅读<a href="https://github.com/next-theme/hexo-theme-next/releases">发布说明</a>。您可以通过以下命令更新NexT。</p>
<p>安装最新版本的npm：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ npm install hexo-theme-next@latest</span><br></pre></td></tr></table></figure>

<p>或更新到最新的主分支：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd themes&#x2F;next</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<p><strong>如果您想从v5.x/v7.x更新到最新版本，请阅读<a href="https://theme-next.js.org/docs/getting-started/upgrade.html">本文</a>。</strong></p>
<p>创建 Hexo 主题非常容易，您只要在 <code>themes</code> 文件夹内，新增一个任意名称的文件夹，并修改 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。一个主题可能会有以下的结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── languages</span><br><span class="line">├── layout</span><br><span class="line">├── scripts</span><br><span class="line">└── source</span><br></pre></td></tr></table></figure>

<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>在本教程中，我们将会使用 <a href="https://travis-ci.com/">Travis CI</a> 将 Hexo 博客部署到 GitHub Pages 上。Travis CI 对于开源 repository 是免费的，但是这意味着你的站点文件将会是公开的。如果你希望你的站点文件不被公开，请直接前往本文 [私有 Repository](#私有 Repository) 部分。</p>
<ol>
<li>新建一个 repository。如果你希望你的站点能通过 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 域名访问，你的 repository 应该直接命名为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code>。</li>
<li>将你的 Hexo 站点文件夹推送到 repository 中。默认情况下不应该 <code>public</code> 目录将不会被推送到 repository 中，你应该检查 <code>.gitignore</code> 文件中是否包含 <code>public</code> 一行，如果没有请加上。</li>
<li>将 <a href="https://github.com/marketplace/travis-ci">Travis CI</a> 添加到你的 GitHub 账户中。</li>
<li>前往 GitHub 的 <a href="https://github.com/settings/installations">Applications settings</a>，配置 Travis CI 权限，使其能够访问你的 repository。</li>
<li>你应该会被重定向到 Travis CI 的页面。如果没有，请 <a href="https://travis-ci.com/">手动前往</a>。</li>
<li>在浏览器新建一个标签页，前往 GitHub <a href="https://github.com/settings/tokens">新建 Personal Access Token</a>，只勾选 <code>repo</code> 的权限并生成一个新的 Token。Token 生成后请复制并保存好。</li>
<li>回到 Travis CI，前往你的 repository 的设置页面，在 <strong>Environment Variables</strong> 下新建一个环境变量，<strong>Name</strong> 为 <code>GH_TOKEN</code>，<strong>Value</strong> 为刚才你在 GitHub 生成的 Token。确保 <strong>DISPLAY VALUE IN BUILD LOG</strong> 保持 <strong>不被勾选</strong> 避免你的 Token 泄漏。点击 <strong>Add</strong> 保存。</li>
<li>在你的 Hexo 站点文件夹中新建一个 <code>.travis.yml</code> 文件：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - master # build master branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: master</span><br><span class="line">  local-dir: public</span><br></pre></td></tr></table></figure>

<ol>
<li>将 <code>.travis.yml</code> 推送到 repository 中。Travis CI 应该会自动开始运行，并将生成的文件推送到同一 repository 下的 <code>gh-pages</code> 分支下</li>
<li>在 GitHub 中前往你的 repository 的设置页面，修改 <code>GitHub Pages</code> 的部署分支为 <code>gh-pages</code>。</li>
<li>前往 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code> 查看你的站点是否可以访问。这可能需要一些时间。</li>
</ol>
<h4 id="Project-page"><a href="#Project-page" class="headerlink" title="Project page"></a>Project page</h4><p>如果你更希望你的站点部署在 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 的子目录中，你的 repository 需要直接命名为子目录的名字，这样你的站点可以通过 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code> 访问。你需要检查你的 Hexo 配置文件，将 <code>url</code> 修改为 <code>https://&lt;你的 GitHub 用户名&gt;.github.io/&lt;repository 的名字&gt;</code>、将 <code>root</code> 的值修改为 <code>/&lt;repository 的名字&gt;/</code></p>
<h4 id="私有-Repository"><a href="#私有-Repository" class="headerlink" title="私有 Repository"></a>私有 Repository</h4><p>下面的指示基于 <a href="https://hexo.io/docs/one-command-deployment">一键部署</a> 编写。</p>
<ol>
<li><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>.</p>
</li>
<li><p>在 <strong>_config.yml</strong>（如果有已存在的请删除）添加如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt;</span><br><span class="line">  # example, https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行 <code>hexo clean &amp;&amp; hexo deploy</code> 。</p>
</li>
<li><p>查看 <em>username</em>.github.io 上的网页是否部署成功。</p>
</li>
</ol>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul>
<li><a href="https://help.github.com/categories/github-pages-basics/">GitHub Pages 使用文档</a></li>
<li><a href="https://docs.travis-ci.com/user/tutorial/">Travis CI 使用文档</a></li>
<li><a href="https://github.com/hexojs/awesome-hexo">Awesome Hexo</a></li>
<li>[在百度上搜索 “Hexo GitHub”](<a href="https://www.baidu.com/s?wd=Hexo">https://www.baidu.com/s?wd=Hexo</a> GitHub)</li>
</ul>
]]></content>
      <categories>
        <category>办公技能</category>
      </categories>
      <tags>
        <tag>Hexo + Next + Github</tag>
      </tags>
  </entry>
  <entry>
    <title>02-Java基本语法（上）</title>
    <url>/2021/08/14/02-Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><span id="more"></span>

<h3 id="02-Java基本语法（上）：变量与运算符"><a href="#02-Java基本语法（上）：变量与运算符" class="headerlink" title="02-Java基本语法（上）：变量与运算符"></a>02-Java基本语法（上）：变量与运算符</h3><h4 id="1-关键字和保留字"><a href="#1-关键字和保留字" class="headerlink" title="1. 关键字和保留字"></a>1. 关键字和保留字</h4><ul>
<li>关键字(keyword)的定义和特点 <ul>
<li>定义：被Java语言赋予了特殊含义，用做专门用途的字符串（单词）</li>
<li>特点：关键字中所有字母都为小写</li>
<li>官方地址： <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li>
<li><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141129301.png" alt="image-20210814112941844" style="zoom:150%;" /></li>
<li>保留字(reserved word)<ul>
<li>Java保留字：现有Java版本尚未使用，但以后版本可能会作为关键字使 用。自己命名标识符时要避免使用这些保留字 goto 、const</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符"></a>2. 标识符</h4><ul>
<li>标识符：<ul>
<li>Java 对各种==变量、方法和类==等要素命名时使用的字符序列称为标识符</li>
<li>==技巧：凡是自己可以起名字的地方都叫标识符。==</li>
</ul>
</li>
<li>定义合法标识符规则：<ul>
<li>由26个英文字母大小写，0-9 ，_或 $ 组成</li>
<li>数字不可以开头。</li>
<li>不可以使用关键字和保留字，但能包含关键字和保留字。</li>
<li>Java中严格区分大小写，长度无限制。</li>
<li>标识符不能包含空格。</li>
</ul>
</li>
<li>==Java中的名称规范==<ul>
<li>包名：多个单词组成时，所有字母都小写：xxxyyyzzz</li>
<li>类名、接口名：多单词组成时，所有单词的首字母都大写：XxxYyyZzz</li>
<li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li>
<li>常量名：所有字母都大写。多个单词时每个单词用下划线链接：XXX_YYY_ZZZ</li>
</ul>
</li>
</ul>
<h4 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h4><ul>
<li><p>变量的概念：</p>
<ul>
<li>内存中的一个存储区域</li>
<li>该区域的数据可以在同一类型范围内不断变化</li>
<li>变量是程序中最基本的存储单元。包含==变量类型、变量名和存储的值==</li>
</ul>
</li>
<li><p>变量的作用：</p>
<ul>
<li>用于在内存中保存数据</li>
</ul>
</li>
<li><p>使用变量注意：</p>
<ul>
<li>==Java中的每个变量必须先声明，后使用==</li>
<li>使用变量名来访问这块区域的数据</li>
<li>变量的作用域：其定义所在的一对{}内</li>
<li>变量只在其作用域内才有效</li>
<li>同一个作用域内不能定义重名的变量</li>
</ul>
</li>
<li><p>声明变量</p>
<ul>
<li>语法：&lt;数据类型&gt;&lt;变量名&gt;</li>
<li>例如：int var</li>
</ul>
</li>
<li><p>变量的赋值</p>
<ul>
<li>语法：&lt;变量名称&gt; = &lt;值&gt;</li>
<li>例如：var = 10;</li>
</ul>
</li>
<li><p>声明和赋值变量</p>
<ul>
<li>语法： &lt;数据类型&gt; &lt;变量名&gt; = &lt;初始化值&gt;</li>
<li>例如：int var = 10;</li>
</ul>
</li>
<li><p>变量的分类</p>
<ul>
<li><p>按数据类型：对于每一种数据都定义了明确的具体数据类型（强类型语言），在内存中分 配了不同大小的内存空间。</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141215072.png" alt="image-20210814121537925"></p>
</li>
<li><p>按声明的位置的不同</p>
<p>在方法体外，类体内声明的变量称为成员变量。在方法体内部声明的变量称为局部变量。</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141217923.png" alt="image-20210814121706483"></p>
<p>注意：二者在初始化值方面的异同:同：都有生命周期 异：局部变量除形参外，需显式初始化。</p>
</li>
<li><p>整数类型：byte、short、int、long</p>
<ul>
<li><p>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保 证java程序的可移植性。</p>
</li>
<li><p>java的整型常量默认为 int 型，声明long型常量须后加‘l’或‘L’</p>
</li>
<li><p>java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long</p>
<table>
<thead>
<tr>
<th>类 型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1字节=8bit位</td>
<td>-128 ~ 127</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>-2^15^ ~2^15^ -1</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
<td>-2^31^ ~ 2^31^ -1 (约21亿)</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>-2^63^ ~ 2^63^ -1</td>
</tr>
</tbody></table>
<p>500MB 1MB = 1024KB 1KB= 1024B B= byte ? bit? bit: 计算机中的最小存储单位。byte:计算机中基本存储单元。</p>
</li>
</ul>
</li>
<li><p>浮点类型：float、double</p>
<ul>
<li><p>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作 系统的影响。</p>
</li>
<li><p>浮点型常量有两种表示形式：</p>
<ul>
<li>十进制数形式：如：5.12 512.0f .512 (必须有小数点）</li>
<li>科学计数法形式:如：5.12e2 512E2 100E-2</li>
</ul>
</li>
<li><p>float:单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。 double:双精度，精度是float的两倍。通常采用此类型。</p>
</li>
<li><p>Java 的浮点型常量默认为double型，声明float型常量，须后加‘f’或‘F’。</p>
<table>
<thead>
<tr>
<th>类 型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>单精度float</td>
<td>4字节</td>
<td>-3.403E38 ~ 3.403E38</td>
</tr>
<tr>
<td>双精度double</td>
<td>8字节</td>
<td>-1.798E308 ~ 1.798E308</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>字符类型：char</p>
<ul>
<li><p>char 型数据用来表示通常意义上“字符”(2字节)</p>
</li>
<li><p>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字 母，一个汉字，或其他书面语的一个字符。</p>
</li>
<li><p>字符型变量的三种表现形式：</p>
<ul>
<li><p>字符常量是用单引号(‘ ’)括起来的单个字符。例如：char c1 = ‘a’; char c2  = ‘中’; char c3 = ‘9’;</p>
</li>
<li><p>Java中还允许使用转义字符‘\’来将其后的字符转变为特殊字符型常量。 例如：char c3 = ‘\n’; // ‘\n’表示换行符</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\b</td>
<td>退格键</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\r</td>
<td>回车符</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td>\“</td>
<td>双引号</td>
</tr>
<tr>
<td>\‘</td>
<td>单引号</td>
</tr>
<tr>
<td>\\</td>
<td>反斜线</td>
</tr>
</tbody></table>
</li>
<li><p>直接使用 Unicode 值来表示字符型常量：‘\uXXXX’。其中，XXXX代表 一个十六进制整数。如：\u000a 表示 \n。</p>
</li>
<li><p>char类型是可以进行运算的。因为它都对应有Unicode码。</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>布尔类型：boolean</p>
<ul>
<li>boolean 类型用来判断逻辑条件，一般用于程序流程控制：<ul>
<li>if条件控制语句；</li>
<li>while循环控制语句；</li>
<li>do-while循环控制语句；</li>
<li>for循环控制语句；</li>
</ul>
</li>
<li>boolean类型数据只允许取值true和false，无null。<ul>
<li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li>
<li>Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的 boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false 用0表示。———《java虚拟机规范 8版》</li>
</ul>
</li>
</ul>
</li>
<li><p>基本数据类型转换</p>
<ul>
<li><p>自动类型转换：容量小的类型自动转换为容量大的数据类型。数据类型按容 量大小排序为：</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141234328.png" alt="image-20210814123431947"></p>
</li>
<li><p>有多种类型的数据混合运算时，系统首先自动将所有数据转换成容量最大的 那种数据类型，然后再进行计算。</p>
</li>
<li><p>byte,short,char之间不会相互转换，他们三者在计算时首先转换为int类型。</p>
</li>
<li><p>boolean类型不能与其它数据类型运算。</p>
</li>
<li><p>当把任何基本数据类型的值和字符串(String)进行连接运算时(+)，基本数据类 型的值将自动转化为字符串(String)类型。</p>
</li>
</ul>
</li>
<li><p>字符串类型：String</p>
<ul>
<li><p>String不是基本数据类型，属于引用数据类型</p>
</li>
<li><p>使用方式与基本数据类型一致。例如：String str = “abcd”;</p>
</li>
<li><p>一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str = str + “xyz” ; </span><br><span class="line"><span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">str = str + n;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>强制类型转换</p>
<ul>
<li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使 用时要加上强制转换符：()，但可能造成精度降低或溢出,格外要注意。</li>
<li>通常，字符串不能直接转换为基本类型，但通过基本类型对应的包装类则可 以实现把字符串转换成基本类型。</li>
<li>如： String a = “43”; int i = Integer.parseInt(a);</li>
<li>boolean类型不可以转换为其它的数据类型。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a>4. 运算符</h4><ul>
<li><p>算数运算符<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141250720.png" alt="image-20210814125009358"></p>
<ul>
<li>算术运算符的注意问题<ul>
<li>如果对负数取模，可以把模数负号忽略不记，如：5%-2=1。 但被模数是 负数则不可忽略。此外，取模运算的结果不一定总是整数。</li>
<li>对于除号“/”，它的整数除和小数除是有区别的：整数之间做除法时，只 保留整数部分而舍弃小数部分。 例如：int x=3510;x=x/1000*1000; </li>
<li>“+”除字符串相加功能外，还能把非字符串转换成字符串.例如： System.out.println(“5+5=”+5+5); //打印结果是？ 5+5=55 ?</li>
</ul>
</li>
</ul>
</li>
<li><p>赋值运算符：=</p>
<ul>
<li>符号：=<ul>
<li>当“=”两侧数据类型不一致时，可以使用自动类型转换或使用强制 类型转换原则进行处理。</li>
<li>支持连续赋值。</li>
</ul>
</li>
<li>扩展赋值运算符： +=, -=, *=, /=, %=</li>
</ul>
</li>
<li><p>比较运算符<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141255040.png" alt="image-20210814125537627"></p>
<p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</p>
<p>比较运算符“==”不能误写成“=” 。</p>
</li>
<li><p>逻辑运算符</p>
<p>&amp;—逻辑与     | —逻辑或     ！—逻辑非     &amp;&amp; —短路与     || —短路或     ^ —逻辑异或</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141256722.png" alt="image-20210814125656753"></p>
<ul>
<li>逻辑运算符用于连接布尔型表达式，在Java中不可以写成3&lt;x&lt;3 ,应该写成x&gt;3 &amp; x&lt;6 。</li>
<li>“&amp;”和“&amp;&amp;”的区别：<ul>
<li>单&amp;时，左边无论真假，右边都进行运算；</li>
<li>双&amp;时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</li>
</ul>
</li>
<li>“|”和“||”的区别同理，||表示：当左边为真，右边不参与运算。</li>
<li>异或( ^ )与或( | )的不同之处是：当左右都为true时，结果为false。</li>
</ul>
</li>
<li><p>位运算符<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141259463.png" alt="image-20210814125946801"></p>
<ul>
<li>位运算是直接对整数的二进制进行的运算</li>
</ul>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141301684.png" alt="image-20210814130103547"></p>
</li>
<li><p>三元运算符</p>
<ul>
<li>格式：<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141302892.png" alt="image-20210814130208344"></li>
<li>表达式1和表达式2为同种类型</li>
<li>三元运算符与if-else的联系与区别：<ul>
<li>三元运算符可简化if-else语句</li>
<li>三元运算符要求必须返回一个结果。</li>
<li>if后的代码块可有多个语句</li>
</ul>
</li>
</ul>
</li>
<li><p>运算符优先级</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141507310.png" alt="image-20210814150746972"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>02-Java基本语法（下）</title>
    <url>/2021/08/14/02-Java%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="02—Java基本语法（下）：程序流程控制"><a href="#02—Java基本语法（下）：程序流程控制" class="headerlink" title="02—Java基本语法（下）：程序流程控制"></a>02—Java基本语法（下）：程序流程控制</h3><h4 id="1-程序流程控制"><a href="#1-程序流程控制" class="headerlink" title="1. 程序流程控制"></a>1. 程序流程控制</h4><ul>
<li>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组 合成能完成一定功能的小逻辑模块。</li>
<li>其流程控制方式采用结构化程序设计中规定的三种基本流程结构，即：<ul>
<li>顺序结构<ul>
<li>程序从上到下逐行地执行，中间没有任何判断和跳转。</li>
</ul>
</li>
<li>分支结构<ul>
<li>根据条件，选择性地执行某段代码。</li>
<li>有if…else和switch-case两种分支语句。</li>
</ul>
</li>
<li>循环结构<ul>
<li>根据循环条件，重复性的执行某段代码。</li>
<li>有while、do…while、for三种循环语句。</li>
<li>注：JDK1.5提供了foreach循环，方便的遍历集合、数组元素。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2-顺序结构"><a href="#2-顺序结构" class="headerlink" title="2. 顺序结构"></a>2. 顺序结构</h4><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141315615.png" alt="image-20210814131528560"> </p>
<h4 id="3-分支结构"><a href="#3-分支结构" class="headerlink" title="3. 分支结构"></a>3. 分支结构</h4><h5 id="3-1-if-else结构"><a href="#3-1-if-else结构" class="headerlink" title="3.1 if-else结构"></a>3.1 if-else结构</h5><p>if语句三种格式：</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141316077.png" alt="image-20210814131652242"> <img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141318452.png" alt="屏幕截图 2021-08-14 131738" style="zoom:80%;" /></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141319828.png" alt="屏幕截图 2021-08-14 131909"></p>
<h5 id="3-2-switch-case结构"><a href="#3-2-switch-case结构" class="headerlink" title="3.2 switch-case结构"></a>3.2 switch-case结构</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">	<span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">			语句<span class="number">1</span>;</span><br><span class="line">		<span class="comment">// break;</span></span><br><span class="line">	<span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">			语句<span class="number">2</span>;</span><br><span class="line">		<span class="comment">// break;</span></span><br><span class="line">		… …</span><br><span class="line">	<span class="keyword">case</span> 常量N:</span><br><span class="line">			语句N;</span><br><span class="line">		<span class="comment">// break;</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		语句;</span><br><span class="line">		<span class="comment">// break;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141322212.png" alt="image-20210814132242055"></p>
<p>switch语句有关规则</p>
<ul>
<li>switch(表达式)中表达式的值必须是下述几种类型之一：byte，short， char，int，枚举 (jdk 5.0)，String (jdk 7.0)；</li>
<li>case子句中的值必须是常量，不能是变量名或不确定的表达式值；</li>
<li>同一个switch语句，所有case子句中的常量值互不相同；</li>
<li>break语句用来在执行完一个case分支后使程序跳出switch语句块；如 果没有break，程序会顺序执行到switch结尾</li>
<li>default子句是可任选的。同时，位置也是灵活的。当没有匹配的case时， 执行default</li>
</ul>
<h4 id="4-循环结构"><a href="#4-循环结构" class="headerlink" title="4.循环结构"></a>4.循环结构</h4><h5 id="4-1-for循环"><a href="#4-1-for循环" class="headerlink" title="4.1 for循环"></a>4.1 for循环</h5><ul>
<li><p>语法格式</p>
<p>for (①初始化部分; ②循环条件部分; ④迭代部分)｛ </p>
<p>​         ③循环体部分; </p>
<p>｝</p>
</li>
<li><p>执行过程：</p>
<p>①-②-③-④-②-③-④-②-③-④-…..-②</p>
</li>
<li><p>说明：</p>
<ul>
<li><p>②循环条件部分为boolean类型表达式，当值为false时，退出循环</p>
</li>
<li><p>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</p>
</li>
<li><p>④可以有多个变量更新，用逗号分隔</p>
<img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108141928696.png" alt="image-20210814192817184" style="zoom:80%;" />

</li>
</ul>
</li>
</ul>
<h5 id="4-2-while循环"><a href="#4-2-while循环" class="headerlink" title="4.2 while循环"></a>4.2 while循环</h5><ul>
<li><p>语法格式</p>
<p>①初始化部分 </p>
<p>while(②循环条件部分)｛ </p>
<p>​             ③循环体部分; </p>
<p>​             ④迭代部分;</p>
<p> }</p>
</li>
<li><p>执行过程：</p>
<p>①-②-③-④-②-③-④-②-③-④-…-②</p>
</li>
<li><p>说明：</p>
<ul>
<li>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li>
<li>for循环和while循环可以相互转换</li>
</ul>
</li>
</ul>
<h5 id="4-3-do-while循环"><a href="#4-3-do-while循环" class="headerlink" title="4.3 do-while循环"></a>4.3 do-while循环</h5><ul>
<li><p>语法格式</p>
<p>①初始化部分; </p>
<p>do{ </p>
<p>​        ③循环体部分 </p>
<p>​        ④迭代部分 }while(②循环条件部分);</p>
</li>
<li><p>执行过程：①-==③-④==-②-③-④-②-③-④-…②</p>
</li>
<li><p>说明：do-while循环至少执行一次循环体。</p>
</li>
</ul>
<h4 id="5-特殊关键字的使用：-break、continue"><a href="#5-特殊关键字的使用：-break、continue" class="headerlink" title="5. 特殊关键字的使用： break、continue"></a>5. 特殊关键字的使用： break、continue</h4><h5 id="5-1-特殊流程控制语句1"><a href="#5-1-特殊流程控制语句1" class="headerlink" title="5.1 特殊流程控制语句1"></a>5.1 特殊流程控制语句1</h5><ul>
<li><p>break 语句</p>
<ul>
<li><p>break语句用于终止某个语句块的执行 </p>
<p>{ …… </p>
<p>​    break; </p>
<p>​    …… </p>
<p>}</p>
</li>
<li><p>break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块</p>
<p>label1: { …… </p>
<p>label2:         { …… </p>
<p>label3:                 { …… </p>
<p>​                                    break label2; </p>
<p>​                                    …… </p>
<p>​                                }</p>
<p>​                         } </p>
<p>​                 }</p>
</li>
</ul>
</li>
</ul>
<h5 id="5-2-特殊流程控制语句2"><a href="#5-2-特殊流程控制语句2" class="headerlink" title="5.2 特殊流程控制语句2"></a>5.2 特殊流程控制语句2</h5><ul>
<li>continue 语句<ul>
<li>continue只能使用在循环结构中</li>
<li>continue语句用于跳过其所在循环语句块的一次执行，继续下一次循环</li>
<li>continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环</li>
</ul>
</li>
</ul>
<h5 id="5-3-特殊流程控制语句3"><a href="#5-3-特殊流程控制语句3" class="headerlink" title="5.3 特殊流程控制语句3"></a>5.3 特殊流程控制语句3</h5><ul>
<li>return：并非专门用于结束循环的，它的功能是结束一个方法。 当一个方法执行到一个return语句时，这个方法将被结束。</li>
<li>与break和continue不同的是，return直接结束整个方法，不管这个return处于多少层循环之内</li>
<li>break只能用于switch语句和循环语句中。</li>
<li>continue 只能用于循环语句中。</li>
<li>二者功能类似，但continue是终止本次循环，==break是终止本层循环。==</li>
<li>break、continue之后不能有其他的语句，因为程序永远不会执行其后的语句。</li>
<li>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。</li>
<li>很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条 语句上，然后执行它。但使程序容易出错。Java中的break和continue是不同 于goto的。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>03-数组</title>
    <url>/2021/08/14/03%E2%80%94%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="03—数组"><a href="#03—数组" class="headerlink" title="03—数组"></a>03—数组</h3><h4 id="1-数组的概述"><a href="#1-数组的概述" class="headerlink" title="1. 数组的概述"></a>1. 数组的概述</h4><ul>
<li>数组(Array)，是多个相同类型数据按一定顺序排列 的集合，并使用一个名字命名，并通过编号的方式 对这些数据进行统一管理。</li>
<li>数组的常见概念<ul>
<li>数组名</li>
<li>下标(或索引)</li>
<li>元素</li>
<li>数组的长度</li>
</ul>
</li>
<li>数组本身是==引用数据类型==，而数组中的元素可以是==任何数据类型==，包括 基本数据类型和引用数据类型。</li>
<li>创建数组对象会在内存中开辟一整块连续的空间，而数组名中引用的是这块连续空间的首地址。</li>
<li>数组的==长度一旦确定，就不能修改。==</li>
<li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li>
<li>数组的分类：<ul>
<li>按照维度：一维数组、二维数组、三维数组、…</li>
<li>按照元素的数据类型分：基本数据类型元素的数组、引用数据类型元素的数组(即对 象数组)</li>
</ul>
</li>
</ul>
<h4 id="2-一维数组"><a href="#2-一维数组" class="headerlink" title="2. 一维数组"></a>2. 一维数组</h4><h5 id="2-1-声明"><a href="#2-1-声明" class="headerlink" title="2.1 声明"></a>2.1 声明</h5><ul>
<li>一维数组的声明方式： type var[] 或 type[] var；<ul>
<li>例如<ul>
<li>int a[]; </li>
<li>int[] a1; </li>
<li>double b[]; </li>
<li>String[] c; //引用类型变量数组</li>
</ul>
</li>
</ul>
</li>
<li>Java语言中声明数组时不能指定其长度(数组中元素的数)， 例如： int a[5]; //非法</li>
</ul>
<h5 id="2-2-初始化"><a href="#2-2-初始化" class="headerlink" title="2.2 初始化"></a>2.2 初始化</h5><ul>
<li><p>动态初始化：数组声明且为数组元素分配空间与赋值的操作分开进行</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142020501.png" alt="image-20210814202012456"></p>
</li>
<li><p>静态初始化：在定义数组的同时就为数组元素分配空间并赋值。</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142022292.png" alt="image-20210814202203908"></p>
</li>
</ul>
<h5 id="2-3-数组元素的引用"><a href="#2-3-数组元素的引用" class="headerlink" title="2.3 数组元素的引用"></a>2.3 数组元素的引用</h5><ul>
<li><p>定义并用运算符new为之分配空间后，才可以引用数组中的每个元素；</p>
</li>
<li><p>数组元素的引用方式：数组名[数组元素下标]</p>
<ul>
<li>数组元素下标可以是整型常量或==整型表达式==。如a[3] , b[i] , c[6*i];</li>
<li>数组元素下标从0开始；长度为n的数组合法下标取值范围: 0 —&gt;n-1；如int a[]=new  int[3]; 可引用的数组元素为a[0]、a[1]、a[2]</li>
</ul>
</li>
<li><p>每个数组都有一个属性length指明它的长度，例如：a.length 指明数组a的长度(元素个数)</p>
<ul>
<li>数组一旦初始化，其长度是不可变的</li>
</ul>
</li>
<li><p>数组是引用类型，它的元素相当于类的成员变量，因此数组一经 分配空间，其中的每个元素也被按照成员变量同样的方式被隐式 初始化。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> a[]= <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">		System.out.println(a[<span class="number">3</span>]); <span class="comment">//a[3]的默认值为0</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对于基本数据类型而言，默认初始化值各有不同</p>
</li>
<li><p>对于引用数据类型而言，默认初始化值为null(注意与0不同！)</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142045181.png" alt="image-20210814204510834"></p>
</li>
</ul>
</li>
</ul>
<h5 id="2-4-一维数组的使用"><a href="#2-4-一维数组的使用" class="headerlink" title="2.4 一维数组的使用"></a>2.4 一维数组的使用</h5><ul>
<li><p>Java中使用关键字new来创建数组</p>
</li>
<li><p>如下是创建基本数据类型元素的一维数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] s;<span class="comment">//⭐</span></span><br><span class="line">		s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++ ) &#123;</span><br><span class="line">			s[i] =<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">			System.out.println(s[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142055841.png" alt="image-20210814205542408"> </p>
</li>
<li><p>创建基本数据类型数组 (2)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] s;</span><br><span class="line">		s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//⭐</span></span><br><span class="line">		<span class="comment">//int[] s=new int[10];</span></span><br><span class="line">		<span class="comment">//基本数据类型数组在显式赋值之前，</span></span><br><span class="line">		<span class="comment">//Java会自动给他们赋默认值。</span></span><br><span class="line">		<span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++ ) &#123;</span><br><span class="line">			s[i] =<span class="number">2</span>*i+<span class="number">1</span>;</span><br><span class="line">			System.out.println(s[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142101509.png" alt="image-20210814210132161"></p>
</li>
<li><p>创建基本数据类型数组 (3)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] s;</span><br><span class="line">		s = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">		<span class="keyword">for</span> ( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++ ) &#123;</span><br><span class="line">			s[i] =<span class="number">2</span>*i+<span class="number">1</span>;<span class="comment">//⭐</span></span><br><span class="line">			System.out.println(s[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>内存结构</strong></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142105646.png" alt="image-20210814210534290"></p>
<p><strong>一维数组内存解析</strong></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142114758.png" alt="屏幕截图 2021-08-14 211401"></p>
</li>
</ul>
<h4 id="3-多维数组的使用"><a href="#3-多维数组的使用" class="headerlink" title="3. 多维数组的使用"></a>3. 多维数组的使用</h4><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142116543.png" alt="image-20210814211605498"></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142116877.png" alt="image-20210814211632843"></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142117692.png" alt="image-20210814211737151"></p>
<p><strong>二维数组内存解析</strong></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142118788.png" alt="image-20210814211812263"></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142121628.png" alt="image-20210814212133388"></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142121935.png" alt="image-20210814212153112"></p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142122194.png" alt="image-20210814212212578"></p>
<h4 id="4-Arrys工具类的使用"><a href="#4-Arrys工具类的使用" class="headerlink" title="4. Arrys工具类的使用"></a>4. Arrys工具类的使用</h4><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比 如排序和搜索）的各种方法。</p>
<p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142140195.png" alt="image-20210814213814165"></p>
<ul>
<li><p>java.util.Arrays类的sort()方法提供了数组元素排序功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> [] numbers = &#123;<span class="number">5</span>,<span class="number">900</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">77</span>,<span class="number">30</span>,<span class="number">64</span>,<span class="number">700</span>&#125;;</span><br><span class="line">		Arrays.sort(numbers);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++)&#123;</span><br><span class="line">			System.out.println(numbers[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5-数组使用中的常见异常"><a href="#5-数组使用中的常见异常" class="headerlink" title="5. 数组使用中的常见异常"></a>5. 数组使用中的常见异常</h4><p><img src="https://gitee.com/xiongzero/PicGo/raw/master/img/202108142148445.png" alt="image-20210814214839629"></p>
]]></content>
      <categories>
        <category>编程</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
